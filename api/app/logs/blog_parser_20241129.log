2024-11-29 00:03:09 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:03:09 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:03:10 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:93)
2024-11-29 00:03:10 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:93)
2024-11-29 00:03:11 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:93)
2024-11-29 00:03:11 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:93)
2024-11-29 00:03:11 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:93)
2024-11-29 00:03:11 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:171)
2024-11-29 00:03:11 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:93)
2024-11-29 00:03:11 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:93)
2024-11-29 00:03:11 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:368)
2024-11-29 00:03:11 [INFO] 作者：削微寒的程序员之路 (base_parser.py:369)
2024-11-29 00:03:11 [INFO] 时间：2024-11-28 (base_parser.py:370)
2024-11-29 00:03:11 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:371)
2024-11-29 00:03:11 [INFO] 保存文件夹：temp\-1051346102422185840\博客园-削微寒的程序员之路 (base_parser.py:258)
2024-11-29 00:03:16 [INFO] 开始保存文章 (base_parser.py:410)
2024-11-29 00:03:16 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:235)
2024-11-29 00:03:16 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:03:16 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:03:16 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:03:16 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:03:16 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:03:16 [INFO] 保存目录: temp\-1051346102422185840\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:03:16 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:03:16 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:03:16 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:03:16 [INFO] HTML文件已保存: temp\-1051346102422185840\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:03:16 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:03:39 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:03:39 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:03:40 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:93)
2024-11-29 00:03:40 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:93)
2024-11-29 00:03:40 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:93)
2024-11-29 00:03:40 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:93)
2024-11-29 00:03:40 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:93)
2024-11-29 00:03:40 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:171)
2024-11-29 00:03:40 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:93)
2024-11-29 00:03:40 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:93)
2024-11-29 00:03:40 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:368)
2024-11-29 00:03:40 [INFO] 作者：削微寒的程序员之路 (base_parser.py:369)
2024-11-29 00:03:40 [INFO] 时间：2024-11-28 (base_parser.py:370)
2024-11-29 00:03:40 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:371)
2024-11-29 00:03:40 [INFO] 保存文件夹：temp\-1902698307003556495\博客园-削微寒的程序员之路 (base_parser.py:258)
2024-11-29 00:03:47 [INFO] 开始保存文章 (base_parser.py:410)
2024-11-29 00:03:47 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:235)
2024-11-29 00:03:47 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:03:47 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:03:47 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:03:47 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:03:47 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:03:47 [INFO] 保存目录: temp\-1902698307003556495\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:03:47 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:03:47 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:03:47 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:03:47 [INFO] HTML文件已保存: temp\-1902698307003556495\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:03:47 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:10:22 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:10:22 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:10:24 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:95)
2024-11-29 00:10:24 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:95)
2024-11-29 00:10:24 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:95)
2024-11-29 00:10:24 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:95)
2024-11-29 00:10:24 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:95)
2024-11-29 00:10:24 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:173)
2024-11-29 00:10:24 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:95)
2024-11-29 00:10:24 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:95)
2024-11-29 00:10:24 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:370)
2024-11-29 00:10:24 [INFO] 作者：削微寒的程序员之路 (base_parser.py:371)
2024-11-29 00:10:24 [INFO] 时间：2024-11-28 (base_parser.py:372)
2024-11-29 00:10:24 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:373)
2024-11-29 00:10:24 [INFO] 保存文件夹：temp\-6018127884646991538\博客园-削微寒的程序员之路 (base_parser.py:260)
2024-11-29 00:10:31 [INFO] 开始保存文章 (base_parser.py:412)
2024-11-29 00:10:31 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:237)
2024-11-29 00:10:31 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:10:31 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:10:31 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:10:31 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:10:31 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:10:31 [INFO] 保存目录: temp\-6018127884646991538\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:10:31 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:10:31 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:10:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:10:32 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:10:32 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:10:32 [INFO] HTML文件已保存: temp\-6018127884646991538\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:10:32 [INFO] 添加文件到列表00: temp\-6018127884646991538\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:69)
2024-11-29 00:10:32 [INFO] 添加文件到列表: temp\-6018127884646991538\博客园-削微寒的程序员之路 (base_parser.py:70)
2024-11-29 00:10:32 [INFO] 下载URL: /download/博客园-削微寒的程序员之路/temp\-6018127884646991538\博客园-削微寒的程序员之路 (base_parser.py:71)
2024-11-29 00:10:32 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:19:04 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:19:04 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:19:05 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:89)
2024-11-29 00:19:05 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:89)
2024-11-29 00:19:05 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:89)
2024-11-29 00:19:05 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:89)
2024-11-29 00:19:05 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:89)
2024-11-29 00:19:05 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:167)
2024-11-29 00:19:05 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:89)
2024-11-29 00:19:05 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:89)
2024-11-29 00:19:05 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:364)
2024-11-29 00:19:05 [INFO] 作者：削微寒的程序员之路 (base_parser.py:365)
2024-11-29 00:19:05 [INFO] 时间：2024-11-28 (base_parser.py:366)
2024-11-29 00:19:05 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:367)
2024-11-29 00:19:05 [INFO] 保存文件夹：temp\2618613095754844053\博客园-削微寒的程序员之路 (base_parser.py:254)
2024-11-29 00:19:12 [INFO] 开始保存文章 (base_parser.py:406)
2024-11-29 00:19:12 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:231)
2024-11-29 00:19:12 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:19:12 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:19:12 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:19:12 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:19:12 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:19:12 [INFO] 保存目录: temp\2618613095754844053\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:19:12 [INFO] HTML文件已保存: temp\2618613095754844053\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:19:12 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (base_parser.py:231)
2024-11-29 00:19:12 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:19:12 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:19:12 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:19:12 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:19:12 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:19:12 [INFO] 保存目录: temp\2618613095754844053\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:19:12 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:19:12 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:19:12 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:19:12 [INFO] Markdown文件已保存: temp\2618613095754844053\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (save_utils.py:127)
2024-11-29 00:19:12 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:19:44 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:19:44 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:19:46 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:89)
2024-11-29 00:19:46 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:89)
2024-11-29 00:19:46 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:89)
2024-11-29 00:19:46 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:89)
2024-11-29 00:19:46 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:89)
2024-11-29 00:19:46 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:167)
2024-11-29 00:19:46 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:89)
2024-11-29 00:19:46 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:89)
2024-11-29 00:19:46 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:364)
2024-11-29 00:19:46 [INFO] 作者：削微寒的程序员之路 (base_parser.py:365)
2024-11-29 00:19:46 [INFO] 时间：2024-11-28 (base_parser.py:366)
2024-11-29 00:19:46 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:367)
2024-11-29 00:19:46 [INFO] 保存文件夹：temp\2618613095754844053\博客园-削微寒的程序员之路 (base_parser.py:254)
2024-11-29 00:19:54 [INFO] 开始保存文章 (base_parser.py:406)
2024-11-29 00:19:54 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:231)
2024-11-29 00:19:54 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:19:54 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:19:54 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:19:54 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:19:54 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:19:54 [INFO] 保存目录: temp\2618613095754844053\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:19:54 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:19:54 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:19:54 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:19:54 [INFO] HTML文件已保存: temp\2618613095754844053\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:19:54 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:22:39 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:22:39 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:22:41 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:89)
2024-11-29 00:22:41 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:89)
2024-11-29 00:22:41 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:89)
2024-11-29 00:22:41 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:89)
2024-11-29 00:22:41 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:89)
2024-11-29 00:22:41 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:167)
2024-11-29 00:22:41 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:89)
2024-11-29 00:22:41 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:89)
2024-11-29 00:22:41 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:364)
2024-11-29 00:22:41 [INFO] 作者：削微寒的程序员之路 (base_parser.py:365)
2024-11-29 00:22:41 [INFO] 时间：2024-11-28 (base_parser.py:366)
2024-11-29 00:22:41 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:367)
2024-11-29 00:22:41 [INFO] 保存文件夹：temp\6184545518242645243\博客园-削微寒的程序员之路 (base_parser.py:254)
2024-11-29 00:22:49 [INFO] 开始保存文章 (base_parser.py:406)
2024-11-29 00:22:49 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:231)
2024-11-29 00:22:49 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:22:49 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:22:49 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:22:49 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:22:49 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:22:49 [INFO] 保存目录: temp\6184545518242645243\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:22:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:22:49 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:22:49 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:22:49 [INFO] HTML文件已保存: temp\6184545518242645243\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:22:49 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:22:49 [INFO] 最终返回的文件列表: [] (api.py:76)
2024-11-29 00:25:49 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:25:49 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:25:51 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:89)
2024-11-29 00:25:51 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:89)
2024-11-29 00:25:51 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:89)
2024-11-29 00:25:51 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:89)
2024-11-29 00:25:51 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:89)
2024-11-29 00:25:51 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:167)
2024-11-29 00:25:51 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:89)
2024-11-29 00:25:51 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:89)
2024-11-29 00:25:51 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:364)
2024-11-29 00:25:51 [INFO] 作者：削微寒的程序员之路 (base_parser.py:365)
2024-11-29 00:25:51 [INFO] 时间：2024-11-28 (base_parser.py:366)
2024-11-29 00:25:51 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:367)
2024-11-29 00:25:51 [INFO] 保存文件夹：temp\-448348909161440934\博客园-削微寒的程序员之路 (base_parser.py:254)
2024-11-29 00:26:00 [INFO] 开始保存文章 (base_parser.py:406)
2024-11-29 00:26:00 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:231)
2024-11-29 00:26:00 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:26:00 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:26:00 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:26:00 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:26:00 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:26:00 [INFO] 保存目录: temp\-448348909161440934\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:26:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:26:00 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:26:00 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:26:00 [INFO] HTML文件已保存: temp\-448348909161440934\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:26:00 [INFO] 最终返回的文件列表: [] (api.py:76)
2024-11-29 00:27:32 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:27:32 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:27:33 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:27:33 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:27:33 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:90)
2024-11-29 00:27:33 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:90)
2024-11-29 00:27:33 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:90)
2024-11-29 00:27:33 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:168)
2024-11-29 00:27:33 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:90)
2024-11-29 00:27:33 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:90)
2024-11-29 00:27:33 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:365)
2024-11-29 00:27:33 [INFO] 作者：削微寒的程序员之路 (base_parser.py:366)
2024-11-29 00:27:33 [INFO] 时间：2024-11-28 (base_parser.py:367)
2024-11-29 00:27:33 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:368)
2024-11-29 00:27:33 [INFO] 保存文件夹：temp\-6584515833690170867\博客园-削微寒的程序员之路 (base_parser.py:255)
2024-11-29 00:27:42 [INFO] 开始保存文章 (base_parser.py:407)
2024-11-29 00:27:42 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:232)
2024-11-29 00:27:42 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:27:42 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:27:42 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:27:42 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:27:42 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:27:42 [INFO] 保存目录: temp\-6584515833690170867\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:27:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:27:42 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:27:42 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:27:42 [INFO] HTML文件已保存: temp\-6584515833690170867\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:27:42 [INFO] 添加文件到文件列表：temp\-6584515833690170867\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:64)
2024-11-29 00:27:42 [INFO] 最终返回的文件列表: [] (api.py:76)
2024-11-29 00:31:24 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:31:24 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:31:25 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:31:25 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:31:25 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:90)
2024-11-29 00:31:25 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:90)
2024-11-29 00:31:25 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:90)
2024-11-29 00:31:25 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:168)
2024-11-29 00:31:25 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:90)
2024-11-29 00:31:25 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:90)
2024-11-29 00:31:25 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:365)
2024-11-29 00:31:25 [INFO] 作者：削微寒的程序员之路 (base_parser.py:366)
2024-11-29 00:31:25 [INFO] 时间：2024-11-28 (base_parser.py:367)
2024-11-29 00:31:25 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:368)
2024-11-29 00:31:25 [INFO] 保存文件夹：temp\-108410966649231943\博客园-削微寒的程序员之路 (base_parser.py:255)
2024-11-29 00:31:34 [INFO] 开始保存文章 (base_parser.py:407)
2024-11-29 00:31:34 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:232)
2024-11-29 00:31:34 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:31:34 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:31:34 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:31:34 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:31:34 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:31:34 [INFO] 保存目录: temp\-108410966649231943\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:31:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:31:34 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:31:34 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:31:34 [INFO] HTML文件已保存: temp\-108410966649231943\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:31:34 [INFO] 添加文件到文件列表：temp\-108410966649231943\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:64)
2024-11-29 00:31:34 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\-108410966649231943\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': '《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html'}] (api.py:67)
2024-11-29 00:31:34 [INFO] 请求的格式: {'html'} (api.py:78)
2024-11-29 00:31:34 [INFO] 当前文件格式: 《hellogithub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (api.py:82)
2024-11-29 00:31:34 [INFO] 最终返回的文件列表: [] (api.py:93)
2024-11-29 00:32:51 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:32:51 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:32:52 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:32:52 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:32:52 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:90)
2024-11-29 00:32:52 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:90)
2024-11-29 00:32:52 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:90)
2024-11-29 00:32:52 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:168)
2024-11-29 00:32:52 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:90)
2024-11-29 00:32:52 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:90)
2024-11-29 00:32:52 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:365)
2024-11-29 00:32:52 [INFO] 作者：削微寒的程序员之路 (base_parser.py:366)
2024-11-29 00:32:52 [INFO] 时间：2024-11-28 (base_parser.py:367)
2024-11-29 00:32:52 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:368)
2024-11-29 00:32:52 [INFO] 保存文件夹：temp\8650924844328987360\博客园-削微寒的程序员之路 (base_parser.py:255)
2024-11-29 00:32:58 [INFO] 开始保存文章 (base_parser.py:407)
2024-11-29 00:32:58 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:232)
2024-11-29 00:32:58 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:32:58 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:32:58 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:32:58 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:32:58 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:32:58 [INFO] 保存目录: temp\8650924844328987360\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:32:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:32:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:32:59 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:32:59 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:32:59 [INFO] HTML文件已保存: temp\8650924844328987360\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:32:59 [INFO] 添加文件到文件列表：temp\8650924844328987360\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:64)
2024-11-29 00:32:59 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\8650924844328987360\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': '《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html'}] (api.py:67)
2024-11-29 00:32:59 [INFO] 请求的格式: {'html'} (api.py:78)
2024-11-29 00:32:59 [INFO] 文件扩展名: html (api.py:84)
2024-11-29 00:32:59 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': '/download/temp/8650924844328987360/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:94)
2024-11-29 00:32:59 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='/download/temp/8650924844328987360/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:97)
2024-11-29 00:33:14 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:33:14 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:33:15 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:33:15 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:33:15 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:90)
2024-11-29 00:33:15 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:90)
2024-11-29 00:33:15 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:90)
2024-11-29 00:33:15 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:168)
2024-11-29 00:33:15 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:90)
2024-11-29 00:33:15 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:90)
2024-11-29 00:33:15 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:365)
2024-11-29 00:33:15 [INFO] 作者：削微寒的程序员之路 (base_parser.py:366)
2024-11-29 00:33:15 [INFO] 时间：2024-11-28 (base_parser.py:367)
2024-11-29 00:33:15 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:368)
2024-11-29 00:33:15 [INFO] 保存文件夹：temp\8650924844328987360\博客园-削微寒的程序员之路 (base_parser.py:255)
2024-11-29 00:33:22 [INFO] 开始保存文章 (base_parser.py:407)
2024-11-29 00:33:22 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:232)
2024-11-29 00:33:22 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:33:22 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:33:22 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:33:22 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:33:22 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:33:22 [INFO] 保存目录: temp\8650924844328987360\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:33:22 [INFO] HTML文件已保存: temp\8650924844328987360\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:33:22 [INFO] 添加文件到文件列表：temp\8650924844328987360\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:64)
2024-11-29 00:33:22 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (base_parser.py:232)
2024-11-29 00:33:22 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:33:22 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:33:22 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:33:22 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:33:22 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:33:22 [INFO] 保存目录: temp\8650924844328987360\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:33:22 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:33:22 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:33:22 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:33:22 [INFO] Markdown文件已保存: temp\8650924844328987360\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (save_utils.py:127)
2024-11-29 00:33:22 [INFO] 添加文件到文件列表：temp\8650924844328987360\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (base_parser.py:64)
2024-11-29 00:33:22 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\8650924844328987360\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': '《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html'}, {'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\8650924844328987360\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md', 'size': 24426, 'format': '《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md'}] (api.py:67)
2024-11-29 00:33:22 [INFO] 请求的格式: {'md', 'html'} (api.py:78)
2024-11-29 00:33:22 [INFO] 文件扩展名: html (api.py:84)
2024-11-29 00:33:22 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': '/download/temp/8650924844328987360/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:94)
2024-11-29 00:33:22 [INFO] 文件扩展名: md (api.py:84)
2024-11-29 00:33:22 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': '/download/temp/8650924844328987360/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md', 'size': 24426, 'format': 'md'} (api.py:94)
2024-11-29 00:33:22 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='/download/temp/8650924844328987360/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html'), FileInfo(title='《HelloGitHub》第 104 期', download_url='/download/temp/8650924844328987360/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md', size=24426, format='md')] (api.py:97)
2024-11-29 00:35:33 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:35:33 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:35:34 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:35:34 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:35:34 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:90)
2024-11-29 00:35:34 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:90)
2024-11-29 00:35:34 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:90)
2024-11-29 00:35:34 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:168)
2024-11-29 00:35:34 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:90)
2024-11-29 00:35:34 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:90)
2024-11-29 00:35:34 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:365)
2024-11-29 00:35:34 [INFO] 作者：削微寒的程序员之路 (base_parser.py:366)
2024-11-29 00:35:34 [INFO] 时间：2024-11-28 (base_parser.py:367)
2024-11-29 00:35:34 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:368)
2024-11-29 00:35:34 [INFO] 保存文件夹：temp\3265025108287946796\博客园-削微寒的程序员之路 (base_parser.py:255)
2024-11-29 00:35:41 [INFO] 开始保存文章 (base_parser.py:407)
2024-11-29 00:35:41 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:232)
2024-11-29 00:35:41 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:35:41 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:35:41 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:35:41 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:35:41 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:35:41 [INFO] 保存目录: temp\3265025108287946796\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:35:41 [INFO] HTML文件已保存: temp\3265025108287946796\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:35:41 [INFO] 添加文件到文件列表：temp\3265025108287946796\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:64)
2024-11-29 00:35:41 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (base_parser.py:232)
2024-11-29 00:35:41 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:35:41 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:35:41 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:35:41 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:35:41 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:35:41 [INFO] 保存目录: temp\3265025108287946796\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:35:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:35:41 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:35:42 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:35:42 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:35:42 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:35:42 [INFO] Markdown文件已保存: temp\3265025108287946796\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (save_utils.py:127)
2024-11-29 00:35:42 [INFO] 添加文件到文件列表：temp\3265025108287946796\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (base_parser.py:64)
2024-11-29 00:35:42 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\3265025108287946796\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': '《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html'}, {'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\3265025108287946796\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md', 'size': 24426, 'format': '《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md'}] (api.py:67)
2024-11-29 00:35:42 [INFO] 请求的格式: {'html', 'md'} (api.py:78)
2024-11-29 00:35:42 [INFO] 文件扩展名: html (api.py:84)
2024-11-29 00:35:42 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'downloads/3265025108287946796/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:94)
2024-11-29 00:35:42 [INFO] 文件扩展名: md (api.py:84)
2024-11-29 00:35:42 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'downloads/3265025108287946796/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md', 'size': 24426, 'format': 'md'} (api.py:94)
2024-11-29 00:35:42 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='downloads/3265025108287946796/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html'), FileInfo(title='《HelloGitHub》第 104 期', download_url='downloads/3265025108287946796/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md', size=24426, format='md')] (api.py:97)
2024-11-29 00:35:52 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:35:52 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:35:54 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:35:54 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:35:54 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:90)
2024-11-29 00:35:54 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:90)
2024-11-29 00:35:54 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:90)
2024-11-29 00:35:54 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:168)
2024-11-29 00:35:54 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:90)
2024-11-29 00:35:54 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:90)
2024-11-29 00:35:54 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:365)
2024-11-29 00:35:54 [INFO] 作者：削微寒的程序员之路 (base_parser.py:366)
2024-11-29 00:35:54 [INFO] 时间：2024-11-28 (base_parser.py:367)
2024-11-29 00:35:54 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:368)
2024-11-29 00:35:54 [INFO] 保存文件夹：temp\3265025108287946796\博客园-削微寒的程序员之路 (base_parser.py:255)
2024-11-29 00:36:00 [INFO] 开始保存文章 (base_parser.py:407)
2024-11-29 00:36:00 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:232)
2024-11-29 00:36:00 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:36:00 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:36:00 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:36:00 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:36:00 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:36:00 [INFO] 保存目录: temp\3265025108287946796\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:36:00 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:36:00 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:36:00 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:36:00 [INFO] HTML文件已保存: temp\3265025108287946796\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:36:00 [INFO] 添加文件到文件列表：temp\3265025108287946796\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:64)
2024-11-29 00:36:00 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\3265025108287946796\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': '《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html'}] (api.py:67)
2024-11-29 00:36:00 [INFO] 请求的格式: {'html'} (api.py:78)
2024-11-29 00:36:00 [INFO] 文件扩展名: html (api.py:84)
2024-11-29 00:36:00 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'downloads/3265025108287946796/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:94)
2024-11-29 00:36:00 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='downloads/3265025108287946796/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:97)
2024-11-29 00:36:41 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 00:36:41 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 00:36:42 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:36:42 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 00:36:42 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:90)
2024-11-29 00:36:42 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:90)
2024-11-29 00:36:42 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:90)
2024-11-29 00:36:42 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:168)
2024-11-29 00:36:42 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:90)
2024-11-29 00:36:42 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:90)
2024-11-29 00:36:42 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:365)
2024-11-29 00:36:42 [INFO] 作者：削微寒的程序员之路 (base_parser.py:366)
2024-11-29 00:36:42 [INFO] 时间：2024-11-28 (base_parser.py:367)
2024-11-29 00:36:42 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:368)
2024-11-29 00:36:42 [INFO] 保存文件夹：temp\3265025108287946796\博客园-削微寒的程序员之路 (base_parser.py:255)
2024-11-29 00:36:49 [INFO] 开始保存文章 (base_parser.py:407)
2024-11-29 00:36:49 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:232)
2024-11-29 00:36:49 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 00:36:49 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 00:36:49 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 00:36:49 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 00:36:49 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 00:36:49 [INFO] 保存目录: temp\3265025108287946796\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 00:36:49 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 00:36:49 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 00:36:49 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 00:36:49 [INFO] HTML文件已保存: temp\3265025108287946796\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 00:36:49 [INFO] 添加文件到文件列表：temp\3265025108287946796\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:64)
2024-11-29 00:36:49 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\3265025108287946796\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': '《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html'}] (api.py:67)
2024-11-29 00:36:49 [INFO] 请求的格式: {'html'} (api.py:78)
2024-11-29 00:36:49 [INFO] 文件扩展名: html (api.py:84)
2024-11-29 00:36:49 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'downloads/3265025108287946796/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:94)
2024-11-29 00:36:49 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='downloads/3265025108287946796/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:97)
2024-11-29 13:44:26 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 13:44:26 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 13:44:26 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 13:44:26 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 13:44:26 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:90)
2024-11-29 13:44:26 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:90)
2024-11-29 13:44:26 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:90)
2024-11-29 13:44:26 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:168)
2024-11-29 13:44:26 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:90)
2024-11-29 13:44:26 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:90)
2024-11-29 13:44:26 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:365)
2024-11-29 13:44:26 [INFO] 作者：削微寒的程序员之路 (base_parser.py:366)
2024-11-29 13:44:26 [INFO] 时间：2024-11-28 (base_parser.py:367)
2024-11-29 13:44:26 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:368)
2024-11-29 13:44:26 [INFO] 保存文件夹：temp\-2846627838271345178\博客园-削微寒的程序员之路 (base_parser.py:255)
2024-11-29 13:44:29 [INFO] 开始保存文章 (base_parser.py:407)
2024-11-29 13:44:29 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:232)
2024-11-29 13:44:29 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 13:44:29 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 13:44:29 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 13:44:29 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 13:44:29 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 13:44:29 [INFO] 保存目录: temp\-2846627838271345178\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 13:44:29 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 13:44:29 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 13:44:29 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 13:44:29 [INFO] HTML文件已保存: temp\-2846627838271345178\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 13:44:29 [INFO] 添加文件到文件列表：temp\-2846627838271345178\博客园-削微寒的程序员之路 (base_parser.py:64)
2024-11-29 13:44:29 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\-2846627838271345178\\博客园-削微寒的程序员之路', 'size': 0, 'format': 'html'}] (api.py:67)
2024-11-29 13:44:29 [INFO] 请求的格式: {'html'} (api.py:78)
2024-11-29 13:44:29 [INFO] 文件扩展名:  (api.py:84)
2024-11-29 13:44:29 [INFO] 最终返回的文件列表: [] (api.py:97)
2024-11-29 13:47:14 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 13:47:14 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 13:47:15 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 13:47:15 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:90)
2024-11-29 13:47:15 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:90)
2024-11-29 13:47:15 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:90)
2024-11-29 13:47:15 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:90)
2024-11-29 13:47:15 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:168)
2024-11-29 13:47:15 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:90)
2024-11-29 13:47:15 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:90)
2024-11-29 13:47:15 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:365)
2024-11-29 13:47:15 [INFO] 作者：削微寒的程序员之路 (base_parser.py:366)
2024-11-29 13:47:15 [INFO] 时间：2024-11-28 (base_parser.py:367)
2024-11-29 13:47:15 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:368)
2024-11-29 13:47:15 [INFO] 保存文件夹：temp\-3052489029944746571\博客园-削微寒的程序员之路 (base_parser.py:255)
2024-11-29 13:47:17 [INFO] 开始保存文章 (base_parser.py:407)
2024-11-29 13:47:17 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:232)
2024-11-29 13:47:17 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 13:47:17 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 13:47:17 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 13:47:17 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 13:47:17 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 13:47:17 [INFO] 保存目录: temp\-3052489029944746571\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 13:47:17 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 13:47:17 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 13:47:17 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 13:47:17 [INFO] HTML文件已保存: temp\-3052489029944746571\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 13:47:17 [INFO] 添加文件到文件列表：temp\-3052489029944746571\博客园-削微寒的程序员之路 (base_parser.py:64)
2024-11-29 13:47:17 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\-3052489029944746571\\博客园-削微寒的程序员之路', 'size': 0, 'format': 'html'}] (api.py:67)
2024-11-29 13:47:17 [INFO] 请求的格式: {'html'} (api.py:78)
2024-11-29 13:47:17 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'downloads/-3052489029944746571/博客园-削微寒的程序员之路', 'size': 0, 'format': 'html'} (api.py:86)
2024-11-29 13:47:17 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='downloads/-3052489029944746571/博客园-削微寒的程序员之路', size=0, format='html')] (api.py:90)
2024-11-29 13:48:48 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 13:48:48 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 13:48:48 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 13:48:48 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 13:48:48 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 13:48:48 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 13:48:48 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 13:48:48 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:169)
2024-11-29 13:48:48 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 13:48:48 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 13:48:48 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:366)
2024-11-29 13:48:48 [INFO] 作者：削微寒的程序员之路 (base_parser.py:367)
2024-11-29 13:48:48 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 13:48:48 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:369)
2024-11-29 13:48:48 [INFO] 保存文件夹：temp\103998187862055745\博客园-削微寒的程序员之路 (base_parser.py:256)
2024-11-29 13:48:51 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 13:48:51 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 13:48:51 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 13:48:51 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 13:48:51 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 13:48:51 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 13:48:51 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 13:48:51 [INFO] 保存目录: temp\103998187862055745\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 13:48:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 13:48:51 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 13:48:51 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 13:48:51 [INFO] HTML文件已保存: temp\103998187862055745\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 13:48:51 [INFO] 添加文件到文件列表：temp\103998187862055745\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 13:48:51 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\103998187862055745\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'}] (api.py:67)
2024-11-29 13:48:51 [INFO] 请求的格式: {'html'} (api.py:78)
2024-11-29 13:48:51 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'downloads/103998187862055745/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:86)
2024-11-29 13:48:51 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='downloads/103998187862055745/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:90)
2024-11-29 13:51:14 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 13:51:14 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 13:51:15 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 13:51:15 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 13:51:15 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 13:51:15 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 13:51:15 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 13:51:15 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:169)
2024-11-29 13:51:15 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 13:51:15 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 13:51:15 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:366)
2024-11-29 13:51:15 [INFO] 作者：削微寒的程序员之路 (base_parser.py:367)
2024-11-29 13:51:15 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 13:51:15 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:369)
2024-11-29 13:51:15 [INFO] 保存文件夹：temp\1724646398985788456\博客园-削微寒的程序员之路 (base_parser.py:256)
2024-11-29 13:51:18 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 13:51:18 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 13:51:18 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 13:51:18 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 13:51:18 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 13:51:18 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 13:51:18 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 13:51:18 [INFO] 保存目录: temp\1724646398985788456\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 13:51:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 13:51:18 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 13:51:18 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 13:51:18 [INFO] HTML文件已保存: temp\1724646398985788456\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 13:51:18 [INFO] 添加文件到文件列表：temp\1724646398985788456\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 13:51:18 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\1724646398985788456\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'}] (api.py:67)
2024-11-29 13:51:18 [INFO] 请求的格式: {'html'} (api.py:78)
2024-11-29 13:51:18 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'downloads/1724646398985788456/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:86)
2024-11-29 13:51:18 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='downloads/1724646398985788456/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:90)
2024-11-29 13:56:48 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 13:56:48 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 13:56:48 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 13:56:48 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 13:56:48 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 13:56:48 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 13:56:48 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 13:56:48 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:169)
2024-11-29 13:56:48 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 13:56:48 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 13:56:48 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:366)
2024-11-29 13:56:48 [INFO] 作者：削微寒的程序员之路 (base_parser.py:367)
2024-11-29 13:56:48 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 13:56:48 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:369)
2024-11-29 13:56:48 [INFO] 保存文件夹：temp\7902965061865985448\博客园-削微寒的程序员之路 (base_parser.py:256)
2024-11-29 13:56:51 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 13:56:51 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 13:56:51 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 13:56:51 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 13:56:51 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 13:56:51 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 13:56:51 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 13:56:51 [INFO] 保存目录: temp\7902965061865985448\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 13:56:51 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 13:56:51 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 13:56:51 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 13:56:51 [INFO] HTML文件已保存: temp\7902965061865985448\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 13:56:51 [INFO] 添加文件到文件列表：temp\7902965061865985448\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 13:56:51 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\7902965061865985448\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'}] (api.py:70)
2024-11-29 13:56:51 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 13:56:51 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'download/7902965061865985448/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:89)
2024-11-29 13:56:51 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='download/7902965061865985448/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:93)
2024-11-29 13:57:06 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 13:57:06 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 13:57:07 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 13:57:07 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 13:57:07 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 13:57:07 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 13:57:07 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 13:57:07 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:169)
2024-11-29 13:57:07 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 13:57:07 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 13:57:07 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:366)
2024-11-29 13:57:07 [INFO] 作者：削微寒的程序员之路 (base_parser.py:367)
2024-11-29 13:57:07 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 13:57:07 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:369)
2024-11-29 13:57:07 [INFO] 保存文件夹：temp\7902965061865985448\博客园-削微寒的程序员之路 (base_parser.py:256)
2024-11-29 13:57:10 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 13:57:10 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 13:57:10 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 13:57:10 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 13:57:10 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 13:57:10 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 13:57:10 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 13:57:10 [INFO] 保存目录: temp\7902965061865985448\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 13:57:10 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 13:57:10 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 13:57:10 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 13:57:10 [INFO] HTML文件已保存: temp\7902965061865985448\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 13:57:10 [INFO] 添加文件到文件列表：temp\7902965061865985448\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 13:57:10 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\7902965061865985448\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'}] (api.py:70)
2024-11-29 13:57:10 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 13:57:10 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'download/7902965061865985448/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:89)
2024-11-29 13:57:10 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='download/7902965061865985448/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:93)
2024-11-29 14:00:40 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:00:40 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:00:41 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:00:41 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:00:41 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:00:41 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:00:41 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:00:41 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:169)
2024-11-29 14:00:41 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:00:41 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:00:41 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:366)
2024-11-29 14:00:41 [INFO] 作者：削微寒的程序员之路 (base_parser.py:367)
2024-11-29 14:00:41 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:00:41 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:369)
2024-11-29 14:00:41 [INFO] 保存文件夹：temp\7902965061865985448\博客园-削微寒的程序员之路 (base_parser.py:256)
2024-11-29 14:00:45 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:00:45 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 14:00:45 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 14:00:45 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:00:45 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 14:00:45 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:00:45 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 14:00:45 [INFO] 保存目录: temp\7902965061865985448\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 14:00:45 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 14:00:45 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 14:00:45 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:00:45 [INFO] HTML文件已保存: temp\7902965061865985448\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 14:00:45 [INFO] 添加文件到文件列表：temp\7902965061865985448\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 14:00:45 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\7902965061865985448\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'}] (api.py:70)
2024-11-29 14:00:46 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 14:00:46 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'download/7902965061865985448/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:89)
2024-11-29 14:00:46 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='download/7902965061865985448/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:93)
2024-11-29 14:00:55 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:00:55 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:00:56 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:00:56 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:00:56 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:00:56 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:00:56 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:00:56 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:169)
2024-11-29 14:00:56 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:00:56 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:00:56 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:366)
2024-11-29 14:00:56 [INFO] 作者：削微寒的程序员之路 (base_parser.py:367)
2024-11-29 14:00:56 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:00:56 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:369)
2024-11-29 14:00:56 [INFO] 保存文件夹：temp\7902965061865985448\博客园-削微寒的程序员之路 (base_parser.py:256)
2024-11-29 14:00:58 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:00:58 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 14:00:58 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 14:00:58 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:00:58 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 14:00:58 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:00:58 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 14:00:58 [INFO] 保存目录: temp\7902965061865985448\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 14:00:58 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 14:00:58 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 14:00:58 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:00:58 [INFO] HTML文件已保存: temp\7902965061865985448\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 14:00:58 [INFO] 添加文件到文件列表：temp\7902965061865985448\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 14:00:58 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\7902965061865985448\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'}] (api.py:70)
2024-11-29 14:00:58 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 14:00:58 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'download/7902965061865985448/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:89)
2024-11-29 14:00:58 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='download/7902965061865985448/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:93)
2024-11-29 14:02:31 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:02:31 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:02:31 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:02:31 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:02:31 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:02:31 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:02:31 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:02:31 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:169)
2024-11-29 14:02:31 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:02:31 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:02:31 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:366)
2024-11-29 14:02:31 [INFO] 作者：削微寒的程序员之路 (base_parser.py:367)
2024-11-29 14:02:31 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:02:31 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:369)
2024-11-29 14:02:31 [INFO] 保存文件夹：temp\7902965061865985448\博客园-削微寒的程序员之路 (base_parser.py:256)
2024-11-29 14:02:34 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:02:34 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 14:02:34 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 14:02:34 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:02:34 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 14:02:34 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:02:34 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 14:02:34 [INFO] 保存目录: temp\7902965061865985448\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 14:02:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 14:02:34 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 14:02:34 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:02:34 [INFO] HTML文件已保存: temp\7902965061865985448\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 14:02:34 [INFO] 添加文件到文件列表：temp\7902965061865985448\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 14:02:34 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\7902965061865985448\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'}] (api.py:70)
2024-11-29 14:02:34 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 14:02:34 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': 'download/7902965061865985448/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:89)
2024-11-29 14:02:34 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='download/7902965061865985448/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:93)
2024-11-29 14:06:04 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:06:04 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:06:04 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:06:04 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:06:04 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:06:04 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:06:04 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:06:04 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:169)
2024-11-29 14:06:04 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:06:04 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:06:04 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:366)
2024-11-29 14:06:04 [INFO] 作者：削微寒的程序员之路 (base_parser.py:367)
2024-11-29 14:06:04 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:06:04 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:369)
2024-11-29 14:06:04 [INFO] 保存文件夹：temp\-5922263527258294663\博客园-削微寒的程序员之路 (base_parser.py:256)
2024-11-29 14:06:07 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:06:07 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 14:06:07 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 14:06:07 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:06:07 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 14:06:07 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:06:07 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 14:06:07 [INFO] 保存目录: temp\-5922263527258294663\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 14:06:07 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 14:06:07 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 14:06:07 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:06:07 [INFO] HTML文件已保存: temp\-5922263527258294663\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 14:06:07 [INFO] 添加文件到文件列表：temp\-5922263527258294663\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 14:06:07 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\-5922263527258294663\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'}] (api.py:70)
2024-11-29 14:06:07 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 14:06:07 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': '/download/-5922263527258294663/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:89)
2024-11-29 14:06:07 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='/download/-5922263527258294663/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:93)
2024-11-29 14:06:15 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:06:15 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:06:15 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:06:15 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:06:15 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:06:15 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:06:15 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:06:15 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:169)
2024-11-29 14:06:15 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:06:15 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:06:15 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:366)
2024-11-29 14:06:15 [INFO] 作者：削微寒的程序员之路 (base_parser.py:367)
2024-11-29 14:06:15 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:06:15 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:369)
2024-11-29 14:06:15 [INFO] 保存文件夹：temp\-5922263527258294663\博客园-削微寒的程序员之路 (base_parser.py:256)
2024-11-29 14:06:18 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:06:18 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 14:06:18 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 14:06:18 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:06:18 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 14:06:18 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:06:18 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 14:06:18 [INFO] 保存目录: temp\-5922263527258294663\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 14:06:18 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 14:06:18 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 14:06:18 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:06:18 [INFO] HTML文件已保存: temp\-5922263527258294663\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 14:06:18 [INFO] 添加文件到文件列表：temp\-5922263527258294663\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 14:06:18 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\-5922263527258294663\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'}] (api.py:70)
2024-11-29 14:06:18 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 14:06:18 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': '/download/-5922263527258294663/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:89)
2024-11-29 14:06:18 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='/download/-5922263527258294663/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html')] (api.py:93)
2024-11-29 14:07:16 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:07:16 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:07:16 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:07:16 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:07:16 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:07:16 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:07:16 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:07:16 [INFO] 原始日期文本：2024-11-28 08:48 (base_parser.py:169)
2024-11-29 14:07:16 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:07:16 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:07:16 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<blockquote>
<p>兴趣是最好的老师，<strong>HelloGitHub</strong> 让你对编程感兴趣！</p>
</blockquote>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png"/></p>
<h2 id="简介">简介</h2>
<p><strong>HelloGitHub</strong> 分享 GitHub 上有趣、入门级的开源项目。</p>
<blockquote>
<p><a href="https://github.com/521xueweihan/HelloGitHub" rel="noopener nofollow" target="_blank">github.com/521xueweihan/HelloGitHub</a></p>
</blockquote>
<p>这里有实战项目、入门教程、黑科技、开源书籍、大厂开源项目等，涵盖多种编程语言 Python、Java、Go、C/C++、Swift...让你在短时间内感受到开源的魅力，对编程产生兴趣！</p>
<hr/>
<blockquote>
<p>以下为本期内容｜每个月 <strong>28</strong> 号更新</p>
</blockquote>
<h3 id="c-项目">C 项目</h3>
<p>1、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hrvach/deskhop" rel="noopener nofollow" target="_blank">deskhop</a>：基于树莓派的双机鼠标键盘共享方案。这是一款用于快速切换鼠标和键盘的桌面切换工具，解决了用户在多台计算机之间共享键盘和鼠标时遇到的繁琐和延迟问题。它通过硬件中介设备，支持在不同操作系统（Linux、macOS、Windows）之间通过拖动鼠标或使用快捷键实现输入的无缝切换。该项目完全开源，且不需要安装额外的驱动。硬件则是基于 Raspberry Pi Pico 和 USB 输入/输出协议，支持自定义配置并提供多种附加功能，如慢速鼠标模式、屏幕锁定和游戏模式。来自 <a href="https://hellogithub.com/user/rnlYFdQcyhRm50p" rel="noopener nofollow" target="_blank">@无间之钟</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif"/></p>
<p>2、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/hengyoush/kyanos" rel="noopener nofollow" target="_blank">kyanos</a>：深入内核的网络流量分析工具。这是一个基于 eBPF 的网络问题分析工具，能够实时监控和分析 HTTP、Redis 和 MySQL 请求。它支持强大的流量过滤功能，可根据进程、容器、协议信息和耗时等条件进行精确过滤，并提供多维度聚合抓取的数据包信息，适用于排查远程服务慢查询等问题。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif"/></p>
<p>3、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jedisct1/minisign" rel="noopener nofollow" target="_blank">minisign</a>：简单易用的文件签名工具。这是一个开箱即用的文件数字签名与验证工具，只需要简单的命令即可生成和验证文件签名。它基于 Ed25519 公钥签名系统，提供可靠的文件完整性验证功能，适用于软件分发和文件共享等场景。</p>
<pre><code># 创建密钥
minisign -G
# 对文件进行签名
minisign -Sm HelloGitHub.txt
# 验证签名
$ minisign -Vm HelloGitHub.txt -P xxxx
</code></pre>
<h3 id="c-项目-1">C# 项目</h3>
<p>4、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BAndysc/AvaloniaVisualBasic6" rel="noopener nofollow" target="_blank">AvaloniaVisualBasic6</a>：经典的 VB6 IDE 跨平台重生计划。该项目使用 C# 语言和 Avalonia 框架复刻了经典的 Visual Basic 6 IDE，支持创建、保存、加载和运行 VB6 语言的项目，能够在 Windows、macOS、Linux 和浏览器中运行。来自 <a href="https://hellogithub.com/user/7eRBdwFSrtPxipV" rel="noopener nofollow" target="_blank">@39499740</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif"/></p>
<p>5、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Tichau/FileConverter" rel="noopener nofollow" target="_blank">FileConverter</a>：右键轻松转换和压缩文件的工具。这是一个专为 Windows 设计的文件转换和压缩工具，用户可以通过右键菜单轻松完成文件格式转换和压缩操作。它完全免费开源，支持多种文件格式、批量处理等功能，并提供包括中文在内的多语言支持。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif"/></p>
<h3 id="c-项目-2">C++ 项目</h3>
<p>6、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/carla-simulator/carla" rel="noopener nofollow" target="_blank">carla</a>：开源的自动驾驶研发模拟平台。这是一款用于自动驾驶研究的开源模拟器，专为自动驾驶系统的开发、训练和验证提供虚拟环境。它包含免费的数字资产库，包括城市布局、建筑和车辆模型等，支持灵活配置传感器套件和环境条件。还提供了容易上手的 Python API，方便开发者进行车辆控制、传感器配置和环境参数调整。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png"/></p>
<p>7、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/PrismLauncher/PrismLauncher" rel="noopener nofollow" target="_blank">PrismLauncher</a>：开源的 Minecraft 启动器。该项目是基于 MultiMC 开发的 Minecraft 启动器，旨在帮助用户轻松管理多个 Minecraft 版本和实例。它优化了启动器的使用体验，支持快速切换不同版本、模组配置和游戏设置，兼容 Windows、Linux 和 macOS 平台。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png"/></p>
<p>8、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zealdocs/zeal" rel="noopener nofollow" target="_blank">zeal</a>：实用的离线文档浏览工具。该项目是受 Dash 启发、专为开发者打造的离线文档查询工具，无需联网即可访问各种编程语言和框架的 API 文档。它提供简洁的界面和多种编辑器插件，并支持自定义文档的创建和导入，适合在没网的环境下查看技术文档。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png"/></p>
<h3 id="go-项目">Go 项目</h3>
<p>9、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/donknap/dpanel" rel="noopener nofollow" target="_blank">dpanel</a>：轻量级的 Docker 可视化管理面板。这是一款专为国内用户设计的 Docker 可视化管理面板，采用全中文界面。它安装简单且资源占用低，运行在容器内部对宿主机无侵入，支持容器管理、镜像管理、文件管理以及 Compose 管理等功能。来自 <a href="https://hellogithub.com/user/ekhLfDOxR5U0mVw" rel="noopener nofollow" target="_blank">@donknap</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png"/></p>
<p>10、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Melkeydev/go-blueprint" rel="noopener nofollow" target="_blank">go-blueprint</a>：快速生成 Go Web 项目结构的工具。这是一个用于快速搭建 Go 语言 Web 项目的命令行工具，集成了 Chi、Gin、Fiber、Echo 等多种流行的 Go 框架。它支持选择 MySQL、Postgres、Redis 等主流数据库，还提供了 WebSocket 和 Docker 等高级设置。用户只需选择技术栈，即可生成一套完整的 Go Web 项目架子。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png"/></p>
<p>11、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/88250/lute" rel="noopener nofollow" target="_blank">lute</a>：对中文更友好的 Markdown 引擎。这是一个用 Go 语言编写的 Markdown 引擎，实现了最新的 GFM/CM 规范。它是将 Markdown 文本转换成一个抽象语法树（AST），无需正则表达式解析速度更快，支持 GFM/CM 规范、内置代码高亮、术语修正、格式化（中英文间自动插入空格）和 Emoji 解析等功能。来自 <a href="https://hellogithub.com/user/5dGtvaZ6H3L4QMY" rel="noopener nofollow" target="_blank">@两双筷子sqldc</a> 的分享</p>
<pre><code class="language-go">func main() {
	luteEngine := lute.New() // 默认已经启用 GFM 支持以及中文语境优化
	html:= luteEngine.MarkdownStr("demo", "**Lute** - A structured markdown engine.")
	fmt.Println(html)
	// &lt;p&gt;&lt;strong&gt;Lute&lt;/strong&gt; - A structured Markdown engine.&lt;/p&gt;
}
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png"/></p>
<p>12、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/OliveTin/OliveTin" rel="noopener nofollow" target="_blank">OliveTin</a>：极简的 Shell 命令 Web 管理平台。该项目提供了一个简单直观的 Web 界面，让用户能够快速执行预先设定好的 Shell 命令。它开箱即用、配置简单、占用资源少，可以将复杂的命令简化成网页上的一个按钮。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png"/></p>
<p>13、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Flomp/wanderer" rel="noopener nofollow" target="_blank">wanderer</a>：开源的探险轨迹记录与分享平台。该项目是用于记录和管理用户的户外探险轨迹的 Web 平台，帮助你保存珍贵的行程数据。它采用 Go+Svelte 开发，提供上传、保存、查看（多种视图）和分享冒险轨迹的功能，并支持自托管。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png"/></p>
<h3 id="javascript-项目">JavaScript 项目</h3>
<p>14、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/remvze/moodist" rel="noopener nofollow" target="_blank">moodist</a>：免费、高颜值的白噪音网站。这是一个有助于专注与放松的听觉网站，无需注册完全免费。它界面简洁、操作方便，内置 75 种白噪音，用户可根据个人喜好自由选择与组合，找到适合自己的声音环境。同时，Moodist 还支持定时关闭、番茄时钟、快捷键等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png"/></p>
<p>15、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ondras/rot.js" rel="noopener nofollow" target="_blank">rot.js</a>：开发 Roguelike 游戏的 JavaScript 工具包。这是一个无依赖的 JavaScript 库，专为开发 Roguelike（肉鸽）游戏而设计，包含地图生成、随机数生成、路径寻找、按键处理和照明等多个模块。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png"/></p>
<p>16、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/simov/slugify" rel="noopener nofollow" target="_blank">slugify</a>：将字符串转化成 URL 友好的 JS 库。该项目是用于将字符串转换为适合在 URL 中使用的格式，输出由小写字母、数字和短横线组成的字符串，不含空格和特殊字符，这种格式有助于搜索引擎优化（SEO）。</p>
<pre><code class="language-javascript">var slugify = require('slugify')

slugify('some string') // some-string

// if you prefer something other than '-' as separator
slugify('some string', '_')  // some_string
</code></pre>
<p>17、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/withastro/starlight" rel="noopener nofollow" target="_blank">starlight</a>：基于 Astro 的一站式文档解决方案。该项目是基于 Astro 框架打造的文档主题，可用于快速搭建和部署文档网站。它界面美观、开箱即用、访问速度快，支持网站导航、搜索、国际化、SEO 和各种插件。来自 <a href="https://hellogithub.com/user/OJpriDKTWlq0ZHI" rel="noopener nofollow" target="_blank">@小小修真者</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png"/></p>
<p>18、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/didi/xiaoju-survey" rel="noopener nofollow" target="_blank">xiaoju-survey</a>：企业级的问卷调查平台。这是一款免费且专业的调研系统，旨在为个人和企业提供一站式产品级的调研解决方案。它前后端均已开源，并支持 Docker 一键部署，内置了多种题型和模版，支持逻辑编排、自定义品牌、权限管理、数据分析和导出等功能，可用于创建问卷、考试、测评和复杂表单。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png"/></p>
<h3 id="kotlin-项目">Kotlin 项目</h3>
<p>19、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/amir1376/ab-download-manager" rel="noopener nofollow" target="_blank">ab-download-manager</a>：Kotlin 开发的下载工具。这是一款开源的桌面下载工具，专为提供便捷快速的下载体验而设计。它拥有现代化的界面和更快的下载速度，支持下载队列、速度限制和浏览器插件功能，兼容 Windows 和 Linux 平台。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png"/></p>
<p>20、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tanujnotes/Olauncher" rel="noopener nofollow" target="_blank">Olauncher</a>：极简的 Android 启动器。这是一款免费、无广告的 Android 启动器，主屏幕上最多可设置 8 个应用，提供极简的 Android 使用体验，并支持手势、双击锁屏和每日壁纸等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png"/></p>
<h3 id="python-项目">Python 项目</h3>
<p>21、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/vietnh1009/ASCII-generator" rel="noopener nofollow" target="_blank">ASCII-generator</a>：生成文字图的 Python 库。该项目是一款将图片和视频转换为 ASCII 艺术风格作品的工具，即用字符艺术化地表达图像内容。它使用简单，支持将图片转换为文本或 ASCII 风格图片，以及将视频转换为 ASCII 风格视频，并提供颜色选择等多种功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg"/></p>
<p>22、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/icloud-photos-downloader/icloud_photos_downloader" rel="noopener nofollow" target="_blank">icloud_photos_downloader</a>：iCloud 照片下载工具。这是一款用 Python 开发的工具，可用于批量下载 iCloud 照片。它提供了复制、同步和移动三种操作模式，支持 Live Photos、自动删除重复数据、增量下载等功能，适合用于 iCloud 照片迁移和备份等场景。</p>
<p>23、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/JohannesBuchner/imagehash" rel="noopener nofollow" target="_blank">imagehash</a>：基于哈希值识别相似图像的 Python 库。该项目的算法不同于传统的加密哈希算法（如 MD5、SHA-1），它专注于图像内容的相似度分析，对有细微不同的图片可生成相似的哈希值，用于计算图片相似度，支持平均哈希、感知哈希、差分哈希等算法，适用于快速识别版权图片等场景。</p>
<pre><code class="language-python">from PIL import Image
import imagehash

# 计算第一个图像的哈希值
hash = imagehash.average_hash(Image.open('tests/data/imagehash.png'))
print(hash)
# 哈希值：ffd7918181c9ffff

# 计算第二个图像的哈希值
otherhash = imagehash.average_hash(Image.open('tests/data/peppers.png'))
print(otherhash)
# 哈希值：9f172786e71f1e00

# 比较两个图像哈希值是否相等
print(hash == otherhash)  # False

# 计算并输出哈希值的汉明距离
print(hash - otherhash)  # 33 汉明距离（差异度）
</code></pre>
<p>24、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/mopidy/mopidy" rel="noopener nofollow" target="_blank">mopidy</a>：Python 写的音乐服务器。这是一个易扩展的 Python 音乐服务器，支持扫描和播放本地音乐，并集成多个在线音乐流媒体，还可通过插件扩展音乐源、管理界面和在线播放器等功能。</p>
<p>25、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/dashingsoft/pyarmor" rel="noopener nofollow" target="_blank">pyarmor</a>：强大的 Python 脚本加密工具。这是一个用于对 Python 脚本进行混淆处理的命令行工具，仅需一条命令即可完成加密操作。它提供丰富的加密选项，用来平衡安全与性能，支持将加密后的脚本绑定到特定机器、设置加密有效期和 Themida 保护等功能。来自 <a href="https://hellogithub.com/user/k4oyT8wSU5Qfx6H" rel="noopener nofollow" target="_blank">@Xuefeng Xu</a> 的分享</p>
<h3 id="rust-项目">Rust 项目</h3>
<p>26、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/jtroo/kanata" rel="noopener nofollow" target="_blank">kanata</a>：跨平台的键盘重映射工具。这是一个用 Rust 语言开发的键盘重映射工具，用户可根据自身需求自定义键盘布局和功能，支持点击按住、组合键编程、设置按键响应速度，适用于 Windows、Linux 和 macOS 系统。</p>
<p>27、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/surrealdb/surrealdb" rel="noopener nofollow" target="_blank">surrealdb</a>：端到端的云原生数据库。这是一个用 Rust 开发的多模型数据库，支持表格（Table）、文档（Documents）和图（Graph）数据模型。它既可以作为数据库使用，也可作为 API 后端服务，支持 SQL、GraphQL、ACID 事务、图查询和全文索引等多种查询方式。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png"/></p>
<p>28、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/tauri-apps/tauri" rel="noopener nofollow" target="_blank">tauri</a>：Rust 驱动的跨平台桌面应用开发框架。这是一个用于构建更小、更快、更安全的桌面和移动应用的框架，支持 macOS、Windows、Linux、Android 和 iOS 平台。它允许使用前端框架构建用户界面，并内置应用打包器、系统托盘图标和原生通知等功能。来自 <a href="https://hellogithub.com/user/ZWJkOqsvYbPgD8p" rel="noopener nofollow" target="_blank">@DeShuiYu</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png"/></p>
<h3 id="swift-项目">Swift 项目</h3>
<p>29、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/zizicici/Off-Day" rel="noopener nofollow" target="_blank">Off-Day</a>：休息日闹钟不响的 iOS 应用。这是一个专为 iOS 用户开发的节假日闹钟应用，内置多个公共假期模板，用户可以轻松标记假期，实现自动管理工作日和假期的闹钟设置，确保休息日不再被闹钟打扰。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png"/></p>
<h3 id="人工智能">人工智能</h3>
<p>30、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/Acly/krita-ai-diffusion" rel="noopener nofollow" target="_blank">krita-ai-diffusion</a>：Krita 的 AI 绘画助手插件。这是一个专为 Krita 绘画软件开发的 AIGC 插件，旨在提供更便捷和可控的图像生成体验。用户只需选择区域并输入文本提示，即可轻松实现图像填充、扩展、放大、添加和删除对象等操作，支持本地运行、Stable Diffusion、ControlNet、IP-Adapter 和自定义检查点等功能。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png"/></p>
<p>31、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/lutzroeder/netron" rel="noopener nofollow" target="_blank">netron</a>：跨平台的机器学习模型查看工具。这是一个神经网络、深度学习和机器学习模型的可视化工具，支持多种模型格式，包括 ONNX、TensorFlow Lite、Core ML、Keras、Caffe、Darknet 和 PyTorch 等。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png"/></p>
<p>32、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/ItzCrazyKns/Perplexica" rel="noopener nofollow" target="_blank">Perplexica</a>：AI 驱动的搜索引擎工具。这是一个开源的 AI 搜索引擎工具，灵感来源于 Perplexity AI。它结合了 SearxNG 和大语言模型（LLMs）等技术，能够理解你的问题并深入互联网查找答案，可作为传统搜索引擎的替代品。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png"/></p>
<p>33、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/laugh12321/TensorRT-YOLO" rel="noopener nofollow" target="_blank">TensorRT-YOLO</a>：灵活易用的 YOLO 部署工具。这是一款专为 NVIDIA 设备优化的 YOLO 部署工具。它通过集成 TensorRT 插件和 CUDA 技术，提供 C++ 和 Python API，显著提升了推理速度和易用性，支持多种 YOLO 版本，适用于目标检测、实例分割、姿态识别、旋转目标检测和视频分析等多种场景。来自 <a href="https://hellogithub.com/user/2AGzE4dsO8ZUD9R" rel="noopener nofollow" target="_blank">@Laugh</a> 的分享</p>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels_with_colors, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels_with_colors("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif"/></p>
<h3 id="其它">其它</h3>
<p>34、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/BewlyBewly/BewlyBewly" rel="noopener nofollow" target="_blank">BewlyBewly</a>：优化 bilibili 网站界面的浏览器插件。这是一个第三方的 B 站浏览器插件，通过优化 bilibili 网站的界面来提升用户体验，支持 Chrome、Edge 和 Firefox 浏览器。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png"/></p>
<p>35、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/luckjiawei/frpc-desktop" rel="noopener nofollow" target="_blank">frpc-desktop</a>：跨平台的 frp 桌面客户端。该项目是内网穿透工具 frp 的桌面客户端，更方便地实现内网穿透。它开箱即用、界面清爽，支持开机启动、多用户、配置导入和导出等功能，适用于 Windows、Linux 和 macOS 平台。来自 <a href="https://hellogithub.com/user/fRmIN16g9jXtYFe" rel="noopener nofollow" target="_blank">@蠢🐷</a> 的分享</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png"/></p>
<p>36、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/thkruz/keeptrack.space" rel="noopener nofollow" target="_blank">keeptrack.space</a>：卫星数据 3D 可视化工具。这是一个为非专业人士开发的开源天体力学工具，支持查看卫星数据、模拟卫星发射和解体等功能，适合用于教育和科普等场景。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png"/></p>
<p>37、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/seemoo-lab/openhaystack" rel="noopener nofollow" target="_blank">openhaystack</a>：利用苹果网络实现物品追踪的框架。该项目是基于苹果的 Find My 网络，实现跨设备的定位与追踪。它通过将支持蓝牙的设备转化为类似 AirTag 的追踪器，轻松定位个人物品的位置，方便找回。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg"/></p>
<p>38、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/turingbirds/ping-clock" rel="noopener nofollow" target="_blank">ping-clock</a>：显示网络延迟的时钟。这是一个自制的时钟，用于显示 ping 指令的响应时间，整体造价约为 150 欧元。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif"/></p>
<p>39、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/KRTirtho/spotube" rel="noopener nofollow" target="_blank">spotube</a>：开源的 Spotify 客户端。该项目是基于 Flutter 开发的 Spotify 客户端，完全免费且无广告。它使用 Spotify、JioSaavn 和 YouTube 作为音乐源，用户无需登录即可自由下载音乐，支持桌面和移动设备。</p>
<p><img alt="" loading="lazy" src="https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png"/></p>
<h3 id="开源书籍">开源书籍</h3>
<p>40、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/pilcrowonpaper/copenhagen" rel="noopener nofollow" target="_blank">copenhagen</a>：《Web 应用认证实现指南》。这是一本介绍如何在 Web 应用中实现认证（auth）的书籍，内容涵盖设计认证流程、存储用户凭据、保护用户数据等方面的指导与建议。</p>
<p>41、<a href="https://hellogithub.com/periodical/statistics/click?target=https://github.com/codeguy/php-the-right-way" rel="noopener nofollow" target="_blank">php-the-right-way</a>：《PHP: The Right Way》。这是一本适合初学者进阶的 PHP 书籍，介绍了 PHP 的最佳实践和编码规范，已被翻译成包括中文在内的多国语言。</p>
<h2 id="最后">最后</h2>
<p>感谢参与分享开源项目的小伙伴们，欢迎更多的开源爱好者来 HelloGitHub 自荐/推荐开源项目。如果你发现了 GitHub 上有趣的项目，就<a href="https://hellogithub.com/periodical" rel="noopener nofollow" target="_blank">点击这里</a>分享给大家伙吧！</p>
<p>本期有你感兴趣的开源项目吗？如果有的话就留言告诉我吧～如果还没看过瘾，可以<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MzYyNzQ0MQ==&amp;action=getalbum&amp;album_id=1331197538447310849&amp;scene=173&amp;from_msgid=2247511076&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" target="_blank">点击阅读</a>往期内容。</p>
<p>感谢您的阅读，如果觉得本期内容还不错的话 <strong>求赞、求分享</strong> ❤️</p>
</div> (base_parser.py:366)
2024-11-29 14:07:16 [INFO] 作者：削微寒的程序员之路 (base_parser.py:367)
2024-11-29 14:07:16 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:07:16 [INFO] 标题：《HelloGitHub》第 104 期 (base_parser.py:369)
2024-11-29 14:07:16 [INFO] 保存文件夹：temp\-5922263527258294663\博客园-削微寒的程序员之路 (base_parser.py:256)
2024-11-29 14:07:19 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:07:19 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 14:07:19 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 14:07:19 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:07:19 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 14:07:19 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:07:19 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 14:07:19 [INFO] 保存目录: temp\-5922263527258294663\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:07:19 [INFO] HTML文件已保存: temp\-5922263527258294663\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 14:07:19 [INFO] 添加文件到文件列表：temp\-5922263527258294663\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 14:07:19 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (base_parser.py:233)
2024-11-29 14:07:19 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 14:07:19 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:07:19 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 14:07:19 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:07:19 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 14:07:19 [INFO] 保存目录: temp\-5922263527258294663\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:07:19 [INFO] Markdown文件已保存: temp\-5922263527258294663\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (save_utils.py:127)
2024-11-29 14:07:19 [INFO] 添加文件到文件列表：temp\-5922263527258294663\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md (base_parser.py:65)
2024-11-29 14:07:19 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.pdf (base_parser.py:233)
2024-11-29 14:07:19 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 14:07:19 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:07:19 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 14:07:19 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:07:19 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 14:07:19 [INFO] 保存目录: temp\-5922263527258294663\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 14:07:19 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 14:07:19 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 14:07:19 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:07:19 [INFO] 找到wkhtmltopdf: D:\code\Python\BlogKeeper\tools\wkhtmltopdf\bin\wkhtmltopdf.exe (save_utils.py:153)
2024-11-29 14:07:32 [ERROR] 保存PDF文件时出错: wkhtmltopdf reported an error:
Exit with code 1 due to network error: ProtocolUnknownError
 (save_utils.py:208)
2024-11-29 14:07:32 [INFO] 保存文件名：《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.mhtml (base_parser.py:233)
2024-11-29 14:07:32 [INFO] base_save_handle 处理图片https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:33)
2024-11-29 14:07:32 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:07:32 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:36)
2024-11-29 14:07:32 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:07:32 [INFO] 基础URL: https://www.cnblogs.com/xueweihan/p/18573326 (save_utils.py:383)
2024-11-29 14:07:32 [INFO] 保存目录: temp\-5922263527258294663\博客园-削微寒的程序员之路 (save_utils.py:384)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 9 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 10 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 11 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 12 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 13 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 14 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 15 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 16 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 17 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 18 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 19 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 20 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 21 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 22 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 23 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 24 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 25 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 26 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 27 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 28 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 29 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 30 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 31 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 32 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:422)
2024-11-29 14:07:32 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:409)
2024-11-29 14:07:32 [INFO] 处理第 33 个图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:422)
2024-11-29 14:07:32 [INFO] === 图片处理完成: 共处理 33 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:07:32 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224846650-277365647.png (save_utils.py:305)
2024-11-29 14:07:33 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631490-1469022793.gif (save_utils.py:305)
2024-11-29 14:07:34 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631401-851608181.gif (save_utils.py:305)
2024-11-29 14:07:34 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631735-256175834.gif (save_utils.py:305)
2024-11-29 14:07:35 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631414-1710360116.gif (save_utils.py:305)
2024-11-29 14:07:35 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631354-61066678.png (save_utils.py:305)
2024-11-29 14:07:36 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631663-1043751935.png (save_utils.py:305)
2024-11-29 14:07:36 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631590-2042540833.png (save_utils.py:305)
2024-11-29 14:07:37 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631739-920242971.png (save_utils.py:305)
2024-11-29 14:07:37 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631409-1886984647.png (save_utils.py:305)
2024-11-29 14:07:38 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631617-1687196493.png (save_utils.py:305)
2024-11-29 14:07:38 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631824-1425918663.png (save_utils.py:305)
2024-11-29 14:07:39 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631575-94446417.png (save_utils.py:305)
2024-11-29 14:07:39 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631357-391028418.png (save_utils.py:305)
2024-11-29 14:07:40 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631360-1032718440.png (save_utils.py:305)
2024-11-29 14:07:40 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631556-1770727174.png (save_utils.py:305)
2024-11-29 14:07:41 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631744-609162981.png (save_utils.py:305)
2024-11-29 14:07:41 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631720-226540988.png (save_utils.py:305)
2024-11-29 14:07:42 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631820-557460410.png (save_utils.py:305)
2024-11-29 14:07:43 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631916-739240263.jpg (save_utils.py:305)
2024-11-29 14:07:43 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631598-1804615991.png (save_utils.py:305)
2024-11-29 14:07:44 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631738-794453276.png (save_utils.py:305)
2024-11-29 14:07:44 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631581-1894834436.png (save_utils.py:305)
2024-11-29 14:07:45 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631716-1813488231.png (save_utils.py:305)
2024-11-29 14:07:45 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631629-1301859943.png (save_utils.py:305)
2024-11-29 14:07:46 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631721-305475829.png (save_utils.py:305)
2024-11-29 14:07:47 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631825-1336000506.gif (save_utils.py:305)
2024-11-29 14:07:48 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631830-1343306840.png (save_utils.py:305)
2024-11-29 14:07:48 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631064-2012290347.png (save_utils.py:305)
2024-11-29 14:07:49 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631745-964248252.png (save_utils.py:305)
2024-11-29 14:07:49 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631841-2045529043.jpg (save_utils.py:305)
2024-11-29 14:07:51 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224632103-1837850602.gif (save_utils.py:305)
2024-11-29 14:07:51 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/759200/202411/759200-20241127224631719-273605143.png (save_utils.py:305)
2024-11-29 14:07:51 [INFO] MHTML文件已保存: temp\-5922263527258294663\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.mhtml (save_utils.py:270)
2024-11-29 14:07:51 [INFO] 添加文件到文件列表：temp\-5922263527258294663\博客园-削微寒的程序员之路\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.mhtml (base_parser.py:65)
2024-11-29 14:07:51 [INFO] 原始文件列表: [{'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\-5922263527258294663\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'}, {'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\-5922263527258294663\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md', 'size': 24426, 'format': 'md'}, {'title': '《HelloGitHub》第 104 期', 'download_url': 'temp\\-5922263527258294663\\博客园-削微寒的程序员之路\\《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.mhtml', 'size': 22655803, 'format': 'mhtml'}] (api.py:70)
2024-11-29 14:07:51 [INFO] 请求的格式: {'html', 'mhtml', 'pdf', 'md'} (api.py:81)
2024-11-29 14:07:51 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': '/download/-5922263527258294663/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', 'size': 135353, 'format': 'html'} (api.py:89)
2024-11-29 14:07:51 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': '/download/-5922263527258294663/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md', 'size': 24426, 'format': 'md'} (api.py:89)
2024-11-29 14:07:51 [INFO] 处理后的文件信息: {'title': '《HelloGitHub》第 104 期', 'download_url': '/download/-5922263527258294663/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.mhtml', 'size': 22655803, 'format': 'mhtml'} (api.py:89)
2024-11-29 14:07:51 [INFO] 最终返回的文件列表: [FileInfo(title='《HelloGitHub》第 104 期', download_url='/download/-5922263527258294663/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.html', size=135353, format='html'), FileInfo(title='《HelloGitHub》第 104 期', download_url='/download/-5922263527258294663/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.md', size=24426, format='md'), FileInfo(title='《HelloGitHub》第 104 期', download_url='/download/-5922263527258294663/博客园-削微寒的程序员之路/《HelloGitHub》第 104 期-削微寒的程序员之路-博客园-2024-11-28.mhtml', size=22655803, format='mhtml')] (api.py:93)
2024-11-29 14:10:36 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:10:36 [INFO] 使用 微信公众号 解析器 (blog_parser.py:36)
2024-11-29 14:10:38 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'js_name'} (base_parser.py:91)
2024-11-29 14:10:38 [DEBUG] 尝试选择器: tag=em, attrs={'id': 'publish_time'} (base_parser.py:91)
2024-11-29 14:10:38 [INFO] 原始日期文本： (base_parser.py:169)
2024-11-29 14:10:38 [DEBUG] 尝试选择器: tag=h1, attrs={'id': 'activity-name'} (base_parser.py:91)
2024-11-29 14:10:38 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'js_content'} (base_parser.py:91)
2024-11-29 14:10:38 [DEBUG] 内容：<div class="rich_media_content js_underline_content autoTypeSetting24psection" id="js_content" style="visibility: hidden; opacity: 0; "><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去的十多年中，我曾使用并设计过各种类型的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。尽管它们各有特色，但总免不了一些使用上的不便之处。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我的第一次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">开发经历，可以追溯到十年前，那时我刚开始从事游戏开发，参与制作了一款</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">TPS</span></code><span leaf="">（第三人称射击）游戏。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时的服务器架构采用分布式设计，并结合多语言开发。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个分布式系统中，与玩家个人数据交互的进程被称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Info</span></code><span leaf="">进程，相关的功能由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Java</span></code><span leaf="">实现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Gateway</span></code><span leaf="">和核心玩法逻辑则由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">编写。两者之间的通信主要依赖于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的具体使用方式已经有些模糊，但我依然记得它的基本形式，大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class="code-snippet__js" data-lang="java"><code><span leaf=""><span class="code-snippet__keyword">void</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__title">CallRet</span><span class="code-snippet__params">(sockbuffer buf)</span><span class="code-snippet__plaintext"> </span></span></code><code><span leaf=""><span class="code-snippet__plaintext">{</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint32</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">ret</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadInt32()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint64</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">uid</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadUint64()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    ...</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">}</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">sockbuffer buf;</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt32(args1)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt8(args2)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">rpc::Call(buf.Bytes(), CallRet)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种早期的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计可以说是非常简陋，甚至有些“原始”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">它的序列化方式完全依赖手工编码（我印象最深的是经常需要和Java程序那边反复确认参数的大小和顺序是否一致）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">此外，回调函数的设计也相当局限，甚至不支持闭包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">消息机制是建立在普通的消息收发基础之上的。仅仅在消息协议中额外加了一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session</span></code><span leaf="">字段。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc::Call</span></code><span leaf="">时，系统会为该调用分配一个短期内不重复的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。分配的逻辑也很直接，只是用一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session_idx</span></code><span leaf="">变量自增而已，确保在5秒内不会重复。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然后将</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">和对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">放到一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">map</span></code><span leaf="">中去，之后就让出了所有</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CPU</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">被调用方</span></strong><span leaf="">响应时，它会将对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">字段一并返回。这样，</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">调用方</span></strong><span leaf="">就能通过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">找到对应的回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">并执行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了处理超时情况，调用方还实现了一个简单的定时器，每秒检查是否有超时的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">如果发现某个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">超时，就直接将其删除（这意味着超时的请求永远不会返回）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">虽然这种</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的使用方式有些简陋，但对于刚入行的我而言，它的思路却让我醍醐灌顶。并在后面近十年里一直影响着我。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf=""><br/></span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">后来，我也简单接触过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">但在实际使用中发现：它在发送请求协议后，会在当前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">socket</span></code><span leaf="">上</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">同步</span></strong><span leaf="">等待协议返回。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">对于一个典型的“单线程多进程”游戏服务器而言，这种设计会显著降低并发处理能力。因此，我没有进一步深入研究</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我开始参与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">游戏的开发。由于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">的战斗逻辑通常是由服务器自动完成的，而这些战斗计算往往在高峰期（如攻城战）时会占用大量资源，容易导致其他操作（例如武将培养、抽卡等）出现阻塞。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这一问题，我决定将大地图的核心玩法逻辑从主进程中剥离，独立到单独的进程中运行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">既然采用多进程来拆分业务逻辑，自然需要引入</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">来简化进程间通信，提升开发效率。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我结合之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">经验，开始探索实现一个便捷、高效的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我借鉴了之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">思路，最终设计出来的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="cpp"><code><span leaf=""><span class="code-snippet__function"><span class="code-snippet__type">uint32_t</span></span><span class="code-snippet__function"><span class="code-snippet__plaintext"> </span></span><span class="code-snippet__function"><span class="code-snippet__title">rpc_call</span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext">(zprotobuf::wirep &amp;req, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">void</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> (*cb)(MsgHeader *m, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">uint32_t</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> session))</span></span></span><span class="code-snippet__plaintext">;</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计中，我修改了超时功能：如果消息超过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">5</span></code><span leaf="">秒仍未返回，回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">cb</span></code><span leaf="">依然会被调用，但此时传递的参数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">m</span></code><span leaf="">会被置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">nullptr</span></code><span leaf="">，以便调用方可以处理超时后的撤销逻辑或补偿措施。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在从零开始设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的过程中，我遇到了一个以前被忽视的问题：如何有效区分双向通信中的请求与响应。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">具体来说，如果</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">两个进程只通过一条连接</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">通信，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">从</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">中读到的数据，到底是来自</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">的请求，还是对</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">先前请求的响应？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终我选择了一个看似简单的方案：让</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">之间各自建立一条独立的连接。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">也就是说，由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A Call B</span></code><span leaf="">，而由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B Call A</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个设计选择在后续引发了一个严重的问题：由于A和B的通信不再依赖同一条连接，因此消息的</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">FIFO（First In First Out）</span></strong><span leaf="">性质被破坏了。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在某些特殊场景下，客户端默认我们提供的消息顺序与服务器上的事件发生顺序一致，而这种假设在当前设计中可能被打破。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个问题非常隐蔽，尤其是在内网环境中。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">等到问题真正暴露时，项目已进入功能开发的后期阶段，箭在弦上，只能尝试绕过这个限制来规避问题。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">附带一提，这个大地图核心玩法的进程是用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">编写的，其</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块通过将通信逻辑封装在</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">coroutine</span></code><span leaf="">中实现了同步式调用。虽然实现形式与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">略有不同，但其基本机制是一致的，因此不再赘述。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我换了一份工作，开始使用Go语言开发游戏服务器。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时公司的服务器框架仍然延续了“单线程多进程”的设计理念，不过进程的概念被</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">所替代，主体业务逻辑依然运行在主</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">上。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这种架构下，分布式通信的实现方式也必须适配“单线程多进程”的运行模型，而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">的同步阻塞模式显然不适合这种设计。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，在开发跨服业务时，我们采用了纯粹的消息传递方式。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种方式虽然简单，但也有明显的缺点：A进程向B进程发送消息后，还需要专门为B返回的响应编写一个单独的处理函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种上下文的割裂会让代码变得不直观，特别是在需要两次甚至三次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Call</span></code><span leaf="">时，问题更加突出。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这个问题，我再次借鉴了之前</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">的设计思路，构建了一个适用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Go</span></code><span leaf="">语言环境的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。最终的接口设计大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="go"><code><span leaf=""><span class="code-snippet__plaintext">rpc.Call(req protobuf.Message, fn </span><span class="code-snippet__function"><span class="code-snippet__keyword">func</span></span><span class="code-snippet__function"><span class="code-snippet__params">(ack protobuf.Message)</span></span><span class="code-snippet__plaintext">)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块同样实现了超时逻辑：如果响应超过指定时间未返回，则会通过调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn(nil)</span></code><span leaf="">返回一个空值，以便调用方能够处理超时场景。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从表面上看，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">与我过去的实现没有太大差别。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，由于跨服通信与游戏服之间的链接机制是固定的（两个进程之间始终只有一条链接），我不得不解决一个问题：如何在同一条链接上区分请求包和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">实际上，即使链接机制允许修改，我也不太倾向于采用多链接方案。原因如前文所述，多链接容易导致消息顺序问题，特别是在对消息顺序有严格要求的场景下。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最初，我的想法是利用协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">来区分请求和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因为请求包和响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">一定是不同的，我只需要针对响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">做标记（打桩），然后将这些消息流转到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块进行处理即可。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">大致实现方式如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang=""><code><span leaf=""><span class="code-snippet__plaintext">router.register(xxx_cmd_id, rpc.dispatch)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种设计，当链接上接收到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">xxx_cmd_id</span></code><span leaf="">时，会自动调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">，从而识别对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">并触发相应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn</span></code><span leaf="">回调函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">事实上，这种方式让我用了相当长一段时间，它运行稳定，表现良好。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，随着跨服业务的复杂度不断提高，打桩函数的维护成本也在逐渐增加。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次新增或修改响应协议，都需要更新打桩逻辑，这让我不得不开始寻找新的请求与响应识别方案。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终，我发现协议数据中有一个未使用的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">位。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我决定将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">用于区分响应包和请求包：如果是响应包，就将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">；当接收数据包时，先检查这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">，如果为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">，则直接调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">处理响应，否则进入正常的消息处理流程。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个简单的改动彻底终结了“打桩时代”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">总的来看，这版</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的设计除了保留回调机制外，几乎解决了我在以往经历中遇到的所有痛点。（是的，从我用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">开始，我就不喜欢回调式的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">了，因为回调会传染）。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">由于这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是在跨服机制的上层构建的，因此它不再，也无法直接关注底层的链接状态。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">正因为如此，即便一个游戏服链接了几十个跨服进程，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的实例依然只有一个。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">相比之前的设计，这次的思路完全不同。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去，我通常会为每个链接绑定一个独立的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">对象，而这次“思维定式”的打破让我对基于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">机制的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">有了更为全局的认识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我开始反思：</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是否真的有必要关注链接？如果不再关心底层的链接状态，最终的设计会是什么样子？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我进行了几个月的探索与思考，最终找到了一种更抽象的设计思路。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在一个分布式的游戏服务器系统中，进程之间的操作必然会被隔离开，不可能直接操作同一份玩家或全服数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这一特性为我们提供了一个关键的设计契机：为每个进程分配一个唯一的标识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">假设这个标识称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">，我们可以基于此重新设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口，新的接口可能如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="bash"><code><span leaf=""><span class="code-snippet__built_in">local</span><span class="code-snippet__plaintext"> ack = rpc.call(workerid, req)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当我们选择忽略链接的存在后，分布式系统中的服务发现与连接建立也可以独立成为一个独立的模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">例如</span><span leaf="">我最近的实验项目</span><span leaf="">, 就使用了etcd来实现服务发现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种设计思路受到了一些边车模式（</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Sidecar Pattern</span></code><span leaf="">）的启发，通过抽象链接管理，将其从业务逻辑中剥离出来。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从业务角度来看，我们无需过于关注链接的瞬时断开与重建，因为这些事件并不会对分布式系统的一致性产生任何实际帮助。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">与我们的业务密切相关，因为它决定了每个进程将处理分布式系统中的哪部分数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">代表一个特定的进程，它负责处理特定范围内的任务或数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">不仅是进程的标识符，更是数据路由与处理的关键。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种方式，我们能够将分布式系统的资源划分与调度与业务需求紧密结合，而链接则可以忽视。</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div> (base_parser.py:366)
2024-11-29 14:10:38 [INFO] 作者：重归混沌 (base_parser.py:367)
2024-11-29 14:10:38 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 14:10:38 [INFO] 标题：谈谈游戏服务器中RPC模块的设计 (base_parser.py:369)
2024-11-29 14:10:38 [INFO] 保存文件夹：temp\4323646727084547199\微信公众号-重归混沌 (base_parser.py:256)
2024-11-29 14:10:41 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:10:41 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:233)
2024-11-29 14:10:41 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:10:41 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:10:41 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:10:41 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:10:41 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:383)
2024-11-29 14:10:41 [INFO] 保存目录: temp\4323646727084547199\微信公众号-重归混沌 (save_utils.py:384)
2024-11-29 14:10:41 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:10:41 [INFO] HTML文件已保存: temp\4323646727084547199\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (save_utils.py:91)
2024-11-29 14:10:41 [INFO] 添加文件到文件列表：temp\4323646727084547199\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:65)
2024-11-29 14:10:41 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:233)
2024-11-29 14:10:41 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:10:41 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:10:41 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:10:41 [INFO] === 开始处理文章中的图片 === (save_utils.py:382)
2024-11-29 14:10:41 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:383)
2024-11-29 14:10:41 [INFO] 保存目录: temp\4323646727084547199\微信公众号-重归混沌 (save_utils.py:384)
2024-11-29 14:10:41 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:453)
2024-11-29 14:10:41 [INFO] Markdown文件已保存: temp\4323646727084547199\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (save_utils.py:127)
2024-11-29 14:10:41 [INFO] 添加文件到文件列表：temp\4323646727084547199\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:65)
2024-11-29 14:10:41 [INFO] 原始文件列表: [{'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\4323646727084547199\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'}, {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\4323646727084547199\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'}] (api.py:70)
2024-11-29 14:10:41 [INFO] 请求的格式: {'html', 'md'} (api.py:81)
2024-11-29 14:10:41 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/4323646727084547199/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'} (api.py:89)
2024-11-29 14:10:41 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/4323646727084547199/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'} (api.py:89)
2024-11-29 14:10:41 [INFO] 最终返回的文件列表: [FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/4323646727084547199/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', size=2229479, format='html'), FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/4323646727084547199/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', size=10646, format='md')] (api.py:93)
2024-11-29 14:17:38 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:17:38 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:17:39 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:17:39 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:17:39 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:17:39 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:17:39 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:17:39 [INFO] 原始日期文本：2024-11-28 19:05 (base_parser.py:169)
2024-11-29 14:17:39 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:17:39 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:17:39 [DEBUG] 内容：<div class="blogpost-body blogpost-body-html" id="cnblogs_post_body">
<p><a href="https://www.cnblogs.com/bbqzsl/p/18423518" target="_blank">上一篇逆向WeChat(七)是逆向微信客户端本地数据库相关事宜。</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18459562" target="_blank">本篇逆向微信客户端本地日志<strong>xlog</strong>相关的事宜。</a></p>
<p>本篇在博客园地址<a class="ng-star-inserted" href="https://www.cnblogs.com/bbqzsl/p/18459562" rel="noopener" target="_blank">https://www.cnblogs.com/bbqzsl/p/18459562</a></p>
<p>现在开始本篇。</p>
<p>如果问AI, "微信xlog文件打开方法"。(提问AI的时间在较早的时候，下面的回答不代表最新的回答。）</p>
<p>百度AI:</p>
<p><img alt="" height="438" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png" width="444"/></p>
<p> Gemini:</p>
<p><img alt="" height="1156" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png" width="579"/></p>
<p> gpt3.5:</p>
<p><img alt="" height="602" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png" width="565"/></p>
<p>腾讯混元 g3.5</p>
<p><img alt="" height="513" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png" width="651"/></p>
<p> </p>
<p> 百度AI 跟 Gemini 出现幻觉一本正经，它们还好像停留在搜索引擎爬网页的阶段。哦，它们本业就是搜索引擎。它们被<a href="https://m.300.cn/itzspd/634130.html" rel="noopener nofollow" target="_blank">https://m.300.cn/itzspd/634130.html</a>这编2021-0523的旧POST污染了。这编POST也是一本正经说微信的xlog文件是语音聊天记录文件。腾讯混元也是一本正经胡说八道，它自家的东西还不比谁都清楚，也不抖一点出来。对比后，这就侧面证明了AI能有多聪明，视乎你都教了它些什么，或者让它学了什么。填鸭式的井蛙式的AI会更聪明。（题外一下，gpt也有掉链子的时候。我在写（五），（六）的时候，问gpt，“微信的WMPF使用chromium哪些代码编译”。gpt三申五令chromium是google浏览器开源项目，并且强调WMPF是微信团队独立研发的小程序框架，不是浏览器，两者独立毫无关系，小程序框架不存在使用chromium代码。我然后重复4次，”微信WMPF是不是使用了chromium代码“之类变换问法，gpt给我相同的回答三申五令并且强调微信团队独立研发，最后还发起脾气罢答。那时候openai的确公告过出现罢答的bug。我最后问”我逆向过WMPF，它的确使用了chrominum代码编译“。gpt才变了回答，微信的WMPF可能使用了chrominum某些技术，纵然这样WMPF也是微信团队独立研发的。我去，它是你Ex吗？）。</p>
<p>百度AI更多地爬特定地区的新网页，爬到了有人发现mars的github有一未合并的分支，有人上传了decode_mars_nocrpyt_log_file.py等解码代码这一消息。但它并不知道xlog是加密的。Gemini爬不到这特定地区的网页，漏过了这一消息。只有gpt最不靠谱。</p>
<p>gpt还提出了两点建议，逆向破解加密跟找明文输出。我是一翻逆向分析验证后，做好了演示材料，定了稿的大纲，才问AI，没想到gpt将我做的都说了。</p>
<p> </p>
<p><strong>本篇主要内容</strong>就是<strong>逆向破解加密</strong>跟<strong>找明文输出</strong>。</p>
<p>首先来看<strong>逆向破解加密。</strong></p>
<p>对于第一点，也不浪费大家时间，这是基本不可能的。xlog使用Elliptic Curve Cryptography进行加密。gen_key(srv_pub, client_priv) == gen_key(client_pub, srv_priv)。每次xlog初始化，会随机生成client_pub跟client_priv，在gen_key(srv_pub, client_priv)产生密钥后，丢弃client_priv。这样每次启动微信，日志的密钥都不相同。每段加密内容都会附加上client_pub，只有用srv_priv才能产生出正确的密钥。除非你能够将每次丢弃的client_priv跟client_pub一同保存起来。通过加密段内容的附带的client_pub，找回client_priv，并使用srv_pub就可以产生密钥了。</p>
<p>下图演示，使用wechatwin.dll!xlog方法uECC_make_key()生成两组ECC密钥对。uECC_shared_secret()分别对交换公钥后密钥pair，生成出相同的加密密钥ECDH_KEY。</p>
<p><img alt="" height="695" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png" width="544"/></p>
<p>正因为这样，微信开发团队才可以无忌惮地大写特写日志，简直如同写调试信息一样，方便它们搞调试，搞不好你的一天的日志文件就会有几百个M。微信还有setDebugHost功能，还有调试服务器。猜想一下，服务器需要向客户端进行命令交互，这是十分简单的事，比如列出日志，上传日志。日志基本上只能它们用srv_priv进行查看。日志里几乎都是流水帐的调试信息。不单是错误调试。</p>
<p>（再题外一下，微信在后台耗资源。主程序是可以通过主界面设置停止更新，但是其它子服务就不适用这个设置。WMPF是作为子服务的，我们无法阻止它在后台下载更新。现在的WMPF有500MB，而且更新得贼频繁。并且下载后，它会使得主程序突然耗尽你所有的CPU，强迫你重新启动微信让它可以顺利加载最新的WMPF。如果不想重开，删除它最新下载解压后的WMPF，主程序会停止耗CPU。但是它依然会锲而不舍在后台偷偷下载。 我原本借用手机电话卡的流量，查一查网页，挂一下微信。没想到一个下午跟夜晚，手机突然欠费停机。后来一查，我的套餐流量被全部耗尽还刷套餐外流量刷了三十块。套餐外流量1MB-0.3元。我才想起，我删了几次它反复下载的WMPF，流量被它狂耗。要不是我的话费不多，还要冤。可能这三十块，对于大厂里人均几十k（加上年终各种福利随便就double,triple）的大卡大佬大神仙人们来说，连一个工作午餐的最低餐费标准都算不上，可能还不及下班后打个车的车费，或者是买个Figure漂洋过海的运费的零头都不够。又怎么会顾及我们这些尘世间的小虾蟹囊中羞涩戳襟见肘的艰辛。你们不为用户考虑节省流量就算了，还阴阴湿湿在后台开水喉一样耗流量，pukgaai。）</p>
<p>回到正题，正因为它们可以无后顾之忧地写日志，我们逆向时才能够获得这么多参考信息，虽然有点矛盾，但还是要多谢这些海量日志信息。</p>
<p>即使mars的github仓库有分支提供了解码工具的代码，但是没有微信在服务端的私有密钥，你能够将其它人的日志解码出来吗？我水平有限常识浅疏，认为基本是不可能，不排除有泰斗可以做到。对于自己用的话，那是办法不只一个。除了我在上面说的，将客户端的随机私钥统统保存这个方法外，还可以伪造公钥patch掉微信程序里的公钥，这样就可用自己的伪造私钥来解码日志了。</p>
<p>patch方式有两种，一种只要用hex编辑器即可以，将wechatwin.dll的'1dac3876bd566b60c7dcbffd219ca6af2d2c07f045711bf2a6d111a2b1fc27c4d'开头的64字节替换成你伪造的ECC公开密钥。另一种就是在运行时，修改对应的动态内存，因为公开密钥已经加载到xlog对象的成员了。对于动态改内存，方法很多，最简单就是用windbg了。s-a命令搜索，ea命令修改。</p>
<p>换句话说，只要包含有这个公开密钥的模块都会有自己的一个xlogger。这些模块分别有wechatwin.dll，wmpf_host_export.dll，AppEx。它们对应的日志文件名分别以下列前缀开后，MM_, host_, main_。日志文件全部都在AppData/Roaming/Tencent/WeChat/log目录。</p>
<p> </p>
<p>然后来看<strong>找明文输出</strong>。</p>
<p>我们的切入点是appender，有一个关键的函数指针__xlogger_Write_impl。简介如下，详细去github看代码。</p>
<p><img alt="" height="384" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png" width="805"/></p>
<p>xlog的接口XLog设计在mars/comm/xlogger。它的实现XLoggerAppender在mars/xlog。</p>
<p>XLog设计跟Chrome::base::LogMessage相似，是对logging行为的封装。初始化，设置本条日志的说明信息，包括源代码文件名，行号，日志对象。流串输入操作符&lt;&lt;添加日志内容。析构函数结束本条日志，并且提交到XLoggerAppender。</p>
<p>XLoggerAppender相当于日志设备的实现，负责将XLog提交的日志写到存储设备上，过程包含加密。</p>
<p>所有WeChat模块都使用mars::xlog作为日志系统，但每个EXE都将它自身的appender设置给所有模块的mars::xlog。这样每个模块都统一使用EXE的appender作为日志系统。具体方式就是将其它模块的appender的__xlogger_Write_impl指向同一个appender的__xlogger_Write_impl。没错，这个函数就是我们可以要找的枢纽点，所有明文日志的入口点。要注意的是，wechatwin.dll生成的日志以MMPC_开头，它们是以utf8作为编码的。而其它的却是用gbk进行编码的。</p>
<p>小程序平台WeChatAppEx同时使用xlog进行日志处理，它是将mars/xlog封装成一个服务xlogger.mojom.XLogger，并且将chrome的日志系统指向这个日志服务。</p>
<p> </p>
<p>由于日志会泄漏个资，所以只能给一些无关重要的日志作为演示。</p>
<p><img alt="" height="698" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif" width="582"/></p>
<p> </p>
<p>本篇到这里，下一篇再见。</p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18459562" target="_blank">逆向WeChat(八，日志XLog）</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18423518" target="_blank">逆向WeChat(七，查找sqlcipher的DBKey，查看protobuf文件）</a></p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18370679" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(六，通过嗅探mojo抓包小程序https，打开小程序devtool)</a></p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18216717" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(五，mmmojo, wmpfmojo)</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18252961" target="_blank">逆向通达信 x 逆向微信 x 逆向Qt (趣味逆向，你未曾见过的signal-slot用法)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18209439" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(四，mars, 网络模块)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18198572" id="cb_post_title_url" title="发布于 2024-05-23 21:48">逆向WeChat(三, EventCenter, 所有功能模块的事件中心)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18187099" id="cb_post_title_url" title="发布于 2024-05-17 20:12">逆向WeChat (二, WeUIEngine, UI引擎)</a></p>
<p class="postTitle"><a href="https://www.cnblogs.com/bbqzsl/p/18171552" target="_blank">逆向wechat(一, 计划热身)</a></p>
<p> </p>
</div> (base_parser.py:366)
2024-11-29 14:17:39 [INFO] 作者：bbqz007 (base_parser.py:367)
2024-11-29 14:17:39 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:17:39 [INFO] 标题：逆向WeChat(八) (base_parser.py:369)
2024-11-29 14:17:39 [INFO] 保存文件夹：temp\-4925443789332236050\博客园-bbqz007 (base_parser.py:256)
2024-11-29 14:17:41 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:17:41 [INFO] 保存文件名：逆向WeChat(八)-bbqz007-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 14:17:41 [INFO] base_save_handle 处理图片https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:33)
2024-11-29 14:17:41 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:17:41 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:36)
2024-11-29 14:17:41 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:17:41 [INFO] 基础URL: https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:378)
2024-11-29 14:17:41 [INFO] 保存目录: temp\-4925443789332236050\博客园-bbqz007 (save_utils.py:379)
2024-11-29 14:17:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png (save_utils.py:404)
2024-11-29 14:17:41 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png (save_utils.py:417)
2024-11-29 14:17:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png (save_utils.py:404)
2024-11-29 14:17:41 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png (save_utils.py:417)
2024-11-29 14:17:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png (save_utils.py:404)
2024-11-29 14:17:41 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png (save_utils.py:417)
2024-11-29 14:17:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png (save_utils.py:404)
2024-11-29 14:17:41 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png (save_utils.py:417)
2024-11-29 14:17:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png (save_utils.py:404)
2024-11-29 14:17:41 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png (save_utils.py:417)
2024-11-29 14:17:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png (save_utils.py:404)
2024-11-29 14:17:41 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png (save_utils.py:417)
2024-11-29 14:17:41 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif (save_utils.py:404)
2024-11-29 14:17:41 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif (save_utils.py:417)
2024-11-29 14:17:41 [INFO] === 图片处理完成: 共处理 7 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:17:41 [INFO] HTML文件已保存: temp\-4925443789332236050\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 14:17:41 [INFO] 添加文件到文件列表：temp\-4925443789332236050\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 14:17:41 [INFO] 原始文件列表: [{'title': '逆向WeChat(八)', 'download_url': 'temp\\-4925443789332236050\\博客园-bbqz007\\逆向WeChat(八)-bbqz007-博客园-2024-11-28.html', 'size': 111793, 'format': 'html'}] (api.py:70)
2024-11-29 14:17:41 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 14:17:41 [INFO] 处理后的文件信息: {'title': '逆向WeChat(八)', 'download_url': '/download/-4925443789332236050/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.html', 'size': 111793, 'format': 'html'} (api.py:89)
2024-11-29 14:17:41 [INFO] 最终返回的文件列表: [FileInfo(title='逆向WeChat(八)', download_url='/download/-4925443789332236050/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.html', size=111793, format='html')] (api.py:93)
2024-11-29 14:17:58 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:17:58 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:17:59 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:17:59 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:17:59 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:17:59 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:17:59 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:17:59 [INFO] 原始日期文本：2024-11-28 19:05 (base_parser.py:169)
2024-11-29 14:17:59 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:17:59 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:17:59 [DEBUG] 内容：<div class="blogpost-body blogpost-body-html" id="cnblogs_post_body">
<p><a href="https://www.cnblogs.com/bbqzsl/p/18423518" target="_blank">上一篇逆向WeChat(七)是逆向微信客户端本地数据库相关事宜。</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18459562" target="_blank">本篇逆向微信客户端本地日志<strong>xlog</strong>相关的事宜。</a></p>
<p>本篇在博客园地址<a class="ng-star-inserted" href="https://www.cnblogs.com/bbqzsl/p/18459562" rel="noopener" target="_blank">https://www.cnblogs.com/bbqzsl/p/18459562</a></p>
<p>现在开始本篇。</p>
<p>如果问AI, "微信xlog文件打开方法"。(提问AI的时间在较早的时候，下面的回答不代表最新的回答。）</p>
<p>百度AI:</p>
<p><img alt="" height="438" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png" width="444"/></p>
<p> Gemini:</p>
<p><img alt="" height="1156" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png" width="579"/></p>
<p> gpt3.5:</p>
<p><img alt="" height="602" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png" width="565"/></p>
<p>腾讯混元 g3.5</p>
<p><img alt="" height="513" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png" width="651"/></p>
<p> </p>
<p> 百度AI 跟 Gemini 出现幻觉一本正经，它们还好像停留在搜索引擎爬网页的阶段。哦，它们本业就是搜索引擎。它们被<a href="https://m.300.cn/itzspd/634130.html" rel="noopener nofollow" target="_blank">https://m.300.cn/itzspd/634130.html</a>这编2021-0523的旧POST污染了。这编POST也是一本正经说微信的xlog文件是语音聊天记录文件。腾讯混元也是一本正经胡说八道，它自家的东西还不比谁都清楚，也不抖一点出来。对比后，这就侧面证明了AI能有多聪明，视乎你都教了它些什么，或者让它学了什么。填鸭式的井蛙式的AI会更聪明。（题外一下，gpt也有掉链子的时候。我在写（五），（六）的时候，问gpt，“微信的WMPF使用chromium哪些代码编译”。gpt三申五令chromium是google浏览器开源项目，并且强调WMPF是微信团队独立研发的小程序框架，不是浏览器，两者独立毫无关系，小程序框架不存在使用chromium代码。我然后重复4次，”微信WMPF是不是使用了chromium代码“之类变换问法，gpt给我相同的回答三申五令并且强调微信团队独立研发，最后还发起脾气罢答。那时候openai的确公告过出现罢答的bug。我最后问”我逆向过WMPF，它的确使用了chrominum代码编译“。gpt才变了回答，微信的WMPF可能使用了chrominum某些技术，纵然这样WMPF也是微信团队独立研发的。我去，它是你Ex吗？）。</p>
<p>百度AI更多地爬特定地区的新网页，爬到了有人发现mars的github有一未合并的分支，有人上传了decode_mars_nocrpyt_log_file.py等解码代码这一消息。但它并不知道xlog是加密的。Gemini爬不到这特定地区的网页，漏过了这一消息。只有gpt最不靠谱。</p>
<p>gpt还提出了两点建议，逆向破解加密跟找明文输出。我是一翻逆向分析验证后，做好了演示材料，定了稿的大纲，才问AI，没想到gpt将我做的都说了。</p>
<p> </p>
<p><strong>本篇主要内容</strong>就是<strong>逆向破解加密</strong>跟<strong>找明文输出</strong>。</p>
<p>首先来看<strong>逆向破解加密。</strong></p>
<p>对于第一点，也不浪费大家时间，这是基本不可能的。xlog使用Elliptic Curve Cryptography进行加密。gen_key(srv_pub, client_priv) == gen_key(client_pub, srv_priv)。每次xlog初始化，会随机生成client_pub跟client_priv，在gen_key(srv_pub, client_priv)产生密钥后，丢弃client_priv。这样每次启动微信，日志的密钥都不相同。每段加密内容都会附加上client_pub，只有用srv_priv才能产生出正确的密钥。除非你能够将每次丢弃的client_priv跟client_pub一同保存起来。通过加密段内容的附带的client_pub，找回client_priv，并使用srv_pub就可以产生密钥了。</p>
<p>下图演示，使用wechatwin.dll!xlog方法uECC_make_key()生成两组ECC密钥对。uECC_shared_secret()分别对交换公钥后密钥pair，生成出相同的加密密钥ECDH_KEY。</p>
<p><img alt="" height="695" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png" width="544"/></p>
<p>正因为这样，微信开发团队才可以无忌惮地大写特写日志，简直如同写调试信息一样，方便它们搞调试，搞不好你的一天的日志文件就会有几百个M。微信还有setDebugHost功能，还有调试服务器。猜想一下，服务器需要向客户端进行命令交互，这是十分简单的事，比如列出日志，上传日志。日志基本上只能它们用srv_priv进行查看。日志里几乎都是流水帐的调试信息。不单是错误调试。</p>
<p>（再题外一下，微信在后台耗资源。主程序是可以通过主界面设置停止更新，但是其它子服务就不适用这个设置。WMPF是作为子服务的，我们无法阻止它在后台下载更新。现在的WMPF有500MB，而且更新得贼频繁。并且下载后，它会使得主程序突然耗尽你所有的CPU，强迫你重新启动微信让它可以顺利加载最新的WMPF。如果不想重开，删除它最新下载解压后的WMPF，主程序会停止耗CPU。但是它依然会锲而不舍在后台偷偷下载。 我原本借用手机电话卡的流量，查一查网页，挂一下微信。没想到一个下午跟夜晚，手机突然欠费停机。后来一查，我的套餐流量被全部耗尽还刷套餐外流量刷了三十块。套餐外流量1MB-0.3元。我才想起，我删了几次它反复下载的WMPF，流量被它狂耗。要不是我的话费不多，还要冤。可能这三十块，对于大厂里人均几十k（加上年终各种福利随便就double,triple）的大卡大佬大神仙人们来说，连一个工作午餐的最低餐费标准都算不上，可能还不及下班后打个车的车费，或者是买个Figure漂洋过海的运费的零头都不够。又怎么会顾及我们这些尘世间的小虾蟹囊中羞涩戳襟见肘的艰辛。你们不为用户考虑节省流量就算了，还阴阴湿湿在后台开水喉一样耗流量，pukgaai。）</p>
<p>回到正题，正因为它们可以无后顾之忧地写日志，我们逆向时才能够获得这么多参考信息，虽然有点矛盾，但还是要多谢这些海量日志信息。</p>
<p>即使mars的github仓库有分支提供了解码工具的代码，但是没有微信在服务端的私有密钥，你能够将其它人的日志解码出来吗？我水平有限常识浅疏，认为基本是不可能，不排除有泰斗可以做到。对于自己用的话，那是办法不只一个。除了我在上面说的，将客户端的随机私钥统统保存这个方法外，还可以伪造公钥patch掉微信程序里的公钥，这样就可用自己的伪造私钥来解码日志了。</p>
<p>patch方式有两种，一种只要用hex编辑器即可以，将wechatwin.dll的'1dac3876bd566b60c7dcbffd219ca6af2d2c07f045711bf2a6d111a2b1fc27c4d'开头的64字节替换成你伪造的ECC公开密钥。另一种就是在运行时，修改对应的动态内存，因为公开密钥已经加载到xlog对象的成员了。对于动态改内存，方法很多，最简单就是用windbg了。s-a命令搜索，ea命令修改。</p>
<p>换句话说，只要包含有这个公开密钥的模块都会有自己的一个xlogger。这些模块分别有wechatwin.dll，wmpf_host_export.dll，AppEx。它们对应的日志文件名分别以下列前缀开后，MM_, host_, main_。日志文件全部都在AppData/Roaming/Tencent/WeChat/log目录。</p>
<p> </p>
<p>然后来看<strong>找明文输出</strong>。</p>
<p>我们的切入点是appender，有一个关键的函数指针__xlogger_Write_impl。简介如下，详细去github看代码。</p>
<p><img alt="" height="384" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png" width="805"/></p>
<p>xlog的接口XLog设计在mars/comm/xlogger。它的实现XLoggerAppender在mars/xlog。</p>
<p>XLog设计跟Chrome::base::LogMessage相似，是对logging行为的封装。初始化，设置本条日志的说明信息，包括源代码文件名，行号，日志对象。流串输入操作符&lt;&lt;添加日志内容。析构函数结束本条日志，并且提交到XLoggerAppender。</p>
<p>XLoggerAppender相当于日志设备的实现，负责将XLog提交的日志写到存储设备上，过程包含加密。</p>
<p>所有WeChat模块都使用mars::xlog作为日志系统，但每个EXE都将它自身的appender设置给所有模块的mars::xlog。这样每个模块都统一使用EXE的appender作为日志系统。具体方式就是将其它模块的appender的__xlogger_Write_impl指向同一个appender的__xlogger_Write_impl。没错，这个函数就是我们可以要找的枢纽点，所有明文日志的入口点。要注意的是，wechatwin.dll生成的日志以MMPC_开头，它们是以utf8作为编码的。而其它的却是用gbk进行编码的。</p>
<p>小程序平台WeChatAppEx同时使用xlog进行日志处理，它是将mars/xlog封装成一个服务xlogger.mojom.XLogger，并且将chrome的日志系统指向这个日志服务。</p>
<p> </p>
<p>由于日志会泄漏个资，所以只能给一些无关重要的日志作为演示。</p>
<p><img alt="" height="698" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif" width="582"/></p>
<p> </p>
<p>本篇到这里，下一篇再见。</p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18459562" target="_blank">逆向WeChat(八，日志XLog）</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18423518" target="_blank">逆向WeChat(七，查找sqlcipher的DBKey，查看protobuf文件）</a></p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18370679" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(六，通过嗅探mojo抓包小程序https，打开小程序devtool)</a></p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18216717" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(五，mmmojo, wmpfmojo)</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18252961" target="_blank">逆向通达信 x 逆向微信 x 逆向Qt (趣味逆向，你未曾见过的signal-slot用法)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18209439" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(四，mars, 网络模块)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18198572" id="cb_post_title_url" title="发布于 2024-05-23 21:48">逆向WeChat(三, EventCenter, 所有功能模块的事件中心)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18187099" id="cb_post_title_url" title="发布于 2024-05-17 20:12">逆向WeChat (二, WeUIEngine, UI引擎)</a></p>
<p class="postTitle"><a href="https://www.cnblogs.com/bbqzsl/p/18171552" target="_blank">逆向wechat(一, 计划热身)</a></p>
<p> </p>
</div> (base_parser.py:366)
2024-11-29 14:17:59 [INFO] 作者：bbqz007 (base_parser.py:367)
2024-11-29 14:17:59 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:17:59 [INFO] 标题：逆向WeChat(八) (base_parser.py:369)
2024-11-29 14:17:59 [INFO] 保存文件夹：temp\-4925443789332236050\博客园-bbqz007 (base_parser.py:256)
2024-11-29 14:18:01 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:18:01 [INFO] 保存文件名：逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf (base_parser.py:233)
2024-11-29 14:18:01 [INFO] 找到wkhtmltopdf: D:\code\Python\BlogKeeper\tools\wkhtmltopdf\bin\wkhtmltopdf.exe (save_utils.py:153)
2024-11-29 14:18:02 [INFO] 添加文件到文件列表：temp\-4925443789332236050\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf (base_parser.py:65)
2024-11-29 14:18:02 [INFO] 原始文件列表: [{'title': '逆向WeChat(八)', 'download_url': 'temp\\-4925443789332236050\\博客园-bbqz007\\逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf', 'size': 170417, 'format': 'pdf'}] (api.py:70)
2024-11-29 14:18:02 [INFO] 请求的格式: {'pdf'} (api.py:81)
2024-11-29 14:18:02 [INFO] 处理后的文件信息: {'title': '逆向WeChat(八)', 'download_url': '/download/-4925443789332236050/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf', 'size': 170417, 'format': 'pdf'} (api.py:89)
2024-11-29 14:18:02 [INFO] 最终返回的文件列表: [FileInfo(title='逆向WeChat(八)', download_url='/download/-4925443789332236050/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf', size=170417, format='pdf')] (api.py:93)
2024-11-29 14:19:30 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:19:30 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:19:30 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:19:30 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:19:30 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:19:30 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:19:30 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:19:30 [INFO] 原始日期文本：2024-11-28 19:05 (base_parser.py:169)
2024-11-29 14:19:30 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:19:30 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:19:30 [DEBUG] 内容：<div class="blogpost-body blogpost-body-html" id="cnblogs_post_body">
<p><a href="https://www.cnblogs.com/bbqzsl/p/18423518" target="_blank">上一篇逆向WeChat(七)是逆向微信客户端本地数据库相关事宜。</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18459562" target="_blank">本篇逆向微信客户端本地日志<strong>xlog</strong>相关的事宜。</a></p>
<p>本篇在博客园地址<a class="ng-star-inserted" href="https://www.cnblogs.com/bbqzsl/p/18459562" rel="noopener" target="_blank">https://www.cnblogs.com/bbqzsl/p/18459562</a></p>
<p>现在开始本篇。</p>
<p>如果问AI, "微信xlog文件打开方法"。(提问AI的时间在较早的时候，下面的回答不代表最新的回答。）</p>
<p>百度AI:</p>
<p><img alt="" height="438" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png" width="444"/></p>
<p> Gemini:</p>
<p><img alt="" height="1156" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png" width="579"/></p>
<p> gpt3.5:</p>
<p><img alt="" height="602" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png" width="565"/></p>
<p>腾讯混元 g3.5</p>
<p><img alt="" height="513" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png" width="651"/></p>
<p> </p>
<p> 百度AI 跟 Gemini 出现幻觉一本正经，它们还好像停留在搜索引擎爬网页的阶段。哦，它们本业就是搜索引擎。它们被<a href="https://m.300.cn/itzspd/634130.html" rel="noopener nofollow" target="_blank">https://m.300.cn/itzspd/634130.html</a>这编2021-0523的旧POST污染了。这编POST也是一本正经说微信的xlog文件是语音聊天记录文件。腾讯混元也是一本正经胡说八道，它自家的东西还不比谁都清楚，也不抖一点出来。对比后，这就侧面证明了AI能有多聪明，视乎你都教了它些什么，或者让它学了什么。填鸭式的井蛙式的AI会更聪明。（题外一下，gpt也有掉链子的时候。我在写（五），（六）的时候，问gpt，“微信的WMPF使用chromium哪些代码编译”。gpt三申五令chromium是google浏览器开源项目，并且强调WMPF是微信团队独立研发的小程序框架，不是浏览器，两者独立毫无关系，小程序框架不存在使用chromium代码。我然后重复4次，”微信WMPF是不是使用了chromium代码“之类变换问法，gpt给我相同的回答三申五令并且强调微信团队独立研发，最后还发起脾气罢答。那时候openai的确公告过出现罢答的bug。我最后问”我逆向过WMPF，它的确使用了chrominum代码编译“。gpt才变了回答，微信的WMPF可能使用了chrominum某些技术，纵然这样WMPF也是微信团队独立研发的。我去，它是你Ex吗？）。</p>
<p>百度AI更多地爬特定地区的新网页，爬到了有人发现mars的github有一未合并的分支，有人上传了decode_mars_nocrpyt_log_file.py等解码代码这一消息。但它并不知道xlog是加密的。Gemini爬不到这特定地区的网页，漏过了这一消息。只有gpt最不靠谱。</p>
<p>gpt还提出了两点建议，逆向破解加密跟找明文输出。我是一翻逆向分析验证后，做好了演示材料，定了稿的大纲，才问AI，没想到gpt将我做的都说了。</p>
<p> </p>
<p><strong>本篇主要内容</strong>就是<strong>逆向破解加密</strong>跟<strong>找明文输出</strong>。</p>
<p>首先来看<strong>逆向破解加密。</strong></p>
<p>对于第一点，也不浪费大家时间，这是基本不可能的。xlog使用Elliptic Curve Cryptography进行加密。gen_key(srv_pub, client_priv) == gen_key(client_pub, srv_priv)。每次xlog初始化，会随机生成client_pub跟client_priv，在gen_key(srv_pub, client_priv)产生密钥后，丢弃client_priv。这样每次启动微信，日志的密钥都不相同。每段加密内容都会附加上client_pub，只有用srv_priv才能产生出正确的密钥。除非你能够将每次丢弃的client_priv跟client_pub一同保存起来。通过加密段内容的附带的client_pub，找回client_priv，并使用srv_pub就可以产生密钥了。</p>
<p>下图演示，使用wechatwin.dll!xlog方法uECC_make_key()生成两组ECC密钥对。uECC_shared_secret()分别对交换公钥后密钥pair，生成出相同的加密密钥ECDH_KEY。</p>
<p><img alt="" height="695" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png" width="544"/></p>
<p>正因为这样，微信开发团队才可以无忌惮地大写特写日志，简直如同写调试信息一样，方便它们搞调试，搞不好你的一天的日志文件就会有几百个M。微信还有setDebugHost功能，还有调试服务器。猜想一下，服务器需要向客户端进行命令交互，这是十分简单的事，比如列出日志，上传日志。日志基本上只能它们用srv_priv进行查看。日志里几乎都是流水帐的调试信息。不单是错误调试。</p>
<p>（再题外一下，微信在后台耗资源。主程序是可以通过主界面设置停止更新，但是其它子服务就不适用这个设置。WMPF是作为子服务的，我们无法阻止它在后台下载更新。现在的WMPF有500MB，而且更新得贼频繁。并且下载后，它会使得主程序突然耗尽你所有的CPU，强迫你重新启动微信让它可以顺利加载最新的WMPF。如果不想重开，删除它最新下载解压后的WMPF，主程序会停止耗CPU。但是它依然会锲而不舍在后台偷偷下载。 我原本借用手机电话卡的流量，查一查网页，挂一下微信。没想到一个下午跟夜晚，手机突然欠费停机。后来一查，我的套餐流量被全部耗尽还刷套餐外流量刷了三十块。套餐外流量1MB-0.3元。我才想起，我删了几次它反复下载的WMPF，流量被它狂耗。要不是我的话费不多，还要冤。可能这三十块，对于大厂里人均几十k（加上年终各种福利随便就double,triple）的大卡大佬大神仙人们来说，连一个工作午餐的最低餐费标准都算不上，可能还不及下班后打个车的车费，或者是买个Figure漂洋过海的运费的零头都不够。又怎么会顾及我们这些尘世间的小虾蟹囊中羞涩戳襟见肘的艰辛。你们不为用户考虑节省流量就算了，还阴阴湿湿在后台开水喉一样耗流量，pukgaai。）</p>
<p>回到正题，正因为它们可以无后顾之忧地写日志，我们逆向时才能够获得这么多参考信息，虽然有点矛盾，但还是要多谢这些海量日志信息。</p>
<p>即使mars的github仓库有分支提供了解码工具的代码，但是没有微信在服务端的私有密钥，你能够将其它人的日志解码出来吗？我水平有限常识浅疏，认为基本是不可能，不排除有泰斗可以做到。对于自己用的话，那是办法不只一个。除了我在上面说的，将客户端的随机私钥统统保存这个方法外，还可以伪造公钥patch掉微信程序里的公钥，这样就可用自己的伪造私钥来解码日志了。</p>
<p>patch方式有两种，一种只要用hex编辑器即可以，将wechatwin.dll的'1dac3876bd566b60c7dcbffd219ca6af2d2c07f045711bf2a6d111a2b1fc27c4d'开头的64字节替换成你伪造的ECC公开密钥。另一种就是在运行时，修改对应的动态内存，因为公开密钥已经加载到xlog对象的成员了。对于动态改内存，方法很多，最简单就是用windbg了。s-a命令搜索，ea命令修改。</p>
<p>换句话说，只要包含有这个公开密钥的模块都会有自己的一个xlogger。这些模块分别有wechatwin.dll，wmpf_host_export.dll，AppEx。它们对应的日志文件名分别以下列前缀开后，MM_, host_, main_。日志文件全部都在AppData/Roaming/Tencent/WeChat/log目录。</p>
<p> </p>
<p>然后来看<strong>找明文输出</strong>。</p>
<p>我们的切入点是appender，有一个关键的函数指针__xlogger_Write_impl。简介如下，详细去github看代码。</p>
<p><img alt="" height="384" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png" width="805"/></p>
<p>xlog的接口XLog设计在mars/comm/xlogger。它的实现XLoggerAppender在mars/xlog。</p>
<p>XLog设计跟Chrome::base::LogMessage相似，是对logging行为的封装。初始化，设置本条日志的说明信息，包括源代码文件名，行号，日志对象。流串输入操作符&lt;&lt;添加日志内容。析构函数结束本条日志，并且提交到XLoggerAppender。</p>
<p>XLoggerAppender相当于日志设备的实现，负责将XLog提交的日志写到存储设备上，过程包含加密。</p>
<p>所有WeChat模块都使用mars::xlog作为日志系统，但每个EXE都将它自身的appender设置给所有模块的mars::xlog。这样每个模块都统一使用EXE的appender作为日志系统。具体方式就是将其它模块的appender的__xlogger_Write_impl指向同一个appender的__xlogger_Write_impl。没错，这个函数就是我们可以要找的枢纽点，所有明文日志的入口点。要注意的是，wechatwin.dll生成的日志以MMPC_开头，它们是以utf8作为编码的。而其它的却是用gbk进行编码的。</p>
<p>小程序平台WeChatAppEx同时使用xlog进行日志处理，它是将mars/xlog封装成一个服务xlogger.mojom.XLogger，并且将chrome的日志系统指向这个日志服务。</p>
<p> </p>
<p>由于日志会泄漏个资，所以只能给一些无关重要的日志作为演示。</p>
<p><img alt="" height="698" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif" width="582"/></p>
<p> </p>
<p>本篇到这里，下一篇再见。</p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18459562" target="_blank">逆向WeChat(八，日志XLog）</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18423518" target="_blank">逆向WeChat(七，查找sqlcipher的DBKey，查看protobuf文件）</a></p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18370679" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(六，通过嗅探mojo抓包小程序https，打开小程序devtool)</a></p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18216717" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(五，mmmojo, wmpfmojo)</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18252961" target="_blank">逆向通达信 x 逆向微信 x 逆向Qt (趣味逆向，你未曾见过的signal-slot用法)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18209439" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(四，mars, 网络模块)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18198572" id="cb_post_title_url" title="发布于 2024-05-23 21:48">逆向WeChat(三, EventCenter, 所有功能模块的事件中心)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18187099" id="cb_post_title_url" title="发布于 2024-05-17 20:12">逆向WeChat (二, WeUIEngine, UI引擎)</a></p>
<p class="postTitle"><a href="https://www.cnblogs.com/bbqzsl/p/18171552" target="_blank">逆向wechat(一, 计划热身)</a></p>
<p> </p>
</div> (base_parser.py:366)
2024-11-29 14:19:30 [INFO] 作者：bbqz007 (base_parser.py:367)
2024-11-29 14:19:30 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:19:30 [INFO] 标题：逆向WeChat(八) (base_parser.py:369)
2024-11-29 14:19:30 [INFO] 保存文件夹：temp\-4925443789332236050\博客园-bbqz007 (base_parser.py:256)
2024-11-29 14:19:33 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:19:33 [INFO] 保存文件名：逆向WeChat(八)-bbqz007-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 14:19:33 [INFO] base_save_handle 处理图片https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:33)
2024-11-29 14:19:33 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:19:33 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:36)
2024-11-29 14:19:33 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:19:33 [INFO] 基础URL: https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:378)
2024-11-29 14:19:33 [INFO] 保存目录: temp\-4925443789332236050\博客园-bbqz007 (save_utils.py:379)
2024-11-29 14:19:33 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png (save_utils.py:404)
2024-11-29 14:19:33 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png (save_utils.py:417)
2024-11-29 14:19:33 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png (save_utils.py:404)
2024-11-29 14:19:33 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png (save_utils.py:417)
2024-11-29 14:19:33 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png (save_utils.py:404)
2024-11-29 14:19:33 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png (save_utils.py:417)
2024-11-29 14:19:33 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png (save_utils.py:404)
2024-11-29 14:19:33 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png (save_utils.py:417)
2024-11-29 14:19:33 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png (save_utils.py:404)
2024-11-29 14:19:33 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png (save_utils.py:417)
2024-11-29 14:19:33 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png (save_utils.py:404)
2024-11-29 14:19:33 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png (save_utils.py:417)
2024-11-29 14:19:33 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif (save_utils.py:404)
2024-11-29 14:19:33 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif (save_utils.py:417)
2024-11-29 14:19:33 [INFO] === 图片处理完成: 共处理 7 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:19:33 [INFO] HTML文件已保存: temp\-4925443789332236050\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 14:19:33 [INFO] 添加文件到文件列表：temp\-4925443789332236050\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 14:19:33 [INFO] 原始文件列表: [{'title': '逆向WeChat(八)', 'download_url': 'temp\\-4925443789332236050\\博客园-bbqz007\\逆向WeChat(八)-bbqz007-博客园-2024-11-28.html', 'size': 111793, 'format': 'html'}] (api.py:70)
2024-11-29 14:19:33 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 14:19:33 [INFO] 处理后的文件信息: {'title': '逆向WeChat(八)', 'download_url': '/download/-4925443789332236050/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.html', 'size': 111793, 'format': 'html'} (api.py:89)
2024-11-29 14:19:33 [INFO] 最终返回的文件列表: [FileInfo(title='逆向WeChat(八)', download_url='/download/-4925443789332236050/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.html', size=111793, format='html')] (api.py:93)
2024-11-29 14:20:35 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:20:35 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:20:35 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:20:35 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:20:35 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:20:35 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:20:35 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:20:35 [INFO] 原始日期文本：2024-11-28 19:05 (base_parser.py:169)
2024-11-29 14:20:35 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:20:35 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:20:35 [DEBUG] 内容：<div class="blogpost-body blogpost-body-html" id="cnblogs_post_body">
<p><a href="https://www.cnblogs.com/bbqzsl/p/18423518" target="_blank">上一篇逆向WeChat(七)是逆向微信客户端本地数据库相关事宜。</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18459562" target="_blank">本篇逆向微信客户端本地日志<strong>xlog</strong>相关的事宜。</a></p>
<p>本篇在博客园地址<a class="ng-star-inserted" href="https://www.cnblogs.com/bbqzsl/p/18459562" rel="noopener" target="_blank">https://www.cnblogs.com/bbqzsl/p/18459562</a></p>
<p>现在开始本篇。</p>
<p>如果问AI, "微信xlog文件打开方法"。(提问AI的时间在较早的时候，下面的回答不代表最新的回答。）</p>
<p>百度AI:</p>
<p><img alt="" height="438" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png" width="444"/></p>
<p> Gemini:</p>
<p><img alt="" height="1156" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png" width="579"/></p>
<p> gpt3.5:</p>
<p><img alt="" height="602" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png" width="565"/></p>
<p>腾讯混元 g3.5</p>
<p><img alt="" height="513" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png" width="651"/></p>
<p> </p>
<p> 百度AI 跟 Gemini 出现幻觉一本正经，它们还好像停留在搜索引擎爬网页的阶段。哦，它们本业就是搜索引擎。它们被<a href="https://m.300.cn/itzspd/634130.html" rel="noopener nofollow" target="_blank">https://m.300.cn/itzspd/634130.html</a>这编2021-0523的旧POST污染了。这编POST也是一本正经说微信的xlog文件是语音聊天记录文件。腾讯混元也是一本正经胡说八道，它自家的东西还不比谁都清楚，也不抖一点出来。对比后，这就侧面证明了AI能有多聪明，视乎你都教了它些什么，或者让它学了什么。填鸭式的井蛙式的AI会更聪明。（题外一下，gpt也有掉链子的时候。我在写（五），（六）的时候，问gpt，“微信的WMPF使用chromium哪些代码编译”。gpt三申五令chromium是google浏览器开源项目，并且强调WMPF是微信团队独立研发的小程序框架，不是浏览器，两者独立毫无关系，小程序框架不存在使用chromium代码。我然后重复4次，”微信WMPF是不是使用了chromium代码“之类变换问法，gpt给我相同的回答三申五令并且强调微信团队独立研发，最后还发起脾气罢答。那时候openai的确公告过出现罢答的bug。我最后问”我逆向过WMPF，它的确使用了chrominum代码编译“。gpt才变了回答，微信的WMPF可能使用了chrominum某些技术，纵然这样WMPF也是微信团队独立研发的。我去，它是你Ex吗？）。</p>
<p>百度AI更多地爬特定地区的新网页，爬到了有人发现mars的github有一未合并的分支，有人上传了decode_mars_nocrpyt_log_file.py等解码代码这一消息。但它并不知道xlog是加密的。Gemini爬不到这特定地区的网页，漏过了这一消息。只有gpt最不靠谱。</p>
<p>gpt还提出了两点建议，逆向破解加密跟找明文输出。我是一翻逆向分析验证后，做好了演示材料，定了稿的大纲，才问AI，没想到gpt将我做的都说了。</p>
<p> </p>
<p><strong>本篇主要内容</strong>就是<strong>逆向破解加密</strong>跟<strong>找明文输出</strong>。</p>
<p>首先来看<strong>逆向破解加密。</strong></p>
<p>对于第一点，也不浪费大家时间，这是基本不可能的。xlog使用Elliptic Curve Cryptography进行加密。gen_key(srv_pub, client_priv) == gen_key(client_pub, srv_priv)。每次xlog初始化，会随机生成client_pub跟client_priv，在gen_key(srv_pub, client_priv)产生密钥后，丢弃client_priv。这样每次启动微信，日志的密钥都不相同。每段加密内容都会附加上client_pub，只有用srv_priv才能产生出正确的密钥。除非你能够将每次丢弃的client_priv跟client_pub一同保存起来。通过加密段内容的附带的client_pub，找回client_priv，并使用srv_pub就可以产生密钥了。</p>
<p>下图演示，使用wechatwin.dll!xlog方法uECC_make_key()生成两组ECC密钥对。uECC_shared_secret()分别对交换公钥后密钥pair，生成出相同的加密密钥ECDH_KEY。</p>
<p><img alt="" height="695" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png" width="544"/></p>
<p>正因为这样，微信开发团队才可以无忌惮地大写特写日志，简直如同写调试信息一样，方便它们搞调试，搞不好你的一天的日志文件就会有几百个M。微信还有setDebugHost功能，还有调试服务器。猜想一下，服务器需要向客户端进行命令交互，这是十分简单的事，比如列出日志，上传日志。日志基本上只能它们用srv_priv进行查看。日志里几乎都是流水帐的调试信息。不单是错误调试。</p>
<p>（再题外一下，微信在后台耗资源。主程序是可以通过主界面设置停止更新，但是其它子服务就不适用这个设置。WMPF是作为子服务的，我们无法阻止它在后台下载更新。现在的WMPF有500MB，而且更新得贼频繁。并且下载后，它会使得主程序突然耗尽你所有的CPU，强迫你重新启动微信让它可以顺利加载最新的WMPF。如果不想重开，删除它最新下载解压后的WMPF，主程序会停止耗CPU。但是它依然会锲而不舍在后台偷偷下载。 我原本借用手机电话卡的流量，查一查网页，挂一下微信。没想到一个下午跟夜晚，手机突然欠费停机。后来一查，我的套餐流量被全部耗尽还刷套餐外流量刷了三十块。套餐外流量1MB-0.3元。我才想起，我删了几次它反复下载的WMPF，流量被它狂耗。要不是我的话费不多，还要冤。可能这三十块，对于大厂里人均几十k（加上年终各种福利随便就double,triple）的大卡大佬大神仙人们来说，连一个工作午餐的最低餐费标准都算不上，可能还不及下班后打个车的车费，或者是买个Figure漂洋过海的运费的零头都不够。又怎么会顾及我们这些尘世间的小虾蟹囊中羞涩戳襟见肘的艰辛。你们不为用户考虑节省流量就算了，还阴阴湿湿在后台开水喉一样耗流量，pukgaai。）</p>
<p>回到正题，正因为它们可以无后顾之忧地写日志，我们逆向时才能够获得这么多参考信息，虽然有点矛盾，但还是要多谢这些海量日志信息。</p>
<p>即使mars的github仓库有分支提供了解码工具的代码，但是没有微信在服务端的私有密钥，你能够将其它人的日志解码出来吗？我水平有限常识浅疏，认为基本是不可能，不排除有泰斗可以做到。对于自己用的话，那是办法不只一个。除了我在上面说的，将客户端的随机私钥统统保存这个方法外，还可以伪造公钥patch掉微信程序里的公钥，这样就可用自己的伪造私钥来解码日志了。</p>
<p>patch方式有两种，一种只要用hex编辑器即可以，将wechatwin.dll的'1dac3876bd566b60c7dcbffd219ca6af2d2c07f045711bf2a6d111a2b1fc27c4d'开头的64字节替换成你伪造的ECC公开密钥。另一种就是在运行时，修改对应的动态内存，因为公开密钥已经加载到xlog对象的成员了。对于动态改内存，方法很多，最简单就是用windbg了。s-a命令搜索，ea命令修改。</p>
<p>换句话说，只要包含有这个公开密钥的模块都会有自己的一个xlogger。这些模块分别有wechatwin.dll，wmpf_host_export.dll，AppEx。它们对应的日志文件名分别以下列前缀开后，MM_, host_, main_。日志文件全部都在AppData/Roaming/Tencent/WeChat/log目录。</p>
<p> </p>
<p>然后来看<strong>找明文输出</strong>。</p>
<p>我们的切入点是appender，有一个关键的函数指针__xlogger_Write_impl。简介如下，详细去github看代码。</p>
<p><img alt="" height="384" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png" width="805"/></p>
<p>xlog的接口XLog设计在mars/comm/xlogger。它的实现XLoggerAppender在mars/xlog。</p>
<p>XLog设计跟Chrome::base::LogMessage相似，是对logging行为的封装。初始化，设置本条日志的说明信息，包括源代码文件名，行号，日志对象。流串输入操作符&lt;&lt;添加日志内容。析构函数结束本条日志，并且提交到XLoggerAppender。</p>
<p>XLoggerAppender相当于日志设备的实现，负责将XLog提交的日志写到存储设备上，过程包含加密。</p>
<p>所有WeChat模块都使用mars::xlog作为日志系统，但每个EXE都将它自身的appender设置给所有模块的mars::xlog。这样每个模块都统一使用EXE的appender作为日志系统。具体方式就是将其它模块的appender的__xlogger_Write_impl指向同一个appender的__xlogger_Write_impl。没错，这个函数就是我们可以要找的枢纽点，所有明文日志的入口点。要注意的是，wechatwin.dll生成的日志以MMPC_开头，它们是以utf8作为编码的。而其它的却是用gbk进行编码的。</p>
<p>小程序平台WeChatAppEx同时使用xlog进行日志处理，它是将mars/xlog封装成一个服务xlogger.mojom.XLogger，并且将chrome的日志系统指向这个日志服务。</p>
<p> </p>
<p>由于日志会泄漏个资，所以只能给一些无关重要的日志作为演示。</p>
<p><img alt="" height="698" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif" width="582"/></p>
<p> </p>
<p>本篇到这里，下一篇再见。</p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18459562" target="_blank">逆向WeChat(八，日志XLog）</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18423518" target="_blank">逆向WeChat(七，查找sqlcipher的DBKey，查看protobuf文件）</a></p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18370679" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(六，通过嗅探mojo抓包小程序https，打开小程序devtool)</a></p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18216717" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(五，mmmojo, wmpfmojo)</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18252961" target="_blank">逆向通达信 x 逆向微信 x 逆向Qt (趣味逆向，你未曾见过的signal-slot用法)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18209439" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(四，mars, 网络模块)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18198572" id="cb_post_title_url" title="发布于 2024-05-23 21:48">逆向WeChat(三, EventCenter, 所有功能模块的事件中心)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18187099" id="cb_post_title_url" title="发布于 2024-05-17 20:12">逆向WeChat (二, WeUIEngine, UI引擎)</a></p>
<p class="postTitle"><a href="https://www.cnblogs.com/bbqzsl/p/18171552" target="_blank">逆向wechat(一, 计划热身)</a></p>
<p> </p>
</div> (base_parser.py:366)
2024-11-29 14:20:35 [INFO] 作者：bbqz007 (base_parser.py:367)
2024-11-29 14:20:35 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:20:35 [INFO] 标题：逆向WeChat(八) (base_parser.py:369)
2024-11-29 14:20:35 [INFO] 保存文件夹：temp\-4925443789332236050\博客园-bbqz007 (base_parser.py:256)
2024-11-29 14:20:39 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:20:39 [INFO] 保存文件名：逆向WeChat(八)-bbqz007-博客园-2024-11-28.html (base_parser.py:233)
2024-11-29 14:20:39 [INFO] base_save_handle 处理图片https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:33)
2024-11-29 14:20:39 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:20:39 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:36)
2024-11-29 14:20:39 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:20:39 [INFO] 基础URL: https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:378)
2024-11-29 14:20:39 [INFO] 保存目录: temp\-4925443789332236050\博客园-bbqz007 (save_utils.py:379)
2024-11-29 14:20:39 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png (save_utils.py:404)
2024-11-29 14:20:39 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png (save_utils.py:417)
2024-11-29 14:20:39 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png (save_utils.py:404)
2024-11-29 14:20:39 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png (save_utils.py:417)
2024-11-29 14:20:39 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png (save_utils.py:404)
2024-11-29 14:20:39 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png (save_utils.py:417)
2024-11-29 14:20:39 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png (save_utils.py:404)
2024-11-29 14:20:39 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png (save_utils.py:417)
2024-11-29 14:20:39 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png (save_utils.py:404)
2024-11-29 14:20:39 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png (save_utils.py:417)
2024-11-29 14:20:39 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png (save_utils.py:404)
2024-11-29 14:20:39 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png (save_utils.py:417)
2024-11-29 14:20:39 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif (save_utils.py:404)
2024-11-29 14:20:39 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif (save_utils.py:417)
2024-11-29 14:20:39 [INFO] === 图片处理完成: 共处理 7 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:20:39 [INFO] HTML文件已保存: temp\-4925443789332236050\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.html (save_utils.py:91)
2024-11-29 14:20:39 [INFO] 添加文件到文件列表：temp\-4925443789332236050\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.html (base_parser.py:65)
2024-11-29 14:20:39 [INFO] 保存文件名：逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf (base_parser.py:233)
2024-11-29 14:20:39 [INFO] 找到wkhtmltopdf: D:\code\Python\BlogKeeper\tools\wkhtmltopdf\bin\wkhtmltopdf.exe (save_utils.py:153)
2024-11-29 14:20:40 [INFO] 添加文件到文件列表：temp\-4925443789332236050\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf (base_parser.py:65)
2024-11-29 14:20:40 [INFO] 原始文件列表: [{'title': '逆向WeChat(八)', 'download_url': 'temp\\-4925443789332236050\\博客园-bbqz007\\逆向WeChat(八)-bbqz007-博客园-2024-11-28.html', 'size': 111793, 'format': 'html'}, {'title': '逆向WeChat(八)', 'download_url': 'temp\\-4925443789332236050\\博客园-bbqz007\\逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf', 'size': 170417, 'format': 'pdf'}] (api.py:70)
2024-11-29 14:20:40 [INFO] 请求的格式: {'pdf', 'html'} (api.py:81)
2024-11-29 14:20:40 [INFO] 处理后的文件信息: {'title': '逆向WeChat(八)', 'download_url': '/download/-4925443789332236050/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.html', 'size': 111793, 'format': 'html'} (api.py:89)
2024-11-29 14:20:40 [INFO] 处理后的文件信息: {'title': '逆向WeChat(八)', 'download_url': '/download/-4925443789332236050/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf', 'size': 170417, 'format': 'pdf'} (api.py:89)
2024-11-29 14:20:40 [INFO] 最终返回的文件列表: [FileInfo(title='逆向WeChat(八)', download_url='/download/-4925443789332236050/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.html', size=111793, format='html'), FileInfo(title='逆向WeChat(八)', download_url='/download/-4925443789332236050/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf', size=170417, format='pdf')] (api.py:93)
2024-11-29 14:21:54 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:21:54 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 14:21:54 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:21:54 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 14:21:54 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 14:21:54 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 14:21:54 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 14:21:54 [INFO] 原始日期文本：2024-11-28 19:05 (base_parser.py:169)
2024-11-29 14:21:54 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 14:21:54 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 14:21:54 [DEBUG] 内容：<div class="blogpost-body blogpost-body-html" id="cnblogs_post_body">
<p><a href="https://www.cnblogs.com/bbqzsl/p/18423518" target="_blank">上一篇逆向WeChat(七)是逆向微信客户端本地数据库相关事宜。</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18459562" target="_blank">本篇逆向微信客户端本地日志<strong>xlog</strong>相关的事宜。</a></p>
<p>本篇在博客园地址<a class="ng-star-inserted" href="https://www.cnblogs.com/bbqzsl/p/18459562" rel="noopener" target="_blank">https://www.cnblogs.com/bbqzsl/p/18459562</a></p>
<p>现在开始本篇。</p>
<p>如果问AI, "微信xlog文件打开方法"。(提问AI的时间在较早的时候，下面的回答不代表最新的回答。）</p>
<p>百度AI:</p>
<p><img alt="" height="438" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png" width="444"/></p>
<p> Gemini:</p>
<p><img alt="" height="1156" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png" width="579"/></p>
<p> gpt3.5:</p>
<p><img alt="" height="602" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png" width="565"/></p>
<p>腾讯混元 g3.5</p>
<p><img alt="" height="513" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png" width="651"/></p>
<p> </p>
<p> 百度AI 跟 Gemini 出现幻觉一本正经，它们还好像停留在搜索引擎爬网页的阶段。哦，它们本业就是搜索引擎。它们被<a href="https://m.300.cn/itzspd/634130.html" rel="noopener nofollow" target="_blank">https://m.300.cn/itzspd/634130.html</a>这编2021-0523的旧POST污染了。这编POST也是一本正经说微信的xlog文件是语音聊天记录文件。腾讯混元也是一本正经胡说八道，它自家的东西还不比谁都清楚，也不抖一点出来。对比后，这就侧面证明了AI能有多聪明，视乎你都教了它些什么，或者让它学了什么。填鸭式的井蛙式的AI会更聪明。（题外一下，gpt也有掉链子的时候。我在写（五），（六）的时候，问gpt，“微信的WMPF使用chromium哪些代码编译”。gpt三申五令chromium是google浏览器开源项目，并且强调WMPF是微信团队独立研发的小程序框架，不是浏览器，两者独立毫无关系，小程序框架不存在使用chromium代码。我然后重复4次，”微信WMPF是不是使用了chromium代码“之类变换问法，gpt给我相同的回答三申五令并且强调微信团队独立研发，最后还发起脾气罢答。那时候openai的确公告过出现罢答的bug。我最后问”我逆向过WMPF，它的确使用了chrominum代码编译“。gpt才变了回答，微信的WMPF可能使用了chrominum某些技术，纵然这样WMPF也是微信团队独立研发的。我去，它是你Ex吗？）。</p>
<p>百度AI更多地爬特定地区的新网页，爬到了有人发现mars的github有一未合并的分支，有人上传了decode_mars_nocrpyt_log_file.py等解码代码这一消息。但它并不知道xlog是加密的。Gemini爬不到这特定地区的网页，漏过了这一消息。只有gpt最不靠谱。</p>
<p>gpt还提出了两点建议，逆向破解加密跟找明文输出。我是一翻逆向分析验证后，做好了演示材料，定了稿的大纲，才问AI，没想到gpt将我做的都说了。</p>
<p> </p>
<p><strong>本篇主要内容</strong>就是<strong>逆向破解加密</strong>跟<strong>找明文输出</strong>。</p>
<p>首先来看<strong>逆向破解加密。</strong></p>
<p>对于第一点，也不浪费大家时间，这是基本不可能的。xlog使用Elliptic Curve Cryptography进行加密。gen_key(srv_pub, client_priv) == gen_key(client_pub, srv_priv)。每次xlog初始化，会随机生成client_pub跟client_priv，在gen_key(srv_pub, client_priv)产生密钥后，丢弃client_priv。这样每次启动微信，日志的密钥都不相同。每段加密内容都会附加上client_pub，只有用srv_priv才能产生出正确的密钥。除非你能够将每次丢弃的client_priv跟client_pub一同保存起来。通过加密段内容的附带的client_pub，找回client_priv，并使用srv_pub就可以产生密钥了。</p>
<p>下图演示，使用wechatwin.dll!xlog方法uECC_make_key()生成两组ECC密钥对。uECC_shared_secret()分别对交换公钥后密钥pair，生成出相同的加密密钥ECDH_KEY。</p>
<p><img alt="" height="695" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png" width="544"/></p>
<p>正因为这样，微信开发团队才可以无忌惮地大写特写日志，简直如同写调试信息一样，方便它们搞调试，搞不好你的一天的日志文件就会有几百个M。微信还有setDebugHost功能，还有调试服务器。猜想一下，服务器需要向客户端进行命令交互，这是十分简单的事，比如列出日志，上传日志。日志基本上只能它们用srv_priv进行查看。日志里几乎都是流水帐的调试信息。不单是错误调试。</p>
<p>（再题外一下，微信在后台耗资源。主程序是可以通过主界面设置停止更新，但是其它子服务就不适用这个设置。WMPF是作为子服务的，我们无法阻止它在后台下载更新。现在的WMPF有500MB，而且更新得贼频繁。并且下载后，它会使得主程序突然耗尽你所有的CPU，强迫你重新启动微信让它可以顺利加载最新的WMPF。如果不想重开，删除它最新下载解压后的WMPF，主程序会停止耗CPU。但是它依然会锲而不舍在后台偷偷下载。 我原本借用手机电话卡的流量，查一查网页，挂一下微信。没想到一个下午跟夜晚，手机突然欠费停机。后来一查，我的套餐流量被全部耗尽还刷套餐外流量刷了三十块。套餐外流量1MB-0.3元。我才想起，我删了几次它反复下载的WMPF，流量被它狂耗。要不是我的话费不多，还要冤。可能这三十块，对于大厂里人均几十k（加上年终各种福利随便就double,triple）的大卡大佬大神仙人们来说，连一个工作午餐的最低餐费标准都算不上，可能还不及下班后打个车的车费，或者是买个Figure漂洋过海的运费的零头都不够。又怎么会顾及我们这些尘世间的小虾蟹囊中羞涩戳襟见肘的艰辛。你们不为用户考虑节省流量就算了，还阴阴湿湿在后台开水喉一样耗流量，pukgaai。）</p>
<p>回到正题，正因为它们可以无后顾之忧地写日志，我们逆向时才能够获得这么多参考信息，虽然有点矛盾，但还是要多谢这些海量日志信息。</p>
<p>即使mars的github仓库有分支提供了解码工具的代码，但是没有微信在服务端的私有密钥，你能够将其它人的日志解码出来吗？我水平有限常识浅疏，认为基本是不可能，不排除有泰斗可以做到。对于自己用的话，那是办法不只一个。除了我在上面说的，将客户端的随机私钥统统保存这个方法外，还可以伪造公钥patch掉微信程序里的公钥，这样就可用自己的伪造私钥来解码日志了。</p>
<p>patch方式有两种，一种只要用hex编辑器即可以，将wechatwin.dll的'1dac3876bd566b60c7dcbffd219ca6af2d2c07f045711bf2a6d111a2b1fc27c4d'开头的64字节替换成你伪造的ECC公开密钥。另一种就是在运行时，修改对应的动态内存，因为公开密钥已经加载到xlog对象的成员了。对于动态改内存，方法很多，最简单就是用windbg了。s-a命令搜索，ea命令修改。</p>
<p>换句话说，只要包含有这个公开密钥的模块都会有自己的一个xlogger。这些模块分别有wechatwin.dll，wmpf_host_export.dll，AppEx。它们对应的日志文件名分别以下列前缀开后，MM_, host_, main_。日志文件全部都在AppData/Roaming/Tencent/WeChat/log目录。</p>
<p> </p>
<p>然后来看<strong>找明文输出</strong>。</p>
<p>我们的切入点是appender，有一个关键的函数指针__xlogger_Write_impl。简介如下，详细去github看代码。</p>
<p><img alt="" height="384" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png" width="805"/></p>
<p>xlog的接口XLog设计在mars/comm/xlogger。它的实现XLoggerAppender在mars/xlog。</p>
<p>XLog设计跟Chrome::base::LogMessage相似，是对logging行为的封装。初始化，设置本条日志的说明信息，包括源代码文件名，行号，日志对象。流串输入操作符&lt;&lt;添加日志内容。析构函数结束本条日志，并且提交到XLoggerAppender。</p>
<p>XLoggerAppender相当于日志设备的实现，负责将XLog提交的日志写到存储设备上，过程包含加密。</p>
<p>所有WeChat模块都使用mars::xlog作为日志系统，但每个EXE都将它自身的appender设置给所有模块的mars::xlog。这样每个模块都统一使用EXE的appender作为日志系统。具体方式就是将其它模块的appender的__xlogger_Write_impl指向同一个appender的__xlogger_Write_impl。没错，这个函数就是我们可以要找的枢纽点，所有明文日志的入口点。要注意的是，wechatwin.dll生成的日志以MMPC_开头，它们是以utf8作为编码的。而其它的却是用gbk进行编码的。</p>
<p>小程序平台WeChatAppEx同时使用xlog进行日志处理，它是将mars/xlog封装成一个服务xlogger.mojom.XLogger，并且将chrome的日志系统指向这个日志服务。</p>
<p> </p>
<p>由于日志会泄漏个资，所以只能给一些无关重要的日志作为演示。</p>
<p><img alt="" height="698" loading="lazy" src="https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif" width="582"/></p>
<p> </p>
<p>本篇到这里，下一篇再见。</p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18459562" target="_blank">逆向WeChat(八，日志XLog）</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18423518" target="_blank">逆向WeChat(七，查找sqlcipher的DBKey，查看protobuf文件）</a></p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18370679" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(六，通过嗅探mojo抓包小程序https，打开小程序devtool)</a></p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18216717" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(五，mmmojo, wmpfmojo)</a></p>
<p><a href="https://www.cnblogs.com/bbqzsl/p/18252961" target="_blank">逆向通达信 x 逆向微信 x 逆向Qt (趣味逆向，你未曾见过的signal-slot用法)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18209439" id="cb_post_title_url" title="发布于 2024-05-28 21:13">逆向WeChat(四，mars, 网络模块)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18198572" id="cb_post_title_url" title="发布于 2024-05-23 21:48">逆向WeChat(三, EventCenter, 所有功能模块的事件中心)</a></p>
<p class="postTitle"><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbqzsl/p/18187099" id="cb_post_title_url" title="发布于 2024-05-17 20:12">逆向WeChat (二, WeUIEngine, UI引擎)</a></p>
<p class="postTitle"><a href="https://www.cnblogs.com/bbqzsl/p/18171552" target="_blank">逆向wechat(一, 计划热身)</a></p>
<p> </p>
</div> (base_parser.py:366)
2024-11-29 14:21:54 [INFO] 作者：bbqz007 (base_parser.py:367)
2024-11-29 14:21:54 [INFO] 时间：2024-11-28 (base_parser.py:368)
2024-11-29 14:21:54 [INFO] 标题：逆向WeChat(八) (base_parser.py:369)
2024-11-29 14:21:54 [INFO] 保存文件夹：temp\-6504989984781141329\博客园-bbqz007 (base_parser.py:256)
2024-11-29 14:21:56 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:21:56 [INFO] 保存文件名：逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf (base_parser.py:233)
2024-11-29 14:21:56 [INFO] 找到wkhtmltopdf: D:\code\Python\BlogKeeper\tools\wkhtmltopdf\bin\wkhtmltopdf.exe (save_utils.py:153)
2024-11-29 14:21:59 [INFO] 添加文件到文件列表：temp\-6504989984781141329\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf (base_parser.py:65)
2024-11-29 14:21:59 [INFO] 保存文件名：逆向WeChat(八)-bbqz007-博客园-2024-11-28.mhtml (base_parser.py:233)
2024-11-29 14:21:59 [INFO] base_save_handle 处理图片https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:33)
2024-11-29 14:21:59 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:21:59 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:36)
2024-11-29 14:21:59 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:21:59 [INFO] 基础URL: https://www.cnblogs.com/bbqzsl/p/18459562 (save_utils.py:378)
2024-11-29 14:21:59 [INFO] 保存目录: temp\-6504989984781141329\博客园-bbqz007 (save_utils.py:379)
2024-11-29 14:21:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png (save_utils.py:404)
2024-11-29 14:21:59 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png (save_utils.py:417)
2024-11-29 14:21:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png (save_utils.py:404)
2024-11-29 14:21:59 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png (save_utils.py:417)
2024-11-29 14:21:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png (save_utils.py:404)
2024-11-29 14:21:59 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png (save_utils.py:417)
2024-11-29 14:21:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png (save_utils.py:404)
2024-11-29 14:21:59 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png (save_utils.py:417)
2024-11-29 14:21:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png (save_utils.py:404)
2024-11-29 14:21:59 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png (save_utils.py:417)
2024-11-29 14:21:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png (save_utils.py:404)
2024-11-29 14:21:59 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png (save_utils.py:417)
2024-11-29 14:21:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif (save_utils.py:404)
2024-11-29 14:21:59 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif (save_utils.py:417)
2024-11-29 14:21:59 [INFO] === 图片处理完成: 共处理 7 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:21:59 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015014548702-437939665.png (save_utils.py:300)
2024-11-29 14:22:00 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015118387-1457994047.png (save_utils.py:300)
2024-11-29 14:22:00 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241015015427295-1353430253.png (save_utils.py:300)
2024-11-29 14:22:01 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016020228471-1330129644.png (save_utils.py:300)
2024-11-29 14:22:01 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241016035913205-277593659.png (save_utils.py:300)
2024-11-29 14:22:02 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/665551/202410/665551-20241014232704462-790738866.png (save_utils.py:300)
2024-11-29 14:22:03 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/665551/202411/665551-20241126223032002-2003954153.gif (save_utils.py:300)
2024-11-29 14:22:03 [INFO] MHTML文件已保存: temp\-6504989984781141329\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.mhtml (save_utils.py:265)
2024-11-29 14:22:03 [INFO] 添加文件到文件列表：temp\-6504989984781141329\博客园-bbqz007\逆向WeChat(八)-bbqz007-博客园-2024-11-28.mhtml (base_parser.py:65)
2024-11-29 14:22:03 [INFO] 原始文件列表: [{'title': '逆向WeChat(八)', 'download_url': 'temp\\-6504989984781141329\\博客园-bbqz007\\逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf', 'size': 720348, 'format': 'pdf'}, {'title': '逆向WeChat(八)', 'download_url': 'temp\\-6504989984781141329\\博客园-bbqz007\\逆向WeChat(八)-bbqz007-博客园-2024-11-28.mhtml', 'size': 2393753, 'format': 'mhtml'}] (api.py:70)
2024-11-29 14:22:03 [INFO] 请求的格式: {'pdf', 'mhtml'} (api.py:81)
2024-11-29 14:22:03 [INFO] 处理后的文件信息: {'title': '逆向WeChat(八)', 'download_url': '/download/-6504989984781141329/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf', 'size': 720348, 'format': 'pdf'} (api.py:89)
2024-11-29 14:22:03 [INFO] 处理后的文件信息: {'title': '逆向WeChat(八)', 'download_url': '/download/-6504989984781141329/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.mhtml', 'size': 2393753, 'format': 'mhtml'} (api.py:89)
2024-11-29 14:22:03 [INFO] 最终返回的文件列表: [FileInfo(title='逆向WeChat(八)', download_url='/download/-6504989984781141329/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.pdf', size=720348, format='pdf'), FileInfo(title='逆向WeChat(八)', download_url='/download/-6504989984781141329/博客园-bbqz007/逆向WeChat(八)-bbqz007-博客园-2024-11-28.mhtml', size=2393753, format='mhtml')] (api.py:93)
2024-11-29 14:24:40 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:24:40 [INFO] 使用 微信公众号 解析器 (blog_parser.py:36)
2024-11-29 14:24:41 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'js_name'} (base_parser.py:91)
2024-11-29 14:24:41 [DEBUG] 尝试选择器: tag=em, attrs={'id': 'publish_time'} (base_parser.py:91)
2024-11-29 14:24:41 [INFO] 原始日期文本： (base_parser.py:169)
2024-11-29 14:24:41 [DEBUG] 尝试选择器: tag=h1, attrs={'id': 'activity-name'} (base_parser.py:91)
2024-11-29 14:24:41 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'js_content'} (base_parser.py:91)
2024-11-29 14:24:41 [DEBUG] 内容：<div class="rich_media_content js_underline_content autoTypeSetting24psection" id="js_content" style="visibility: hidden; opacity: 0; "><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去的十多年中，我曾使用并设计过各种类型的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。尽管它们各有特色，但总免不了一些使用上的不便之处。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我的第一次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">开发经历，可以追溯到十年前，那时我刚开始从事游戏开发，参与制作了一款</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">TPS</span></code><span leaf="">（第三人称射击）游戏。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时的服务器架构采用分布式设计，并结合多语言开发。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个分布式系统中，与玩家个人数据交互的进程被称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Info</span></code><span leaf="">进程，相关的功能由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Java</span></code><span leaf="">实现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Gateway</span></code><span leaf="">和核心玩法逻辑则由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">编写。两者之间的通信主要依赖于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的具体使用方式已经有些模糊，但我依然记得它的基本形式，大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class="code-snippet__js" data-lang="java"><code><span leaf=""><span class="code-snippet__keyword">void</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__title">CallRet</span><span class="code-snippet__params">(sockbuffer buf)</span><span class="code-snippet__plaintext"> </span></span></code><code><span leaf=""><span class="code-snippet__plaintext">{</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint32</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">ret</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadInt32()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint64</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">uid</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadUint64()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    ...</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">}</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">sockbuffer buf;</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt32(args1)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt8(args2)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">rpc::Call(buf.Bytes(), CallRet)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种早期的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计可以说是非常简陋，甚至有些“原始”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">它的序列化方式完全依赖手工编码（我印象最深的是经常需要和Java程序那边反复确认参数的大小和顺序是否一致）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">此外，回调函数的设计也相当局限，甚至不支持闭包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">消息机制是建立在普通的消息收发基础之上的。仅仅在消息协议中额外加了一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session</span></code><span leaf="">字段。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc::Call</span></code><span leaf="">时，系统会为该调用分配一个短期内不重复的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。分配的逻辑也很直接，只是用一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session_idx</span></code><span leaf="">变量自增而已，确保在5秒内不会重复。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然后将</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">和对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">放到一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">map</span></code><span leaf="">中去，之后就让出了所有</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CPU</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">被调用方</span></strong><span leaf="">响应时，它会将对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">字段一并返回。这样，</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">调用方</span></strong><span leaf="">就能通过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">找到对应的回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">并执行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了处理超时情况，调用方还实现了一个简单的定时器，每秒检查是否有超时的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">如果发现某个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">超时，就直接将其删除（这意味着超时的请求永远不会返回）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">虽然这种</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的使用方式有些简陋，但对于刚入行的我而言，它的思路却让我醍醐灌顶。并在后面近十年里一直影响着我。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf=""><br/></span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">后来，我也简单接触过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">但在实际使用中发现：它在发送请求协议后，会在当前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">socket</span></code><span leaf="">上</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">同步</span></strong><span leaf="">等待协议返回。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">对于一个典型的“单线程多进程”游戏服务器而言，这种设计会显著降低并发处理能力。因此，我没有进一步深入研究</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我开始参与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">游戏的开发。由于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">的战斗逻辑通常是由服务器自动完成的，而这些战斗计算往往在高峰期（如攻城战）时会占用大量资源，容易导致其他操作（例如武将培养、抽卡等）出现阻塞。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这一问题，我决定将大地图的核心玩法逻辑从主进程中剥离，独立到单独的进程中运行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">既然采用多进程来拆分业务逻辑，自然需要引入</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">来简化进程间通信，提升开发效率。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我结合之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">经验，开始探索实现一个便捷、高效的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我借鉴了之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">思路，最终设计出来的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="cpp"><code><span leaf=""><span class="code-snippet__function"><span class="code-snippet__type">uint32_t</span></span><span class="code-snippet__function"><span class="code-snippet__plaintext"> </span></span><span class="code-snippet__function"><span class="code-snippet__title">rpc_call</span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext">(zprotobuf::wirep &amp;req, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">void</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> (*cb)(MsgHeader *m, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">uint32_t</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> session))</span></span></span><span class="code-snippet__plaintext">;</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计中，我修改了超时功能：如果消息超过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">5</span></code><span leaf="">秒仍未返回，回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">cb</span></code><span leaf="">依然会被调用，但此时传递的参数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">m</span></code><span leaf="">会被置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">nullptr</span></code><span leaf="">，以便调用方可以处理超时后的撤销逻辑或补偿措施。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在从零开始设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的过程中，我遇到了一个以前被忽视的问题：如何有效区分双向通信中的请求与响应。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">具体来说，如果</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">两个进程只通过一条连接</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">通信，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">从</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">中读到的数据，到底是来自</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">的请求，还是对</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">先前请求的响应？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终我选择了一个看似简单的方案：让</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">之间各自建立一条独立的连接。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">也就是说，由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A Call B</span></code><span leaf="">，而由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B Call A</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个设计选择在后续引发了一个严重的问题：由于A和B的通信不再依赖同一条连接，因此消息的</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">FIFO（First In First Out）</span></strong><span leaf="">性质被破坏了。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在某些特殊场景下，客户端默认我们提供的消息顺序与服务器上的事件发生顺序一致，而这种假设在当前设计中可能被打破。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个问题非常隐蔽，尤其是在内网环境中。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">等到问题真正暴露时，项目已进入功能开发的后期阶段，箭在弦上，只能尝试绕过这个限制来规避问题。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">附带一提，这个大地图核心玩法的进程是用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">编写的，其</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块通过将通信逻辑封装在</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">coroutine</span></code><span leaf="">中实现了同步式调用。虽然实现形式与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">略有不同，但其基本机制是一致的，因此不再赘述。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我换了一份工作，开始使用Go语言开发游戏服务器。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时公司的服务器框架仍然延续了“单线程多进程”的设计理念，不过进程的概念被</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">所替代，主体业务逻辑依然运行在主</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">上。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这种架构下，分布式通信的实现方式也必须适配“单线程多进程”的运行模型，而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">的同步阻塞模式显然不适合这种设计。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，在开发跨服业务时，我们采用了纯粹的消息传递方式。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种方式虽然简单，但也有明显的缺点：A进程向B进程发送消息后，还需要专门为B返回的响应编写一个单独的处理函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种上下文的割裂会让代码变得不直观，特别是在需要两次甚至三次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Call</span></code><span leaf="">时，问题更加突出。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这个问题，我再次借鉴了之前</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">的设计思路，构建了一个适用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Go</span></code><span leaf="">语言环境的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。最终的接口设计大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="go"><code><span leaf=""><span class="code-snippet__plaintext">rpc.Call(req protobuf.Message, fn </span><span class="code-snippet__function"><span class="code-snippet__keyword">func</span></span><span class="code-snippet__function"><span class="code-snippet__params">(ack protobuf.Message)</span></span><span class="code-snippet__plaintext">)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块同样实现了超时逻辑：如果响应超过指定时间未返回，则会通过调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn(nil)</span></code><span leaf="">返回一个空值，以便调用方能够处理超时场景。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从表面上看，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">与我过去的实现没有太大差别。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，由于跨服通信与游戏服之间的链接机制是固定的（两个进程之间始终只有一条链接），我不得不解决一个问题：如何在同一条链接上区分请求包和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">实际上，即使链接机制允许修改，我也不太倾向于采用多链接方案。原因如前文所述，多链接容易导致消息顺序问题，特别是在对消息顺序有严格要求的场景下。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最初，我的想法是利用协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">来区分请求和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因为请求包和响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">一定是不同的，我只需要针对响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">做标记（打桩），然后将这些消息流转到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块进行处理即可。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">大致实现方式如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang=""><code><span leaf=""><span class="code-snippet__plaintext">router.register(xxx_cmd_id, rpc.dispatch)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种设计，当链接上接收到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">xxx_cmd_id</span></code><span leaf="">时，会自动调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">，从而识别对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">并触发相应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn</span></code><span leaf="">回调函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">事实上，这种方式让我用了相当长一段时间，它运行稳定，表现良好。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，随着跨服业务的复杂度不断提高，打桩函数的维护成本也在逐渐增加。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次新增或修改响应协议，都需要更新打桩逻辑，这让我不得不开始寻找新的请求与响应识别方案。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终，我发现协议数据中有一个未使用的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">位。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我决定将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">用于区分响应包和请求包：如果是响应包，就将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">；当接收数据包时，先检查这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">，如果为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">，则直接调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">处理响应，否则进入正常的消息处理流程。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个简单的改动彻底终结了“打桩时代”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">总的来看，这版</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的设计除了保留回调机制外，几乎解决了我在以往经历中遇到的所有痛点。（是的，从我用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">开始，我就不喜欢回调式的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">了，因为回调会传染）。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">由于这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是在跨服机制的上层构建的，因此它不再，也无法直接关注底层的链接状态。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">正因为如此，即便一个游戏服链接了几十个跨服进程，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的实例依然只有一个。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">相比之前的设计，这次的思路完全不同。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去，我通常会为每个链接绑定一个独立的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">对象，而这次“思维定式”的打破让我对基于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">机制的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">有了更为全局的认识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我开始反思：</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是否真的有必要关注链接？如果不再关心底层的链接状态，最终的设计会是什么样子？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我进行了几个月的探索与思考，最终找到了一种更抽象的设计思路。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在一个分布式的游戏服务器系统中，进程之间的操作必然会被隔离开，不可能直接操作同一份玩家或全服数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这一特性为我们提供了一个关键的设计契机：为每个进程分配一个唯一的标识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">假设这个标识称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">，我们可以基于此重新设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口，新的接口可能如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="bash"><code><span leaf=""><span class="code-snippet__built_in">local</span><span class="code-snippet__plaintext"> ack = rpc.call(workerid, req)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当我们选择忽略链接的存在后，分布式系统中的服务发现与连接建立也可以独立成为一个独立的模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">例如</span><span leaf="">我最近的实验项目</span><span leaf="">, 就使用了etcd来实现服务发现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种设计思路受到了一些边车模式（</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Sidecar Pattern</span></code><span leaf="">）的启发，通过抽象链接管理，将其从业务逻辑中剥离出来。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从业务角度来看，我们无需过于关注链接的瞬时断开与重建，因为这些事件并不会对分布式系统的一致性产生任何实际帮助。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">与我们的业务密切相关，因为它决定了每个进程将处理分布式系统中的哪部分数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">代表一个特定的进程，它负责处理特定范围内的任务或数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">不仅是进程的标识符，更是数据路由与处理的关键。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种方式，我们能够将分布式系统的资源划分与调度与业务需求紧密结合，而链接则可以忽视。</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div> (base_parser.py:366)
2024-11-29 14:24:41 [INFO] 作者：重归混沌 (base_parser.py:367)
2024-11-29 14:24:41 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 14:24:41 [INFO] 标题：谈谈游戏服务器中RPC模块的设计 (base_parser.py:369)
2024-11-29 14:24:41 [INFO] 保存文件夹：temp\7982292402252280604\微信公众号-重归混沌 (base_parser.py:256)
2024-11-29 14:24:43 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:24:43 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:233)
2024-11-29 14:24:43 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:24:43 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:24:43 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:24:43 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:24:43 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:24:43 [INFO] 保存目录: temp\7982292402252280604\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:24:43 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:24:43 [INFO] HTML文件已保存: temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (save_utils.py:91)
2024-11-29 14:24:43 [INFO] 添加文件到文件列表：temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:65)
2024-11-29 14:24:43 [INFO] 原始文件列表: [{'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7982292402252280604\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'}] (api.py:70)
2024-11-29 14:24:43 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 14:24:43 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'} (api.py:89)
2024-11-29 14:24:43 [INFO] 最终返回的文件列表: [FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', size=2229479, format='html')] (api.py:93)
2024-11-29 14:24:56 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:24:56 [INFO] 使用 微信公众号 解析器 (blog_parser.py:36)
2024-11-29 14:24:57 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'js_name'} (base_parser.py:91)
2024-11-29 14:24:57 [DEBUG] 尝试选择器: tag=em, attrs={'id': 'publish_time'} (base_parser.py:91)
2024-11-29 14:24:57 [INFO] 原始日期文本： (base_parser.py:169)
2024-11-29 14:24:57 [DEBUG] 尝试选择器: tag=h1, attrs={'id': 'activity-name'} (base_parser.py:91)
2024-11-29 14:24:57 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'js_content'} (base_parser.py:91)
2024-11-29 14:24:57 [DEBUG] 内容：<div class="rich_media_content js_underline_content autoTypeSetting24psection" id="js_content" style="visibility: hidden; opacity: 0; "><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去的十多年中，我曾使用并设计过各种类型的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。尽管它们各有特色，但总免不了一些使用上的不便之处。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我的第一次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">开发经历，可以追溯到十年前，那时我刚开始从事游戏开发，参与制作了一款</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">TPS</span></code><span leaf="">（第三人称射击）游戏。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时的服务器架构采用分布式设计，并结合多语言开发。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个分布式系统中，与玩家个人数据交互的进程被称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Info</span></code><span leaf="">进程，相关的功能由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Java</span></code><span leaf="">实现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Gateway</span></code><span leaf="">和核心玩法逻辑则由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">编写。两者之间的通信主要依赖于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的具体使用方式已经有些模糊，但我依然记得它的基本形式，大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class="code-snippet__js" data-lang="java"><code><span leaf=""><span class="code-snippet__keyword">void</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__title">CallRet</span><span class="code-snippet__params">(sockbuffer buf)</span><span class="code-snippet__plaintext"> </span></span></code><code><span leaf=""><span class="code-snippet__plaintext">{</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint32</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">ret</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadInt32()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint64</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">uid</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadUint64()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    ...</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">}</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">sockbuffer buf;</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt32(args1)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt8(args2)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">rpc::Call(buf.Bytes(), CallRet)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种早期的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计可以说是非常简陋，甚至有些“原始”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">它的序列化方式完全依赖手工编码（我印象最深的是经常需要和Java程序那边反复确认参数的大小和顺序是否一致）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">此外，回调函数的设计也相当局限，甚至不支持闭包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">消息机制是建立在普通的消息收发基础之上的。仅仅在消息协议中额外加了一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session</span></code><span leaf="">字段。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc::Call</span></code><span leaf="">时，系统会为该调用分配一个短期内不重复的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。分配的逻辑也很直接，只是用一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session_idx</span></code><span leaf="">变量自增而已，确保在5秒内不会重复。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然后将</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">和对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">放到一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">map</span></code><span leaf="">中去，之后就让出了所有</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CPU</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">被调用方</span></strong><span leaf="">响应时，它会将对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">字段一并返回。这样，</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">调用方</span></strong><span leaf="">就能通过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">找到对应的回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">并执行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了处理超时情况，调用方还实现了一个简单的定时器，每秒检查是否有超时的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">如果发现某个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">超时，就直接将其删除（这意味着超时的请求永远不会返回）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">虽然这种</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的使用方式有些简陋，但对于刚入行的我而言，它的思路却让我醍醐灌顶。并在后面近十年里一直影响着我。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf=""><br/></span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">后来，我也简单接触过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">但在实际使用中发现：它在发送请求协议后，会在当前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">socket</span></code><span leaf="">上</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">同步</span></strong><span leaf="">等待协议返回。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">对于一个典型的“单线程多进程”游戏服务器而言，这种设计会显著降低并发处理能力。因此，我没有进一步深入研究</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我开始参与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">游戏的开发。由于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">的战斗逻辑通常是由服务器自动完成的，而这些战斗计算往往在高峰期（如攻城战）时会占用大量资源，容易导致其他操作（例如武将培养、抽卡等）出现阻塞。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这一问题，我决定将大地图的核心玩法逻辑从主进程中剥离，独立到单独的进程中运行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">既然采用多进程来拆分业务逻辑，自然需要引入</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">来简化进程间通信，提升开发效率。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我结合之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">经验，开始探索实现一个便捷、高效的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我借鉴了之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">思路，最终设计出来的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="cpp"><code><span leaf=""><span class="code-snippet__function"><span class="code-snippet__type">uint32_t</span></span><span class="code-snippet__function"><span class="code-snippet__plaintext"> </span></span><span class="code-snippet__function"><span class="code-snippet__title">rpc_call</span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext">(zprotobuf::wirep &amp;req, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">void</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> (*cb)(MsgHeader *m, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">uint32_t</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> session))</span></span></span><span class="code-snippet__plaintext">;</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计中，我修改了超时功能：如果消息超过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">5</span></code><span leaf="">秒仍未返回，回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">cb</span></code><span leaf="">依然会被调用，但此时传递的参数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">m</span></code><span leaf="">会被置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">nullptr</span></code><span leaf="">，以便调用方可以处理超时后的撤销逻辑或补偿措施。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在从零开始设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的过程中，我遇到了一个以前被忽视的问题：如何有效区分双向通信中的请求与响应。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">具体来说，如果</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">两个进程只通过一条连接</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">通信，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">从</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">中读到的数据，到底是来自</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">的请求，还是对</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">先前请求的响应？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终我选择了一个看似简单的方案：让</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">之间各自建立一条独立的连接。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">也就是说，由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A Call B</span></code><span leaf="">，而由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B Call A</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个设计选择在后续引发了一个严重的问题：由于A和B的通信不再依赖同一条连接，因此消息的</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">FIFO（First In First Out）</span></strong><span leaf="">性质被破坏了。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在某些特殊场景下，客户端默认我们提供的消息顺序与服务器上的事件发生顺序一致，而这种假设在当前设计中可能被打破。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个问题非常隐蔽，尤其是在内网环境中。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">等到问题真正暴露时，项目已进入功能开发的后期阶段，箭在弦上，只能尝试绕过这个限制来规避问题。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">附带一提，这个大地图核心玩法的进程是用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">编写的，其</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块通过将通信逻辑封装在</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">coroutine</span></code><span leaf="">中实现了同步式调用。虽然实现形式与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">略有不同，但其基本机制是一致的，因此不再赘述。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我换了一份工作，开始使用Go语言开发游戏服务器。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时公司的服务器框架仍然延续了“单线程多进程”的设计理念，不过进程的概念被</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">所替代，主体业务逻辑依然运行在主</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">上。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这种架构下，分布式通信的实现方式也必须适配“单线程多进程”的运行模型，而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">的同步阻塞模式显然不适合这种设计。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，在开发跨服业务时，我们采用了纯粹的消息传递方式。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种方式虽然简单，但也有明显的缺点：A进程向B进程发送消息后，还需要专门为B返回的响应编写一个单独的处理函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种上下文的割裂会让代码变得不直观，特别是在需要两次甚至三次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Call</span></code><span leaf="">时，问题更加突出。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这个问题，我再次借鉴了之前</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">的设计思路，构建了一个适用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Go</span></code><span leaf="">语言环境的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。最终的接口设计大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="go"><code><span leaf=""><span class="code-snippet__plaintext">rpc.Call(req protobuf.Message, fn </span><span class="code-snippet__function"><span class="code-snippet__keyword">func</span></span><span class="code-snippet__function"><span class="code-snippet__params">(ack protobuf.Message)</span></span><span class="code-snippet__plaintext">)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块同样实现了超时逻辑：如果响应超过指定时间未返回，则会通过调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn(nil)</span></code><span leaf="">返回一个空值，以便调用方能够处理超时场景。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从表面上看，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">与我过去的实现没有太大差别。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，由于跨服通信与游戏服之间的链接机制是固定的（两个进程之间始终只有一条链接），我不得不解决一个问题：如何在同一条链接上区分请求包和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">实际上，即使链接机制允许修改，我也不太倾向于采用多链接方案。原因如前文所述，多链接容易导致消息顺序问题，特别是在对消息顺序有严格要求的场景下。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最初，我的想法是利用协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">来区分请求和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因为请求包和响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">一定是不同的，我只需要针对响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">做标记（打桩），然后将这些消息流转到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块进行处理即可。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">大致实现方式如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang=""><code><span leaf=""><span class="code-snippet__plaintext">router.register(xxx_cmd_id, rpc.dispatch)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种设计，当链接上接收到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">xxx_cmd_id</span></code><span leaf="">时，会自动调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">，从而识别对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">并触发相应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn</span></code><span leaf="">回调函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">事实上，这种方式让我用了相当长一段时间，它运行稳定，表现良好。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，随着跨服业务的复杂度不断提高，打桩函数的维护成本也在逐渐增加。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次新增或修改响应协议，都需要更新打桩逻辑，这让我不得不开始寻找新的请求与响应识别方案。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终，我发现协议数据中有一个未使用的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">位。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我决定将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">用于区分响应包和请求包：如果是响应包，就将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">；当接收数据包时，先检查这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">，如果为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">，则直接调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">处理响应，否则进入正常的消息处理流程。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个简单的改动彻底终结了“打桩时代”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">总的来看，这版</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的设计除了保留回调机制外，几乎解决了我在以往经历中遇到的所有痛点。（是的，从我用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">开始，我就不喜欢回调式的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">了，因为回调会传染）。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">由于这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是在跨服机制的上层构建的，因此它不再，也无法直接关注底层的链接状态。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">正因为如此，即便一个游戏服链接了几十个跨服进程，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的实例依然只有一个。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">相比之前的设计，这次的思路完全不同。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去，我通常会为每个链接绑定一个独立的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">对象，而这次“思维定式”的打破让我对基于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">机制的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">有了更为全局的认识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我开始反思：</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是否真的有必要关注链接？如果不再关心底层的链接状态，最终的设计会是什么样子？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我进行了几个月的探索与思考，最终找到了一种更抽象的设计思路。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在一个分布式的游戏服务器系统中，进程之间的操作必然会被隔离开，不可能直接操作同一份玩家或全服数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这一特性为我们提供了一个关键的设计契机：为每个进程分配一个唯一的标识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">假设这个标识称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">，我们可以基于此重新设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口，新的接口可能如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="bash"><code><span leaf=""><span class="code-snippet__built_in">local</span><span class="code-snippet__plaintext"> ack = rpc.call(workerid, req)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当我们选择忽略链接的存在后，分布式系统中的服务发现与连接建立也可以独立成为一个独立的模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">例如</span><span leaf="">我最近的实验项目</span><span leaf="">, 就使用了etcd来实现服务发现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种设计思路受到了一些边车模式（</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Sidecar Pattern</span></code><span leaf="">）的启发，通过抽象链接管理，将其从业务逻辑中剥离出来。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从业务角度来看，我们无需过于关注链接的瞬时断开与重建，因为这些事件并不会对分布式系统的一致性产生任何实际帮助。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">与我们的业务密切相关，因为它决定了每个进程将处理分布式系统中的哪部分数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">代表一个特定的进程，它负责处理特定范围内的任务或数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">不仅是进程的标识符，更是数据路由与处理的关键。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种方式，我们能够将分布式系统的资源划分与调度与业务需求紧密结合，而链接则可以忽视。</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div> (base_parser.py:366)
2024-11-29 14:24:57 [INFO] 作者：重归混沌 (base_parser.py:367)
2024-11-29 14:24:57 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 14:24:57 [INFO] 标题：谈谈游戏服务器中RPC模块的设计 (base_parser.py:369)
2024-11-29 14:24:57 [INFO] 保存文件夹：temp\7982292402252280604\微信公众号-重归混沌 (base_parser.py:256)
2024-11-29 14:25:00 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:25:00 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.pdf (base_parser.py:233)
2024-11-29 14:25:00 [INFO] 找到wkhtmltopdf: D:\code\Python\BlogKeeper\tools\wkhtmltopdf\bin\wkhtmltopdf.exe (save_utils.py:153)
2024-11-29 14:25:04 [INFO] 添加文件到文件列表：temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.pdf (base_parser.py:65)
2024-11-29 14:25:04 [INFO] 原始文件列表: [{'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7982292402252280604\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.pdf', 'size': 217478, 'format': 'pdf'}] (api.py:70)
2024-11-29 14:25:04 [INFO] 请求的格式: {'pdf'} (api.py:81)
2024-11-29 14:25:04 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.pdf', 'size': 217478, 'format': 'pdf'} (api.py:89)
2024-11-29 14:25:04 [INFO] 最终返回的文件列表: [FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.pdf', size=217478, format='pdf')] (api.py:93)
2024-11-29 14:25:28 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:25:28 [INFO] 使用 微信公众号 解析器 (blog_parser.py:36)
2024-11-29 14:25:29 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'js_name'} (base_parser.py:91)
2024-11-29 14:25:29 [DEBUG] 尝试选择器: tag=em, attrs={'id': 'publish_time'} (base_parser.py:91)
2024-11-29 14:25:29 [INFO] 原始日期文本： (base_parser.py:169)
2024-11-29 14:25:29 [DEBUG] 尝试选择器: tag=h1, attrs={'id': 'activity-name'} (base_parser.py:91)
2024-11-29 14:25:29 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'js_content'} (base_parser.py:91)
2024-11-29 14:25:29 [DEBUG] 内容：<div class="rich_media_content js_underline_content autoTypeSetting24psection" id="js_content" style="visibility: hidden; opacity: 0; "><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去的十多年中，我曾使用并设计过各种类型的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。尽管它们各有特色，但总免不了一些使用上的不便之处。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我的第一次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">开发经历，可以追溯到十年前，那时我刚开始从事游戏开发，参与制作了一款</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">TPS</span></code><span leaf="">（第三人称射击）游戏。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时的服务器架构采用分布式设计，并结合多语言开发。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个分布式系统中，与玩家个人数据交互的进程被称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Info</span></code><span leaf="">进程，相关的功能由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Java</span></code><span leaf="">实现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Gateway</span></code><span leaf="">和核心玩法逻辑则由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">编写。两者之间的通信主要依赖于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的具体使用方式已经有些模糊，但我依然记得它的基本形式，大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class="code-snippet__js" data-lang="java"><code><span leaf=""><span class="code-snippet__keyword">void</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__title">CallRet</span><span class="code-snippet__params">(sockbuffer buf)</span><span class="code-snippet__plaintext"> </span></span></code><code><span leaf=""><span class="code-snippet__plaintext">{</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint32</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">ret</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadInt32()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint64</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">uid</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadUint64()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    ...</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">}</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">sockbuffer buf;</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt32(args1)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt8(args2)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">rpc::Call(buf.Bytes(), CallRet)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种早期的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计可以说是非常简陋，甚至有些“原始”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">它的序列化方式完全依赖手工编码（我印象最深的是经常需要和Java程序那边反复确认参数的大小和顺序是否一致）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">此外，回调函数的设计也相当局限，甚至不支持闭包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">消息机制是建立在普通的消息收发基础之上的。仅仅在消息协议中额外加了一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session</span></code><span leaf="">字段。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc::Call</span></code><span leaf="">时，系统会为该调用分配一个短期内不重复的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。分配的逻辑也很直接，只是用一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session_idx</span></code><span leaf="">变量自增而已，确保在5秒内不会重复。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然后将</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">和对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">放到一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">map</span></code><span leaf="">中去，之后就让出了所有</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CPU</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">被调用方</span></strong><span leaf="">响应时，它会将对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">字段一并返回。这样，</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">调用方</span></strong><span leaf="">就能通过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">找到对应的回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">并执行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了处理超时情况，调用方还实现了一个简单的定时器，每秒检查是否有超时的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">如果发现某个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">超时，就直接将其删除（这意味着超时的请求永远不会返回）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">虽然这种</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的使用方式有些简陋，但对于刚入行的我而言，它的思路却让我醍醐灌顶。并在后面近十年里一直影响着我。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf=""><br/></span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">后来，我也简单接触过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">但在实际使用中发现：它在发送请求协议后，会在当前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">socket</span></code><span leaf="">上</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">同步</span></strong><span leaf="">等待协议返回。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">对于一个典型的“单线程多进程”游戏服务器而言，这种设计会显著降低并发处理能力。因此，我没有进一步深入研究</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我开始参与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">游戏的开发。由于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">的战斗逻辑通常是由服务器自动完成的，而这些战斗计算往往在高峰期（如攻城战）时会占用大量资源，容易导致其他操作（例如武将培养、抽卡等）出现阻塞。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这一问题，我决定将大地图的核心玩法逻辑从主进程中剥离，独立到单独的进程中运行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">既然采用多进程来拆分业务逻辑，自然需要引入</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">来简化进程间通信，提升开发效率。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我结合之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">经验，开始探索实现一个便捷、高效的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我借鉴了之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">思路，最终设计出来的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="cpp"><code><span leaf=""><span class="code-snippet__function"><span class="code-snippet__type">uint32_t</span></span><span class="code-snippet__function"><span class="code-snippet__plaintext"> </span></span><span class="code-snippet__function"><span class="code-snippet__title">rpc_call</span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext">(zprotobuf::wirep &amp;req, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">void</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> (*cb)(MsgHeader *m, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">uint32_t</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> session))</span></span></span><span class="code-snippet__plaintext">;</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计中，我修改了超时功能：如果消息超过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">5</span></code><span leaf="">秒仍未返回，回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">cb</span></code><span leaf="">依然会被调用，但此时传递的参数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">m</span></code><span leaf="">会被置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">nullptr</span></code><span leaf="">，以便调用方可以处理超时后的撤销逻辑或补偿措施。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在从零开始设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的过程中，我遇到了一个以前被忽视的问题：如何有效区分双向通信中的请求与响应。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">具体来说，如果</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">两个进程只通过一条连接</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">通信，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">从</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">中读到的数据，到底是来自</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">的请求，还是对</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">先前请求的响应？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终我选择了一个看似简单的方案：让</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">之间各自建立一条独立的连接。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">也就是说，由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A Call B</span></code><span leaf="">，而由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B Call A</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个设计选择在后续引发了一个严重的问题：由于A和B的通信不再依赖同一条连接，因此消息的</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">FIFO（First In First Out）</span></strong><span leaf="">性质被破坏了。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在某些特殊场景下，客户端默认我们提供的消息顺序与服务器上的事件发生顺序一致，而这种假设在当前设计中可能被打破。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个问题非常隐蔽，尤其是在内网环境中。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">等到问题真正暴露时，项目已进入功能开发的后期阶段，箭在弦上，只能尝试绕过这个限制来规避问题。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">附带一提，这个大地图核心玩法的进程是用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">编写的，其</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块通过将通信逻辑封装在</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">coroutine</span></code><span leaf="">中实现了同步式调用。虽然实现形式与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">略有不同，但其基本机制是一致的，因此不再赘述。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我换了一份工作，开始使用Go语言开发游戏服务器。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时公司的服务器框架仍然延续了“单线程多进程”的设计理念，不过进程的概念被</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">所替代，主体业务逻辑依然运行在主</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">上。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这种架构下，分布式通信的实现方式也必须适配“单线程多进程”的运行模型，而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">的同步阻塞模式显然不适合这种设计。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，在开发跨服业务时，我们采用了纯粹的消息传递方式。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种方式虽然简单，但也有明显的缺点：A进程向B进程发送消息后，还需要专门为B返回的响应编写一个单独的处理函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种上下文的割裂会让代码变得不直观，特别是在需要两次甚至三次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Call</span></code><span leaf="">时，问题更加突出。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这个问题，我再次借鉴了之前</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">的设计思路，构建了一个适用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Go</span></code><span leaf="">语言环境的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。最终的接口设计大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="go"><code><span leaf=""><span class="code-snippet__plaintext">rpc.Call(req protobuf.Message, fn </span><span class="code-snippet__function"><span class="code-snippet__keyword">func</span></span><span class="code-snippet__function"><span class="code-snippet__params">(ack protobuf.Message)</span></span><span class="code-snippet__plaintext">)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块同样实现了超时逻辑：如果响应超过指定时间未返回，则会通过调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn(nil)</span></code><span leaf="">返回一个空值，以便调用方能够处理超时场景。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从表面上看，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">与我过去的实现没有太大差别。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，由于跨服通信与游戏服之间的链接机制是固定的（两个进程之间始终只有一条链接），我不得不解决一个问题：如何在同一条链接上区分请求包和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">实际上，即使链接机制允许修改，我也不太倾向于采用多链接方案。原因如前文所述，多链接容易导致消息顺序问题，特别是在对消息顺序有严格要求的场景下。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最初，我的想法是利用协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">来区分请求和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因为请求包和响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">一定是不同的，我只需要针对响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">做标记（打桩），然后将这些消息流转到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块进行处理即可。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">大致实现方式如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang=""><code><span leaf=""><span class="code-snippet__plaintext">router.register(xxx_cmd_id, rpc.dispatch)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种设计，当链接上接收到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">xxx_cmd_id</span></code><span leaf="">时，会自动调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">，从而识别对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">并触发相应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn</span></code><span leaf="">回调函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">事实上，这种方式让我用了相当长一段时间，它运行稳定，表现良好。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，随着跨服业务的复杂度不断提高，打桩函数的维护成本也在逐渐增加。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次新增或修改响应协议，都需要更新打桩逻辑，这让我不得不开始寻找新的请求与响应识别方案。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终，我发现协议数据中有一个未使用的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">位。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我决定将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">用于区分响应包和请求包：如果是响应包，就将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">；当接收数据包时，先检查这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">，如果为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">，则直接调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">处理响应，否则进入正常的消息处理流程。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个简单的改动彻底终结了“打桩时代”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">总的来看，这版</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的设计除了保留回调机制外，几乎解决了我在以往经历中遇到的所有痛点。（是的，从我用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">开始，我就不喜欢回调式的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">了，因为回调会传染）。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">由于这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是在跨服机制的上层构建的，因此它不再，也无法直接关注底层的链接状态。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">正因为如此，即便一个游戏服链接了几十个跨服进程，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的实例依然只有一个。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">相比之前的设计，这次的思路完全不同。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去，我通常会为每个链接绑定一个独立的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">对象，而这次“思维定式”的打破让我对基于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">机制的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">有了更为全局的认识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我开始反思：</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是否真的有必要关注链接？如果不再关心底层的链接状态，最终的设计会是什么样子？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我进行了几个月的探索与思考，最终找到了一种更抽象的设计思路。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在一个分布式的游戏服务器系统中，进程之间的操作必然会被隔离开，不可能直接操作同一份玩家或全服数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这一特性为我们提供了一个关键的设计契机：为每个进程分配一个唯一的标识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">假设这个标识称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">，我们可以基于此重新设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口，新的接口可能如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="bash"><code><span leaf=""><span class="code-snippet__built_in">local</span><span class="code-snippet__plaintext"> ack = rpc.call(workerid, req)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当我们选择忽略链接的存在后，分布式系统中的服务发现与连接建立也可以独立成为一个独立的模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">例如</span><span leaf="">我最近的实验项目</span><span leaf="">, 就使用了etcd来实现服务发现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种设计思路受到了一些边车模式（</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Sidecar Pattern</span></code><span leaf="">）的启发，通过抽象链接管理，将其从业务逻辑中剥离出来。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从业务角度来看，我们无需过于关注链接的瞬时断开与重建，因为这些事件并不会对分布式系统的一致性产生任何实际帮助。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">与我们的业务密切相关，因为它决定了每个进程将处理分布式系统中的哪部分数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">代表一个特定的进程，它负责处理特定范围内的任务或数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">不仅是进程的标识符，更是数据路由与处理的关键。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种方式，我们能够将分布式系统的资源划分与调度与业务需求紧密结合，而链接则可以忽视。</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div> (base_parser.py:366)
2024-11-29 14:25:29 [INFO] 作者：重归混沌 (base_parser.py:367)
2024-11-29 14:25:29 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 14:25:29 [INFO] 标题：谈谈游戏服务器中RPC模块的设计 (base_parser.py:369)
2024-11-29 14:25:29 [INFO] 保存文件夹：temp\7982292402252280604\微信公众号-重归混沌 (base_parser.py:256)
2024-11-29 14:25:33 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:25:33 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:233)
2024-11-29 14:25:33 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:25:33 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:25:33 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:25:33 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:25:33 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:25:33 [INFO] 保存目录: temp\7982292402252280604\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:25:33 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:25:33 [INFO] HTML文件已保存: temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (save_utils.py:91)
2024-11-29 14:25:33 [INFO] 添加文件到文件列表：temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:65)
2024-11-29 14:25:33 [INFO] 原始文件列表: [{'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7982292402252280604\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'}] (api.py:70)
2024-11-29 14:25:33 [INFO] 请求的格式: {'html'} (api.py:81)
2024-11-29 14:25:33 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'} (api.py:89)
2024-11-29 14:25:33 [INFO] 最终返回的文件列表: [FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', size=2229479, format='html')] (api.py:93)
2024-11-29 14:25:55 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:25:55 [INFO] 使用 微信公众号 解析器 (blog_parser.py:36)
2024-11-29 14:25:56 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'js_name'} (base_parser.py:91)
2024-11-29 14:25:56 [DEBUG] 尝试选择器: tag=em, attrs={'id': 'publish_time'} (base_parser.py:91)
2024-11-29 14:25:56 [INFO] 原始日期文本： (base_parser.py:169)
2024-11-29 14:25:56 [DEBUG] 尝试选择器: tag=h1, attrs={'id': 'activity-name'} (base_parser.py:91)
2024-11-29 14:25:56 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'js_content'} (base_parser.py:91)
2024-11-29 14:25:56 [DEBUG] 内容：<div class="rich_media_content js_underline_content autoTypeSetting24psection" id="js_content" style="visibility: hidden; opacity: 0; "><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去的十多年中，我曾使用并设计过各种类型的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。尽管它们各有特色，但总免不了一些使用上的不便之处。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我的第一次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">开发经历，可以追溯到十年前，那时我刚开始从事游戏开发，参与制作了一款</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">TPS</span></code><span leaf="">（第三人称射击）游戏。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时的服务器架构采用分布式设计，并结合多语言开发。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个分布式系统中，与玩家个人数据交互的进程被称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Info</span></code><span leaf="">进程，相关的功能由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Java</span></code><span leaf="">实现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Gateway</span></code><span leaf="">和核心玩法逻辑则由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">编写。两者之间的通信主要依赖于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的具体使用方式已经有些模糊，但我依然记得它的基本形式，大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class="code-snippet__js" data-lang="java"><code><span leaf=""><span class="code-snippet__keyword">void</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__title">CallRet</span><span class="code-snippet__params">(sockbuffer buf)</span><span class="code-snippet__plaintext"> </span></span></code><code><span leaf=""><span class="code-snippet__plaintext">{</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint32</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">ret</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadInt32()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint64</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">uid</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadUint64()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    ...</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">}</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">sockbuffer buf;</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt32(args1)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt8(args2)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">rpc::Call(buf.Bytes(), CallRet)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种早期的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计可以说是非常简陋，甚至有些“原始”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">它的序列化方式完全依赖手工编码（我印象最深的是经常需要和Java程序那边反复确认参数的大小和顺序是否一致）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">此外，回调函数的设计也相当局限，甚至不支持闭包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">消息机制是建立在普通的消息收发基础之上的。仅仅在消息协议中额外加了一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session</span></code><span leaf="">字段。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc::Call</span></code><span leaf="">时，系统会为该调用分配一个短期内不重复的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。分配的逻辑也很直接，只是用一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session_idx</span></code><span leaf="">变量自增而已，确保在5秒内不会重复。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然后将</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">和对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">放到一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">map</span></code><span leaf="">中去，之后就让出了所有</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CPU</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">被调用方</span></strong><span leaf="">响应时，它会将对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">字段一并返回。这样，</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">调用方</span></strong><span leaf="">就能通过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">找到对应的回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">并执行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了处理超时情况，调用方还实现了一个简单的定时器，每秒检查是否有超时的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">如果发现某个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">超时，就直接将其删除（这意味着超时的请求永远不会返回）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">虽然这种</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的使用方式有些简陋，但对于刚入行的我而言，它的思路却让我醍醐灌顶。并在后面近十年里一直影响着我。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf=""><br/></span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">后来，我也简单接触过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">但在实际使用中发现：它在发送请求协议后，会在当前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">socket</span></code><span leaf="">上</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">同步</span></strong><span leaf="">等待协议返回。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">对于一个典型的“单线程多进程”游戏服务器而言，这种设计会显著降低并发处理能力。因此，我没有进一步深入研究</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我开始参与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">游戏的开发。由于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">的战斗逻辑通常是由服务器自动完成的，而这些战斗计算往往在高峰期（如攻城战）时会占用大量资源，容易导致其他操作（例如武将培养、抽卡等）出现阻塞。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这一问题，我决定将大地图的核心玩法逻辑从主进程中剥离，独立到单独的进程中运行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">既然采用多进程来拆分业务逻辑，自然需要引入</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">来简化进程间通信，提升开发效率。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我结合之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">经验，开始探索实现一个便捷、高效的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我借鉴了之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">思路，最终设计出来的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="cpp"><code><span leaf=""><span class="code-snippet__function"><span class="code-snippet__type">uint32_t</span></span><span class="code-snippet__function"><span class="code-snippet__plaintext"> </span></span><span class="code-snippet__function"><span class="code-snippet__title">rpc_call</span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext">(zprotobuf::wirep &amp;req, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">void</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> (*cb)(MsgHeader *m, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">uint32_t</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> session))</span></span></span><span class="code-snippet__plaintext">;</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计中，我修改了超时功能：如果消息超过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">5</span></code><span leaf="">秒仍未返回，回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">cb</span></code><span leaf="">依然会被调用，但此时传递的参数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">m</span></code><span leaf="">会被置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">nullptr</span></code><span leaf="">，以便调用方可以处理超时后的撤销逻辑或补偿措施。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在从零开始设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的过程中，我遇到了一个以前被忽视的问题：如何有效区分双向通信中的请求与响应。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">具体来说，如果</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">两个进程只通过一条连接</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">通信，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">从</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">中读到的数据，到底是来自</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">的请求，还是对</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">先前请求的响应？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终我选择了一个看似简单的方案：让</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">之间各自建立一条独立的连接。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">也就是说，由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A Call B</span></code><span leaf="">，而由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B Call A</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个设计选择在后续引发了一个严重的问题：由于A和B的通信不再依赖同一条连接，因此消息的</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">FIFO（First In First Out）</span></strong><span leaf="">性质被破坏了。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在某些特殊场景下，客户端默认我们提供的消息顺序与服务器上的事件发生顺序一致，而这种假设在当前设计中可能被打破。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个问题非常隐蔽，尤其是在内网环境中。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">等到问题真正暴露时，项目已进入功能开发的后期阶段，箭在弦上，只能尝试绕过这个限制来规避问题。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">附带一提，这个大地图核心玩法的进程是用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">编写的，其</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块通过将通信逻辑封装在</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">coroutine</span></code><span leaf="">中实现了同步式调用。虽然实现形式与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">略有不同，但其基本机制是一致的，因此不再赘述。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我换了一份工作，开始使用Go语言开发游戏服务器。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时公司的服务器框架仍然延续了“单线程多进程”的设计理念，不过进程的概念被</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">所替代，主体业务逻辑依然运行在主</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">上。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这种架构下，分布式通信的实现方式也必须适配“单线程多进程”的运行模型，而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">的同步阻塞模式显然不适合这种设计。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，在开发跨服业务时，我们采用了纯粹的消息传递方式。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种方式虽然简单，但也有明显的缺点：A进程向B进程发送消息后，还需要专门为B返回的响应编写一个单独的处理函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种上下文的割裂会让代码变得不直观，特别是在需要两次甚至三次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Call</span></code><span leaf="">时，问题更加突出。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这个问题，我再次借鉴了之前</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">的设计思路，构建了一个适用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Go</span></code><span leaf="">语言环境的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。最终的接口设计大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="go"><code><span leaf=""><span class="code-snippet__plaintext">rpc.Call(req protobuf.Message, fn </span><span class="code-snippet__function"><span class="code-snippet__keyword">func</span></span><span class="code-snippet__function"><span class="code-snippet__params">(ack protobuf.Message)</span></span><span class="code-snippet__plaintext">)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块同样实现了超时逻辑：如果响应超过指定时间未返回，则会通过调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn(nil)</span></code><span leaf="">返回一个空值，以便调用方能够处理超时场景。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从表面上看，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">与我过去的实现没有太大差别。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，由于跨服通信与游戏服之间的链接机制是固定的（两个进程之间始终只有一条链接），我不得不解决一个问题：如何在同一条链接上区分请求包和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">实际上，即使链接机制允许修改，我也不太倾向于采用多链接方案。原因如前文所述，多链接容易导致消息顺序问题，特别是在对消息顺序有严格要求的场景下。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最初，我的想法是利用协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">来区分请求和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因为请求包和响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">一定是不同的，我只需要针对响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">做标记（打桩），然后将这些消息流转到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块进行处理即可。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">大致实现方式如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang=""><code><span leaf=""><span class="code-snippet__plaintext">router.register(xxx_cmd_id, rpc.dispatch)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种设计，当链接上接收到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">xxx_cmd_id</span></code><span leaf="">时，会自动调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">，从而识别对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">并触发相应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn</span></code><span leaf="">回调函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">事实上，这种方式让我用了相当长一段时间，它运行稳定，表现良好。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，随着跨服业务的复杂度不断提高，打桩函数的维护成本也在逐渐增加。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次新增或修改响应协议，都需要更新打桩逻辑，这让我不得不开始寻找新的请求与响应识别方案。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终，我发现协议数据中有一个未使用的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">位。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我决定将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">用于区分响应包和请求包：如果是响应包，就将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">；当接收数据包时，先检查这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">，如果为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">，则直接调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">处理响应，否则进入正常的消息处理流程。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个简单的改动彻底终结了“打桩时代”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">总的来看，这版</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的设计除了保留回调机制外，几乎解决了我在以往经历中遇到的所有痛点。（是的，从我用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">开始，我就不喜欢回调式的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">了，因为回调会传染）。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">由于这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是在跨服机制的上层构建的，因此它不再，也无法直接关注底层的链接状态。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">正因为如此，即便一个游戏服链接了几十个跨服进程，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的实例依然只有一个。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">相比之前的设计，这次的思路完全不同。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去，我通常会为每个链接绑定一个独立的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">对象，而这次“思维定式”的打破让我对基于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">机制的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">有了更为全局的认识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我开始反思：</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是否真的有必要关注链接？如果不再关心底层的链接状态，最终的设计会是什么样子？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我进行了几个月的探索与思考，最终找到了一种更抽象的设计思路。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在一个分布式的游戏服务器系统中，进程之间的操作必然会被隔离开，不可能直接操作同一份玩家或全服数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这一特性为我们提供了一个关键的设计契机：为每个进程分配一个唯一的标识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">假设这个标识称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">，我们可以基于此重新设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口，新的接口可能如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="bash"><code><span leaf=""><span class="code-snippet__built_in">local</span><span class="code-snippet__plaintext"> ack = rpc.call(workerid, req)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当我们选择忽略链接的存在后，分布式系统中的服务发现与连接建立也可以独立成为一个独立的模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">例如</span><span leaf="">我最近的实验项目</span><span leaf="">, 就使用了etcd来实现服务发现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种设计思路受到了一些边车模式（</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Sidecar Pattern</span></code><span leaf="">）的启发，通过抽象链接管理，将其从业务逻辑中剥离出来。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从业务角度来看，我们无需过于关注链接的瞬时断开与重建，因为这些事件并不会对分布式系统的一致性产生任何实际帮助。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">与我们的业务密切相关，因为它决定了每个进程将处理分布式系统中的哪部分数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">代表一个特定的进程，它负责处理特定范围内的任务或数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">不仅是进程的标识符，更是数据路由与处理的关键。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种方式，我们能够将分布式系统的资源划分与调度与业务需求紧密结合，而链接则可以忽视。</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div> (base_parser.py:366)
2024-11-29 14:25:56 [INFO] 作者：重归混沌 (base_parser.py:367)
2024-11-29 14:25:56 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 14:25:56 [INFO] 标题：谈谈游戏服务器中RPC模块的设计 (base_parser.py:369)
2024-11-29 14:25:56 [INFO] 保存文件夹：temp\7982292402252280604\微信公众号-重归混沌 (base_parser.py:256)
2024-11-29 14:25:59 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:25:59 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:233)
2024-11-29 14:25:59 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:25:59 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:25:59 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:25:59 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:25:59 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:25:59 [INFO] 保存目录: temp\7982292402252280604\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:25:59 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:25:59 [INFO] Markdown文件已保存: temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (save_utils.py:127)
2024-11-29 14:25:59 [INFO] 添加文件到文件列表：temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:65)
2024-11-29 14:25:59 [INFO] 原始文件列表: [{'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7982292402252280604\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'}] (api.py:70)
2024-11-29 14:25:59 [INFO] 请求的格式: {'md'} (api.py:81)
2024-11-29 14:25:59 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'} (api.py:89)
2024-11-29 14:25:59 [INFO] 最终返回的文件列表: [FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', size=10646, format='md')] (api.py:93)
2024-11-29 14:28:38 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:28:38 [INFO] 使用 微信公众号 解析器 (blog_parser.py:36)
2024-11-29 14:28:39 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'js_name'} (base_parser.py:91)
2024-11-29 14:28:39 [DEBUG] 尝试选择器: tag=em, attrs={'id': 'publish_time'} (base_parser.py:91)
2024-11-29 14:28:39 [INFO] 原始日期文本： (base_parser.py:169)
2024-11-29 14:28:39 [DEBUG] 尝试选择器: tag=h1, attrs={'id': 'activity-name'} (base_parser.py:91)
2024-11-29 14:28:39 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'js_content'} (base_parser.py:91)
2024-11-29 14:28:39 [DEBUG] 内容：<div class="rich_media_content js_underline_content autoTypeSetting24psection" id="js_content" style="visibility: hidden; opacity: 0; "><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去的十多年中，我曾使用并设计过各种类型的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。尽管它们各有特色，但总免不了一些使用上的不便之处。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我的第一次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">开发经历，可以追溯到十年前，那时我刚开始从事游戏开发，参与制作了一款</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">TPS</span></code><span leaf="">（第三人称射击）游戏。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时的服务器架构采用分布式设计，并结合多语言开发。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个分布式系统中，与玩家个人数据交互的进程被称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Info</span></code><span leaf="">进程，相关的功能由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Java</span></code><span leaf="">实现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Gateway</span></code><span leaf="">和核心玩法逻辑则由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">编写。两者之间的通信主要依赖于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的具体使用方式已经有些模糊，但我依然记得它的基本形式，大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class="code-snippet__js" data-lang="java"><code><span leaf=""><span class="code-snippet__keyword">void</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__title">CallRet</span><span class="code-snippet__params">(sockbuffer buf)</span><span class="code-snippet__plaintext"> </span></span></code><code><span leaf=""><span class="code-snippet__plaintext">{</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint32</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">ret</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadInt32()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint64</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">uid</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadUint64()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    ...</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">}</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">sockbuffer buf;</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt32(args1)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt8(args2)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">rpc::Call(buf.Bytes(), CallRet)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种早期的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计可以说是非常简陋，甚至有些“原始”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">它的序列化方式完全依赖手工编码（我印象最深的是经常需要和Java程序那边反复确认参数的大小和顺序是否一致）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">此外，回调函数的设计也相当局限，甚至不支持闭包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">消息机制是建立在普通的消息收发基础之上的。仅仅在消息协议中额外加了一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session</span></code><span leaf="">字段。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc::Call</span></code><span leaf="">时，系统会为该调用分配一个短期内不重复的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。分配的逻辑也很直接，只是用一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session_idx</span></code><span leaf="">变量自增而已，确保在5秒内不会重复。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然后将</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">和对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">放到一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">map</span></code><span leaf="">中去，之后就让出了所有</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CPU</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">被调用方</span></strong><span leaf="">响应时，它会将对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">字段一并返回。这样，</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">调用方</span></strong><span leaf="">就能通过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">找到对应的回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">并执行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了处理超时情况，调用方还实现了一个简单的定时器，每秒检查是否有超时的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">如果发现某个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">超时，就直接将其删除（这意味着超时的请求永远不会返回）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">虽然这种</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的使用方式有些简陋，但对于刚入行的我而言，它的思路却让我醍醐灌顶。并在后面近十年里一直影响着我。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf=""><br/></span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">后来，我也简单接触过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">但在实际使用中发现：它在发送请求协议后，会在当前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">socket</span></code><span leaf="">上</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">同步</span></strong><span leaf="">等待协议返回。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">对于一个典型的“单线程多进程”游戏服务器而言，这种设计会显著降低并发处理能力。因此，我没有进一步深入研究</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我开始参与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">游戏的开发。由于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">的战斗逻辑通常是由服务器自动完成的，而这些战斗计算往往在高峰期（如攻城战）时会占用大量资源，容易导致其他操作（例如武将培养、抽卡等）出现阻塞。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这一问题，我决定将大地图的核心玩法逻辑从主进程中剥离，独立到单独的进程中运行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">既然采用多进程来拆分业务逻辑，自然需要引入</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">来简化进程间通信，提升开发效率。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我结合之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">经验，开始探索实现一个便捷、高效的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我借鉴了之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">思路，最终设计出来的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="cpp"><code><span leaf=""><span class="code-snippet__function"><span class="code-snippet__type">uint32_t</span></span><span class="code-snippet__function"><span class="code-snippet__plaintext"> </span></span><span class="code-snippet__function"><span class="code-snippet__title">rpc_call</span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext">(zprotobuf::wirep &amp;req, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">void</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> (*cb)(MsgHeader *m, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">uint32_t</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> session))</span></span></span><span class="code-snippet__plaintext">;</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计中，我修改了超时功能：如果消息超过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">5</span></code><span leaf="">秒仍未返回，回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">cb</span></code><span leaf="">依然会被调用，但此时传递的参数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">m</span></code><span leaf="">会被置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">nullptr</span></code><span leaf="">，以便调用方可以处理超时后的撤销逻辑或补偿措施。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在从零开始设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的过程中，我遇到了一个以前被忽视的问题：如何有效区分双向通信中的请求与响应。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">具体来说，如果</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">两个进程只通过一条连接</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">通信，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">从</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">中读到的数据，到底是来自</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">的请求，还是对</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">先前请求的响应？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终我选择了一个看似简单的方案：让</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">之间各自建立一条独立的连接。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">也就是说，由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A Call B</span></code><span leaf="">，而由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B Call A</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个设计选择在后续引发了一个严重的问题：由于A和B的通信不再依赖同一条连接，因此消息的</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">FIFO（First In First Out）</span></strong><span leaf="">性质被破坏了。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在某些特殊场景下，客户端默认我们提供的消息顺序与服务器上的事件发生顺序一致，而这种假设在当前设计中可能被打破。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个问题非常隐蔽，尤其是在内网环境中。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">等到问题真正暴露时，项目已进入功能开发的后期阶段，箭在弦上，只能尝试绕过这个限制来规避问题。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">附带一提，这个大地图核心玩法的进程是用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">编写的，其</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块通过将通信逻辑封装在</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">coroutine</span></code><span leaf="">中实现了同步式调用。虽然实现形式与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">略有不同，但其基本机制是一致的，因此不再赘述。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我换了一份工作，开始使用Go语言开发游戏服务器。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时公司的服务器框架仍然延续了“单线程多进程”的设计理念，不过进程的概念被</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">所替代，主体业务逻辑依然运行在主</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">上。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这种架构下，分布式通信的实现方式也必须适配“单线程多进程”的运行模型，而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">的同步阻塞模式显然不适合这种设计。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，在开发跨服业务时，我们采用了纯粹的消息传递方式。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种方式虽然简单，但也有明显的缺点：A进程向B进程发送消息后，还需要专门为B返回的响应编写一个单独的处理函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种上下文的割裂会让代码变得不直观，特别是在需要两次甚至三次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Call</span></code><span leaf="">时，问题更加突出。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这个问题，我再次借鉴了之前</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">的设计思路，构建了一个适用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Go</span></code><span leaf="">语言环境的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。最终的接口设计大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="go"><code><span leaf=""><span class="code-snippet__plaintext">rpc.Call(req protobuf.Message, fn </span><span class="code-snippet__function"><span class="code-snippet__keyword">func</span></span><span class="code-snippet__function"><span class="code-snippet__params">(ack protobuf.Message)</span></span><span class="code-snippet__plaintext">)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块同样实现了超时逻辑：如果响应超过指定时间未返回，则会通过调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn(nil)</span></code><span leaf="">返回一个空值，以便调用方能够处理超时场景。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从表面上看，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">与我过去的实现没有太大差别。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，由于跨服通信与游戏服之间的链接机制是固定的（两个进程之间始终只有一条链接），我不得不解决一个问题：如何在同一条链接上区分请求包和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">实际上，即使链接机制允许修改，我也不太倾向于采用多链接方案。原因如前文所述，多链接容易导致消息顺序问题，特别是在对消息顺序有严格要求的场景下。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最初，我的想法是利用协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">来区分请求和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因为请求包和响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">一定是不同的，我只需要针对响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">做标记（打桩），然后将这些消息流转到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块进行处理即可。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">大致实现方式如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang=""><code><span leaf=""><span class="code-snippet__plaintext">router.register(xxx_cmd_id, rpc.dispatch)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种设计，当链接上接收到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">xxx_cmd_id</span></code><span leaf="">时，会自动调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">，从而识别对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">并触发相应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn</span></code><span leaf="">回调函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">事实上，这种方式让我用了相当长一段时间，它运行稳定，表现良好。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，随着跨服业务的复杂度不断提高，打桩函数的维护成本也在逐渐增加。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次新增或修改响应协议，都需要更新打桩逻辑，这让我不得不开始寻找新的请求与响应识别方案。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终，我发现协议数据中有一个未使用的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">位。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我决定将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">用于区分响应包和请求包：如果是响应包，就将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">；当接收数据包时，先检查这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">，如果为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">，则直接调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">处理响应，否则进入正常的消息处理流程。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个简单的改动彻底终结了“打桩时代”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">总的来看，这版</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的设计除了保留回调机制外，几乎解决了我在以往经历中遇到的所有痛点。（是的，从我用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">开始，我就不喜欢回调式的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">了，因为回调会传染）。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">由于这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是在跨服机制的上层构建的，因此它不再，也无法直接关注底层的链接状态。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">正因为如此，即便一个游戏服链接了几十个跨服进程，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的实例依然只有一个。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">相比之前的设计，这次的思路完全不同。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去，我通常会为每个链接绑定一个独立的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">对象，而这次“思维定式”的打破让我对基于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">机制的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">有了更为全局的认识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我开始反思：</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是否真的有必要关注链接？如果不再关心底层的链接状态，最终的设计会是什么样子？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我进行了几个月的探索与思考，最终找到了一种更抽象的设计思路。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在一个分布式的游戏服务器系统中，进程之间的操作必然会被隔离开，不可能直接操作同一份玩家或全服数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这一特性为我们提供了一个关键的设计契机：为每个进程分配一个唯一的标识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">假设这个标识称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">，我们可以基于此重新设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口，新的接口可能如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="bash"><code><span leaf=""><span class="code-snippet__built_in">local</span><span class="code-snippet__plaintext"> ack = rpc.call(workerid, req)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当我们选择忽略链接的存在后，分布式系统中的服务发现与连接建立也可以独立成为一个独立的模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">例如</span><span leaf="">我最近的实验项目</span><span leaf="">, 就使用了etcd来实现服务发现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种设计思路受到了一些边车模式（</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Sidecar Pattern</span></code><span leaf="">）的启发，通过抽象链接管理，将其从业务逻辑中剥离出来。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从业务角度来看，我们无需过于关注链接的瞬时断开与重建，因为这些事件并不会对分布式系统的一致性产生任何实际帮助。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">与我们的业务密切相关，因为它决定了每个进程将处理分布式系统中的哪部分数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">代表一个特定的进程，它负责处理特定范围内的任务或数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">不仅是进程的标识符，更是数据路由与处理的关键。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种方式，我们能够将分布式系统的资源划分与调度与业务需求紧密结合，而链接则可以忽视。</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div> (base_parser.py:366)
2024-11-29 14:28:39 [INFO] 作者：重归混沌 (base_parser.py:367)
2024-11-29 14:28:39 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 14:28:39 [INFO] 标题：谈谈游戏服务器中RPC模块的设计 (base_parser.py:369)
2024-11-29 14:28:39 [INFO] 保存文件夹：temp\7982292402252280604\微信公众号-重归混沌 (base_parser.py:256)
2024-11-29 14:28:43 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:28:43 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:233)
2024-11-29 14:28:43 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:28:43 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:28:43 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:28:43 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:28:43 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:28:43 [INFO] 保存目录: temp\7982292402252280604\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:28:43 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:28:43 [INFO] HTML文件已保存: temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (save_utils.py:91)
2024-11-29 14:28:43 [INFO] 添加文件到文件列表：temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:65)
2024-11-29 14:28:43 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:233)
2024-11-29 14:28:43 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:28:43 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:28:43 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:28:43 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:28:43 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:28:43 [INFO] 保存目录: temp\7982292402252280604\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:28:43 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:28:43 [INFO] Markdown文件已保存: temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (save_utils.py:127)
2024-11-29 14:28:43 [INFO] 添加文件到文件列表：temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:65)
2024-11-29 14:28:43 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (base_parser.py:233)
2024-11-29 14:28:43 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:28:43 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:28:43 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:28:43 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:28:43 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:28:43 [INFO] 保存目录: temp\7982292402252280604\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:28:43 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:28:43 [INFO] MHTML文件已保存: temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (save_utils.py:265)
2024-11-29 14:28:43 [INFO] 添加文件到文件列表：temp\7982292402252280604\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (base_parser.py:65)
2024-11-29 14:28:43 [INFO] 原始文件列表: [{'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7982292402252280604\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'}, {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7982292402252280604\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'}, {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7982292402252280604\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', 'size': 2354305, 'format': 'mhtml'}] (api.py:70)
2024-11-29 14:28:43 [INFO] 请求的格式: {'html', 'md', 'mhtml'} (api.py:81)
2024-11-29 14:28:43 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'} (api.py:89)
2024-11-29 14:28:43 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'} (api.py:89)
2024-11-29 14:28:43 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', 'size': 2354305, 'format': 'mhtml'} (api.py:89)
2024-11-29 14:28:43 [INFO] 最终返回的文件列表: [FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', size=2229479, format='html'), FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', size=10646, format='md'), FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7982292402252280604/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', size=2354305, format='mhtml')] (api.py:93)
2024-11-29 14:38:36 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:38:36 [INFO] 使用 微信公众号 解析器 (blog_parser.py:36)
2024-11-29 14:38:37 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'js_name'} (base_parser.py:91)
2024-11-29 14:38:37 [DEBUG] 尝试选择器: tag=em, attrs={'id': 'publish_time'} (base_parser.py:91)
2024-11-29 14:38:37 [INFO] 原始日期文本： (base_parser.py:169)
2024-11-29 14:38:37 [DEBUG] 尝试选择器: tag=h1, attrs={'id': 'activity-name'} (base_parser.py:91)
2024-11-29 14:38:37 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'js_content'} (base_parser.py:91)
2024-11-29 14:38:37 [DEBUG] 内容：<div class="rich_media_content js_underline_content autoTypeSetting24psection" id="js_content" style="visibility: hidden; opacity: 0; "><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去的十多年中，我曾使用并设计过各种类型的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。尽管它们各有特色，但总免不了一些使用上的不便之处。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我的第一次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">开发经历，可以追溯到十年前，那时我刚开始从事游戏开发，参与制作了一款</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">TPS</span></code><span leaf="">（第三人称射击）游戏。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时的服务器架构采用分布式设计，并结合多语言开发。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个分布式系统中，与玩家个人数据交互的进程被称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Info</span></code><span leaf="">进程，相关的功能由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Java</span></code><span leaf="">实现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Gateway</span></code><span leaf="">和核心玩法逻辑则由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">编写。两者之间的通信主要依赖于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的具体使用方式已经有些模糊，但我依然记得它的基本形式，大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class="code-snippet__js" data-lang="java"><code><span leaf=""><span class="code-snippet__keyword">void</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__title">CallRet</span><span class="code-snippet__params">(sockbuffer buf)</span><span class="code-snippet__plaintext"> </span></span></code><code><span leaf=""><span class="code-snippet__plaintext">{</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint32</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">ret</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadInt32()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint64</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">uid</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadUint64()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    ...</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">}</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">sockbuffer buf;</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt32(args1)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt8(args2)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">rpc::Call(buf.Bytes(), CallRet)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种早期的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计可以说是非常简陋，甚至有些“原始”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">它的序列化方式完全依赖手工编码（我印象最深的是经常需要和Java程序那边反复确认参数的大小和顺序是否一致）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">此外，回调函数的设计也相当局限，甚至不支持闭包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">消息机制是建立在普通的消息收发基础之上的。仅仅在消息协议中额外加了一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session</span></code><span leaf="">字段。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc::Call</span></code><span leaf="">时，系统会为该调用分配一个短期内不重复的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。分配的逻辑也很直接，只是用一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session_idx</span></code><span leaf="">变量自增而已，确保在5秒内不会重复。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然后将</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">和对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">放到一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">map</span></code><span leaf="">中去，之后就让出了所有</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CPU</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">被调用方</span></strong><span leaf="">响应时，它会将对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">字段一并返回。这样，</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">调用方</span></strong><span leaf="">就能通过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">找到对应的回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">并执行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了处理超时情况，调用方还实现了一个简单的定时器，每秒检查是否有超时的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">如果发现某个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">超时，就直接将其删除（这意味着超时的请求永远不会返回）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">虽然这种</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的使用方式有些简陋，但对于刚入行的我而言，它的思路却让我醍醐灌顶。并在后面近十年里一直影响着我。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf=""><br/></span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">后来，我也简单接触过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">但在实际使用中发现：它在发送请求协议后，会在当前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">socket</span></code><span leaf="">上</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">同步</span></strong><span leaf="">等待协议返回。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">对于一个典型的“单线程多进程”游戏服务器而言，这种设计会显著降低并发处理能力。因此，我没有进一步深入研究</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我开始参与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">游戏的开发。由于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">的战斗逻辑通常是由服务器自动完成的，而这些战斗计算往往在高峰期（如攻城战）时会占用大量资源，容易导致其他操作（例如武将培养、抽卡等）出现阻塞。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这一问题，我决定将大地图的核心玩法逻辑从主进程中剥离，独立到单独的进程中运行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">既然采用多进程来拆分业务逻辑，自然需要引入</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">来简化进程间通信，提升开发效率。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我结合之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">经验，开始探索实现一个便捷、高效的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我借鉴了之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">思路，最终设计出来的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="cpp"><code><span leaf=""><span class="code-snippet__function"><span class="code-snippet__type">uint32_t</span></span><span class="code-snippet__function"><span class="code-snippet__plaintext"> </span></span><span class="code-snippet__function"><span class="code-snippet__title">rpc_call</span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext">(zprotobuf::wirep &amp;req, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">void</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> (*cb)(MsgHeader *m, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">uint32_t</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> session))</span></span></span><span class="code-snippet__plaintext">;</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计中，我修改了超时功能：如果消息超过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">5</span></code><span leaf="">秒仍未返回，回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">cb</span></code><span leaf="">依然会被调用，但此时传递的参数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">m</span></code><span leaf="">会被置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">nullptr</span></code><span leaf="">，以便调用方可以处理超时后的撤销逻辑或补偿措施。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在从零开始设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的过程中，我遇到了一个以前被忽视的问题：如何有效区分双向通信中的请求与响应。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">具体来说，如果</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">两个进程只通过一条连接</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">通信，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">从</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">中读到的数据，到底是来自</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">的请求，还是对</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">先前请求的响应？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终我选择了一个看似简单的方案：让</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">之间各自建立一条独立的连接。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">也就是说，由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A Call B</span></code><span leaf="">，而由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B Call A</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个设计选择在后续引发了一个严重的问题：由于A和B的通信不再依赖同一条连接，因此消息的</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">FIFO（First In First Out）</span></strong><span leaf="">性质被破坏了。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在某些特殊场景下，客户端默认我们提供的消息顺序与服务器上的事件发生顺序一致，而这种假设在当前设计中可能被打破。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个问题非常隐蔽，尤其是在内网环境中。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">等到问题真正暴露时，项目已进入功能开发的后期阶段，箭在弦上，只能尝试绕过这个限制来规避问题。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">附带一提，这个大地图核心玩法的进程是用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">编写的，其</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块通过将通信逻辑封装在</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">coroutine</span></code><span leaf="">中实现了同步式调用。虽然实现形式与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">略有不同，但其基本机制是一致的，因此不再赘述。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我换了一份工作，开始使用Go语言开发游戏服务器。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时公司的服务器框架仍然延续了“单线程多进程”的设计理念，不过进程的概念被</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">所替代，主体业务逻辑依然运行在主</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">上。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这种架构下，分布式通信的实现方式也必须适配“单线程多进程”的运行模型，而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">的同步阻塞模式显然不适合这种设计。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，在开发跨服业务时，我们采用了纯粹的消息传递方式。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种方式虽然简单，但也有明显的缺点：A进程向B进程发送消息后，还需要专门为B返回的响应编写一个单独的处理函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种上下文的割裂会让代码变得不直观，特别是在需要两次甚至三次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Call</span></code><span leaf="">时，问题更加突出。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这个问题，我再次借鉴了之前</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">的设计思路，构建了一个适用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Go</span></code><span leaf="">语言环境的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。最终的接口设计大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="go"><code><span leaf=""><span class="code-snippet__plaintext">rpc.Call(req protobuf.Message, fn </span><span class="code-snippet__function"><span class="code-snippet__keyword">func</span></span><span class="code-snippet__function"><span class="code-snippet__params">(ack protobuf.Message)</span></span><span class="code-snippet__plaintext">)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块同样实现了超时逻辑：如果响应超过指定时间未返回，则会通过调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn(nil)</span></code><span leaf="">返回一个空值，以便调用方能够处理超时场景。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从表面上看，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">与我过去的实现没有太大差别。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，由于跨服通信与游戏服之间的链接机制是固定的（两个进程之间始终只有一条链接），我不得不解决一个问题：如何在同一条链接上区分请求包和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">实际上，即使链接机制允许修改，我也不太倾向于采用多链接方案。原因如前文所述，多链接容易导致消息顺序问题，特别是在对消息顺序有严格要求的场景下。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最初，我的想法是利用协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">来区分请求和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因为请求包和响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">一定是不同的，我只需要针对响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">做标记（打桩），然后将这些消息流转到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块进行处理即可。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">大致实现方式如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang=""><code><span leaf=""><span class="code-snippet__plaintext">router.register(xxx_cmd_id, rpc.dispatch)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种设计，当链接上接收到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">xxx_cmd_id</span></code><span leaf="">时，会自动调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">，从而识别对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">并触发相应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn</span></code><span leaf="">回调函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">事实上，这种方式让我用了相当长一段时间，它运行稳定，表现良好。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，随着跨服业务的复杂度不断提高，打桩函数的维护成本也在逐渐增加。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次新增或修改响应协议，都需要更新打桩逻辑，这让我不得不开始寻找新的请求与响应识别方案。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终，我发现协议数据中有一个未使用的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">位。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我决定将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">用于区分响应包和请求包：如果是响应包，就将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">；当接收数据包时，先检查这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">，如果为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">，则直接调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">处理响应，否则进入正常的消息处理流程。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个简单的改动彻底终结了“打桩时代”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">总的来看，这版</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的设计除了保留回调机制外，几乎解决了我在以往经历中遇到的所有痛点。（是的，从我用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">开始，我就不喜欢回调式的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">了，因为回调会传染）。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">由于这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是在跨服机制的上层构建的，因此它不再，也无法直接关注底层的链接状态。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">正因为如此，即便一个游戏服链接了几十个跨服进程，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的实例依然只有一个。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">相比之前的设计，这次的思路完全不同。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去，我通常会为每个链接绑定一个独立的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">对象，而这次“思维定式”的打破让我对基于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">机制的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">有了更为全局的认识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我开始反思：</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是否真的有必要关注链接？如果不再关心底层的链接状态，最终的设计会是什么样子？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我进行了几个月的探索与思考，最终找到了一种更抽象的设计思路。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在一个分布式的游戏服务器系统中，进程之间的操作必然会被隔离开，不可能直接操作同一份玩家或全服数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这一特性为我们提供了一个关键的设计契机：为每个进程分配一个唯一的标识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">假设这个标识称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">，我们可以基于此重新设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口，新的接口可能如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="bash"><code><span leaf=""><span class="code-snippet__built_in">local</span><span class="code-snippet__plaintext"> ack = rpc.call(workerid, req)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当我们选择忽略链接的存在后，分布式系统中的服务发现与连接建立也可以独立成为一个独立的模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">例如</span><span leaf="">我最近的实验项目</span><span leaf="">, 就使用了etcd来实现服务发现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种设计思路受到了一些边车模式（</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Sidecar Pattern</span></code><span leaf="">）的启发，通过抽象链接管理，将其从业务逻辑中剥离出来。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从业务角度来看，我们无需过于关注链接的瞬时断开与重建，因为这些事件并不会对分布式系统的一致性产生任何实际帮助。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">与我们的业务密切相关，因为它决定了每个进程将处理分布式系统中的哪部分数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">代表一个特定的进程，它负责处理特定范围内的任务或数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">不仅是进程的标识符，更是数据路由与处理的关键。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种方式，我们能够将分布式系统的资源划分与调度与业务需求紧密结合，而链接则可以忽视。</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div> (base_parser.py:366)
2024-11-29 14:38:37 [INFO] 作者：重归混沌 (base_parser.py:367)
2024-11-29 14:38:37 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 14:38:37 [INFO] 标题：谈谈游戏服务器中RPC模块的设计 (base_parser.py:369)
2024-11-29 14:38:37 [INFO] 保存文件夹：temp\7430869615901530789\微信公众号-重归混沌 (base_parser.py:256)
2024-11-29 14:38:40 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:38:40 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:233)
2024-11-29 14:38:40 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:38:40 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:38:40 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:38:40 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:38:40 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:38:40 [INFO] 保存目录: temp\7430869615901530789\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:38:40 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:38:40 [INFO] HTML文件已保存: temp\7430869615901530789\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (save_utils.py:91)
2024-11-29 14:38:40 [INFO] 添加文件到文件列表：temp\7430869615901530789\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:65)
2024-11-29 14:38:40 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:233)
2024-11-29 14:38:40 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:38:40 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:38:40 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:38:40 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:38:40 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:38:40 [INFO] 保存目录: temp\7430869615901530789\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:38:40 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:38:40 [INFO] Markdown文件已保存: temp\7430869615901530789\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (save_utils.py:127)
2024-11-29 14:38:40 [INFO] 添加文件到文件列表：temp\7430869615901530789\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:65)
2024-11-29 14:38:40 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (base_parser.py:233)
2024-11-29 14:38:40 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:38:40 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:38:40 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:38:40 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:38:40 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:38:40 [INFO] 保存目录: temp\7430869615901530789\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:38:40 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:38:41 [INFO] MHTML文件已保存: temp\7430869615901530789\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (save_utils.py:265)
2024-11-29 14:38:41 [INFO] 添加文件到文件列表：temp\7430869615901530789\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (base_parser.py:65)
2024-11-29 14:38:41 [INFO] 原始文件列表: [{'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7430869615901530789\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'}, {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7430869615901530789\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'}, {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7430869615901530789\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', 'size': 2354305, 'format': 'mhtml'}] (api.py:127)
2024-11-29 14:38:41 [INFO] 请求的格式: {'md', 'mhtml', 'html'} (api.py:138)
2024-11-29 14:38:41 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7430869615901530789/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'} (api.py:146)
2024-11-29 14:38:41 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7430869615901530789/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'} (api.py:146)
2024-11-29 14:38:41 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7430869615901530789/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', 'size': 2354305, 'format': 'mhtml'} (api.py:146)
2024-11-29 14:38:41 [INFO] 最终返回的文件列表: [FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7430869615901530789/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', size=2229479, format='html'), FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7430869615901530789/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', size=10646, format='md'), FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7430869615901530789/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', size=2354305, format='mhtml')] (api.py:150)
2024-11-29 14:40:52 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:40:52 [INFO] 使用 微信公众号 解析器 (blog_parser.py:36)
2024-11-29 14:40:53 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'js_name'} (base_parser.py:91)
2024-11-29 14:40:53 [DEBUG] 尝试选择器: tag=em, attrs={'id': 'publish_time'} (base_parser.py:91)
2024-11-29 14:40:53 [INFO] 原始日期文本： (base_parser.py:169)
2024-11-29 14:40:53 [DEBUG] 尝试选择器: tag=h1, attrs={'id': 'activity-name'} (base_parser.py:91)
2024-11-29 14:40:53 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'js_content'} (base_parser.py:91)
2024-11-29 14:40:53 [DEBUG] 内容：<div class="rich_media_content js_underline_content autoTypeSetting24psection" id="js_content" style="visibility: hidden; opacity: 0; "><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去的十多年中，我曾使用并设计过各种类型的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。尽管它们各有特色，但总免不了一些使用上的不便之处。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我的第一次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">开发经历，可以追溯到十年前，那时我刚开始从事游戏开发，参与制作了一款</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">TPS</span></code><span leaf="">（第三人称射击）游戏。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时的服务器架构采用分布式设计，并结合多语言开发。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个分布式系统中，与玩家个人数据交互的进程被称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Info</span></code><span leaf="">进程，相关的功能由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Java</span></code><span leaf="">实现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Gateway</span></code><span leaf="">和核心玩法逻辑则由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">编写。两者之间的通信主要依赖于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的具体使用方式已经有些模糊，但我依然记得它的基本形式，大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class="code-snippet__js" data-lang="java"><code><span leaf=""><span class="code-snippet__keyword">void</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__title">CallRet</span><span class="code-snippet__params">(sockbuffer buf)</span><span class="code-snippet__plaintext"> </span></span></code><code><span leaf=""><span class="code-snippet__plaintext">{</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint32</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">ret</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadInt32()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint64</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">uid</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadUint64()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    ...</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">}</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">sockbuffer buf;</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt32(args1)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt8(args2)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">rpc::Call(buf.Bytes(), CallRet)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种早期的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计可以说是非常简陋，甚至有些“原始”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">它的序列化方式完全依赖手工编码（我印象最深的是经常需要和Java程序那边反复确认参数的大小和顺序是否一致）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">此外，回调函数的设计也相当局限，甚至不支持闭包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">消息机制是建立在普通的消息收发基础之上的。仅仅在消息协议中额外加了一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session</span></code><span leaf="">字段。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc::Call</span></code><span leaf="">时，系统会为该调用分配一个短期内不重复的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。分配的逻辑也很直接，只是用一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session_idx</span></code><span leaf="">变量自增而已，确保在5秒内不会重复。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然后将</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">和对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">放到一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">map</span></code><span leaf="">中去，之后就让出了所有</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CPU</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">被调用方</span></strong><span leaf="">响应时，它会将对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">字段一并返回。这样，</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">调用方</span></strong><span leaf="">就能通过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">找到对应的回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">并执行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了处理超时情况，调用方还实现了一个简单的定时器，每秒检查是否有超时的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">如果发现某个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">超时，就直接将其删除（这意味着超时的请求永远不会返回）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">虽然这种</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的使用方式有些简陋，但对于刚入行的我而言，它的思路却让我醍醐灌顶。并在后面近十年里一直影响着我。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf=""><br/></span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">后来，我也简单接触过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">但在实际使用中发现：它在发送请求协议后，会在当前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">socket</span></code><span leaf="">上</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">同步</span></strong><span leaf="">等待协议返回。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">对于一个典型的“单线程多进程”游戏服务器而言，这种设计会显著降低并发处理能力。因此，我没有进一步深入研究</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我开始参与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">游戏的开发。由于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">的战斗逻辑通常是由服务器自动完成的，而这些战斗计算往往在高峰期（如攻城战）时会占用大量资源，容易导致其他操作（例如武将培养、抽卡等）出现阻塞。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这一问题，我决定将大地图的核心玩法逻辑从主进程中剥离，独立到单独的进程中运行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">既然采用多进程来拆分业务逻辑，自然需要引入</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">来简化进程间通信，提升开发效率。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我结合之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">经验，开始探索实现一个便捷、高效的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我借鉴了之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">思路，最终设计出来的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="cpp"><code><span leaf=""><span class="code-snippet__function"><span class="code-snippet__type">uint32_t</span></span><span class="code-snippet__function"><span class="code-snippet__plaintext"> </span></span><span class="code-snippet__function"><span class="code-snippet__title">rpc_call</span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext">(zprotobuf::wirep &amp;req, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">void</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> (*cb)(MsgHeader *m, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">uint32_t</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> session))</span></span></span><span class="code-snippet__plaintext">;</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计中，我修改了超时功能：如果消息超过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">5</span></code><span leaf="">秒仍未返回，回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">cb</span></code><span leaf="">依然会被调用，但此时传递的参数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">m</span></code><span leaf="">会被置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">nullptr</span></code><span leaf="">，以便调用方可以处理超时后的撤销逻辑或补偿措施。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在从零开始设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的过程中，我遇到了一个以前被忽视的问题：如何有效区分双向通信中的请求与响应。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">具体来说，如果</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">两个进程只通过一条连接</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">通信，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">从</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">中读到的数据，到底是来自</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">的请求，还是对</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">先前请求的响应？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终我选择了一个看似简单的方案：让</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">之间各自建立一条独立的连接。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">也就是说，由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A Call B</span></code><span leaf="">，而由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B Call A</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个设计选择在后续引发了一个严重的问题：由于A和B的通信不再依赖同一条连接，因此消息的</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">FIFO（First In First Out）</span></strong><span leaf="">性质被破坏了。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在某些特殊场景下，客户端默认我们提供的消息顺序与服务器上的事件发生顺序一致，而这种假设在当前设计中可能被打破。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个问题非常隐蔽，尤其是在内网环境中。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">等到问题真正暴露时，项目已进入功能开发的后期阶段，箭在弦上，只能尝试绕过这个限制来规避问题。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">附带一提，这个大地图核心玩法的进程是用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">编写的，其</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块通过将通信逻辑封装在</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">coroutine</span></code><span leaf="">中实现了同步式调用。虽然实现形式与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">略有不同，但其基本机制是一致的，因此不再赘述。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我换了一份工作，开始使用Go语言开发游戏服务器。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时公司的服务器框架仍然延续了“单线程多进程”的设计理念，不过进程的概念被</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">所替代，主体业务逻辑依然运行在主</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">上。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这种架构下，分布式通信的实现方式也必须适配“单线程多进程”的运行模型，而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">的同步阻塞模式显然不适合这种设计。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，在开发跨服业务时，我们采用了纯粹的消息传递方式。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种方式虽然简单，但也有明显的缺点：A进程向B进程发送消息后，还需要专门为B返回的响应编写一个单独的处理函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种上下文的割裂会让代码变得不直观，特别是在需要两次甚至三次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Call</span></code><span leaf="">时，问题更加突出。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这个问题，我再次借鉴了之前</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">的设计思路，构建了一个适用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Go</span></code><span leaf="">语言环境的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。最终的接口设计大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="go"><code><span leaf=""><span class="code-snippet__plaintext">rpc.Call(req protobuf.Message, fn </span><span class="code-snippet__function"><span class="code-snippet__keyword">func</span></span><span class="code-snippet__function"><span class="code-snippet__params">(ack protobuf.Message)</span></span><span class="code-snippet__plaintext">)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块同样实现了超时逻辑：如果响应超过指定时间未返回，则会通过调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn(nil)</span></code><span leaf="">返回一个空值，以便调用方能够处理超时场景。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从表面上看，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">与我过去的实现没有太大差别。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，由于跨服通信与游戏服之间的链接机制是固定的（两个进程之间始终只有一条链接），我不得不解决一个问题：如何在同一条链接上区分请求包和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">实际上，即使链接机制允许修改，我也不太倾向于采用多链接方案。原因如前文所述，多链接容易导致消息顺序问题，特别是在对消息顺序有严格要求的场景下。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最初，我的想法是利用协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">来区分请求和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因为请求包和响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">一定是不同的，我只需要针对响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">做标记（打桩），然后将这些消息流转到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块进行处理即可。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">大致实现方式如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang=""><code><span leaf=""><span class="code-snippet__plaintext">router.register(xxx_cmd_id, rpc.dispatch)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种设计，当链接上接收到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">xxx_cmd_id</span></code><span leaf="">时，会自动调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">，从而识别对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">并触发相应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn</span></code><span leaf="">回调函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">事实上，这种方式让我用了相当长一段时间，它运行稳定，表现良好。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，随着跨服业务的复杂度不断提高，打桩函数的维护成本也在逐渐增加。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次新增或修改响应协议，都需要更新打桩逻辑，这让我不得不开始寻找新的请求与响应识别方案。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终，我发现协议数据中有一个未使用的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">位。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我决定将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">用于区分响应包和请求包：如果是响应包，就将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">；当接收数据包时，先检查这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">，如果为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">，则直接调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">处理响应，否则进入正常的消息处理流程。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个简单的改动彻底终结了“打桩时代”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">总的来看，这版</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的设计除了保留回调机制外，几乎解决了我在以往经历中遇到的所有痛点。（是的，从我用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">开始，我就不喜欢回调式的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">了，因为回调会传染）。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">由于这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是在跨服机制的上层构建的，因此它不再，也无法直接关注底层的链接状态。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">正因为如此，即便一个游戏服链接了几十个跨服进程，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的实例依然只有一个。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">相比之前的设计，这次的思路完全不同。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去，我通常会为每个链接绑定一个独立的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">对象，而这次“思维定式”的打破让我对基于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">机制的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">有了更为全局的认识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我开始反思：</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是否真的有必要关注链接？如果不再关心底层的链接状态，最终的设计会是什么样子？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我进行了几个月的探索与思考，最终找到了一种更抽象的设计思路。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在一个分布式的游戏服务器系统中，进程之间的操作必然会被隔离开，不可能直接操作同一份玩家或全服数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这一特性为我们提供了一个关键的设计契机：为每个进程分配一个唯一的标识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">假设这个标识称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">，我们可以基于此重新设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口，新的接口可能如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="bash"><code><span leaf=""><span class="code-snippet__built_in">local</span><span class="code-snippet__plaintext"> ack = rpc.call(workerid, req)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当我们选择忽略链接的存在后，分布式系统中的服务发现与连接建立也可以独立成为一个独立的模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">例如</span><span leaf="">我最近的实验项目</span><span leaf="">, 就使用了etcd来实现服务发现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种设计思路受到了一些边车模式（</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Sidecar Pattern</span></code><span leaf="">）的启发，通过抽象链接管理，将其从业务逻辑中剥离出来。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从业务角度来看，我们无需过于关注链接的瞬时断开与重建，因为这些事件并不会对分布式系统的一致性产生任何实际帮助。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">与我们的业务密切相关，因为它决定了每个进程将处理分布式系统中的哪部分数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">代表一个特定的进程，它负责处理特定范围内的任务或数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">不仅是进程的标识符，更是数据路由与处理的关键。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种方式，我们能够将分布式系统的资源划分与调度与业务需求紧密结合，而链接则可以忽视。</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div> (base_parser.py:366)
2024-11-29 14:40:53 [INFO] 作者：重归混沌 (base_parser.py:367)
2024-11-29 14:40:53 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 14:40:53 [INFO] 标题：谈谈游戏服务器中RPC模块的设计 (base_parser.py:369)
2024-11-29 14:40:53 [INFO] 保存文件夹：temp\3988754763612691989\微信公众号-重归混沌 (base_parser.py:256)
2024-11-29 14:40:57 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:40:57 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:233)
2024-11-29 14:40:57 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:40:57 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:40:57 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:40:57 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:40:57 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:40:57 [INFO] 保存目录: temp\3988754763612691989\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:40:57 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:40:57 [INFO] HTML文件已保存: temp\3988754763612691989\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (save_utils.py:91)
2024-11-29 14:40:57 [INFO] 添加文件到文件列表：temp\3988754763612691989\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:65)
2024-11-29 14:40:57 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:233)
2024-11-29 14:40:57 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:40:57 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:40:57 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:40:57 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:40:57 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:40:57 [INFO] 保存目录: temp\3988754763612691989\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:40:57 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:40:57 [INFO] Markdown文件已保存: temp\3988754763612691989\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (save_utils.py:127)
2024-11-29 14:40:57 [INFO] 添加文件到文件列表：temp\3988754763612691989\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:65)
2024-11-29 14:40:57 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (base_parser.py:233)
2024-11-29 14:40:57 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:40:57 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:40:57 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:40:57 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:40:57 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:40:57 [INFO] 保存目录: temp\3988754763612691989\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:40:57 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:40:57 [INFO] MHTML文件已保存: temp\3988754763612691989\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (save_utils.py:265)
2024-11-29 14:40:57 [INFO] 添加文件到文件列表：temp\3988754763612691989\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (base_parser.py:65)
2024-11-29 14:40:57 [INFO] 原始文件列表: [{'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\3988754763612691989\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'}, {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\3988754763612691989\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'}, {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\3988754763612691989\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', 'size': 2354305, 'format': 'mhtml'}] (api.py:132)
2024-11-29 14:40:57 [INFO] 请求的格式: {'md', 'html', 'mhtml'} (api.py:143)
2024-11-29 14:40:57 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'} (api.py:151)
2024-11-29 14:40:57 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'} (api.py:151)
2024-11-29 14:40:57 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', 'size': 2354305, 'format': 'mhtml'} (api.py:151)
2024-11-29 14:40:57 [INFO] 最终返回的文件列表: [FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', size=2229479, format='html'), FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', size=10646, format='md'), FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', size=2354305, format='mhtml')] (api.py:155)
2024-11-29 14:41:05 [INFO] 处理文件: temp/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:69)
2024-11-29 14:41:05 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计.html (api.py:83)
2024-11-29 14:41:05 [INFO] 处理文件: temp/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:69)
2024-11-29 14:41:05 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计.md (api.py:83)
2024-11-29 14:41:05 [INFO] 处理文件: temp/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (api.py:69)
2024-11-29 14:41:05 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计.mhtml (api.py:83)
2024-11-29 14:41:05 [INFO] 生成ZIP文件: blog_content_20241129_144105.zip (api.py:92)
2024-11-29 14:41:25 [INFO] 处理文件: temp/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:69)
2024-11-29 14:41:25 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计.html (api.py:83)
2024-11-29 14:41:25 [INFO] 处理文件: temp/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:69)
2024-11-29 14:41:25 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计.md (api.py:83)
2024-11-29 14:41:25 [INFO] 处理文件: temp/3988754763612691989/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (api.py:69)
2024-11-29 14:41:26 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计.mhtml (api.py:83)
2024-11-29 14:41:26 [INFO] 生成ZIP文件: blog_content_20241129_144126.zip (api.py:92)
2024-11-29 14:44:11 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 14:44:11 [INFO] 使用 微信公众号 解析器 (blog_parser.py:36)
2024-11-29 14:44:12 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'js_name'} (base_parser.py:91)
2024-11-29 14:44:12 [DEBUG] 尝试选择器: tag=em, attrs={'id': 'publish_time'} (base_parser.py:91)
2024-11-29 14:44:12 [INFO] 原始日期文本： (base_parser.py:169)
2024-11-29 14:44:12 [DEBUG] 尝试选择器: tag=h1, attrs={'id': 'activity-name'} (base_parser.py:91)
2024-11-29 14:44:12 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'js_content'} (base_parser.py:91)
2024-11-29 14:44:12 [DEBUG] 内容：<div class="rich_media_content js_underline_content autoTypeSetting24psection" id="js_content" style="visibility: hidden; opacity: 0; "><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去的十多年中，我曾使用并设计过各种类型的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。尽管它们各有特色，但总免不了一些使用上的不便之处。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我的第一次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">开发经历，可以追溯到十年前，那时我刚开始从事游戏开发，参与制作了一款</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">TPS</span></code><span leaf="">（第三人称射击）游戏。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时的服务器架构采用分布式设计，并结合多语言开发。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个分布式系统中，与玩家个人数据交互的进程被称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Info</span></code><span leaf="">进程，相关的功能由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Java</span></code><span leaf="">实现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Gateway</span></code><span leaf="">和核心玩法逻辑则由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">编写。两者之间的通信主要依赖于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的具体使用方式已经有些模糊，但我依然记得它的基本形式，大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class="code-snippet__js" data-lang="java"><code><span leaf=""><span class="code-snippet__keyword">void</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__title">CallRet</span><span class="code-snippet__params">(sockbuffer buf)</span><span class="code-snippet__plaintext"> </span></span></code><code><span leaf=""><span class="code-snippet__plaintext">{</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint32</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">ret</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadInt32()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    </span><span class="code-snippet__type">uint64</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__variable">uid</span><span class="code-snippet__plaintext"> </span><span class="code-snippet__operator">=</span><span class="code-snippet__plaintext"> buf.ReadUint64()</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">    ...</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">}</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">sockbuffer buf;</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt32(args1)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">buf.WriteInt8(args2)</span></span></code><code><span leaf=""><span class="code-snippet__plaintext">rpc::Call(buf.Bytes(), CallRet)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种早期的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计可以说是非常简陋，甚至有些“原始”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">它的序列化方式完全依赖手工编码（我印象最深的是经常需要和Java程序那边反复确认参数的大小和顺序是否一致）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">此外，回调函数的设计也相当局限，甚至不支持闭包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">整个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">消息机制是建立在普通的消息收发基础之上的。仅仅在消息协议中额外加了一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session</span></code><span leaf="">字段。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc::Call</span></code><span leaf="">时，系统会为该调用分配一个短期内不重复的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。分配的逻辑也很直接，只是用一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">uint32 session_idx</span></code><span leaf="">变量自增而已，确保在5秒内不会重复。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然后将</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">和对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">放到一个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">map</span></code><span leaf="">中去，之后就让出了所有</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CPU</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">被调用方</span></strong><span leaf="">响应时，它会将对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">字段一并返回。这样，</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">调用方</span></strong><span leaf="">就能通过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">找到对应的回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">CallRet</span></code><span leaf="">并执行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了处理超时情况，调用方还实现了一个简单的定时器，每秒检查是否有超时的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">如果发现某个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">超时，就直接将其删除（这意味着超时的请求永远不会返回）。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">虽然这种</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的使用方式有些简陋，但对于刚入行的我而言，它的思路却让我醍醐灌顶。并在后面近十年里一直影响着我。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf=""><br/></span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">后来，我也简单接触过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">但在实际使用中发现：它在发送请求协议后，会在当前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">socket</span></code><span leaf="">上</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">同步</span></strong><span leaf="">等待协议返回。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">对于一个典型的“单线程多进程”游戏服务器而言，这种设计会显著降低并发处理能力。因此，我没有进一步深入研究</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我开始参与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">游戏的开发。由于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">SLG</span></code><span leaf="">的战斗逻辑通常是由服务器自动完成的，而这些战斗计算往往在高峰期（如攻城战）时会占用大量资源，容易导致其他操作（例如武将培养、抽卡等）出现阻塞。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这一问题，我决定将大地图的核心玩法逻辑从主进程中剥离，独立到单独的进程中运行。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">既然采用多进程来拆分业务逻辑，自然需要引入</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">来简化进程间通信，提升开发效率。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我结合之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">经验，开始探索实现一个便捷、高效的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我借鉴了之前的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">思路，最终设计出来的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="cpp"><code><span leaf=""><span class="code-snippet__function"><span class="code-snippet__type">uint32_t</span></span><span class="code-snippet__function"><span class="code-snippet__plaintext"> </span></span><span class="code-snippet__function"><span class="code-snippet__title">rpc_call</span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext">(zprotobuf::wirep &amp;req, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">void</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> (*cb)(MsgHeader *m, </span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__type">uint32_t</span></span></span><span class="code-snippet__function"><span class="code-snippet__params"><span class="code-snippet__plaintext"> session))</span></span></span><span class="code-snippet__plaintext">;</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">设计中，我修改了超时功能：如果消息超过</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">5</span></code><span leaf="">秒仍未返回，回调函数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">cb</span></code><span leaf="">依然会被调用，但此时传递的参数</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">m</span></code><span leaf="">会被置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">nullptr</span></code><span leaf="">，以便调用方可以处理超时后的撤销逻辑或补偿措施。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在从零开始设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的过程中，我遇到了一个以前被忽视的问题：如何有效区分双向通信中的请求与响应。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">具体来说，如果</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">两个进程只通过一条连接</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">通信，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">从</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">L</span></code><span leaf="">中读到的数据，到底是来自</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">的请求，还是对</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">先前请求的响应？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终我选择了一个看似简单的方案：让</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">和</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">之间各自建立一条独立的连接。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">也就是说，由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">A Call B</span></code><span leaf="">，而由</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B</span></code><span leaf="">主动建立的连接用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">B Call A</span></code><span leaf="">。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个设计选择在后续引发了一个严重的问题：由于A和B的通信不再依赖同一条连接，因此消息的</span><strong style="box-sizing: inherit;font-weight: 700;"><span leaf="">FIFO（First In First Out）</span></strong><span leaf="">性质被破坏了。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在某些特殊场景下，客户端默认我们提供的消息顺序与服务器上的事件发生顺序一致，而这种假设在当前设计中可能被打破。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个问题非常隐蔽，尤其是在内网环境中。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">等到问题真正暴露时，项目已进入功能开发的后期阶段，箭在弦上，只能尝试绕过这个限制来规避问题。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">附带一提，这个大地图核心玩法的进程是用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">编写的，其</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块通过将通信逻辑封装在</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">coroutine</span></code><span leaf="">中实现了同步式调用。虽然实现形式与</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">C++</span></code><span leaf="">略有不同，但其基本机制是一致的，因此不再赘述。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">之后，我换了一份工作，开始使用Go语言开发游戏服务器。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当时公司的服务器框架仍然延续了“单线程多进程”的设计理念，不过进程的概念被</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">所替代，主体业务逻辑依然运行在主</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">goroutine</span></code><span leaf="">上。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在这种架构下，分布式通信的实现方式也必须适配“单线程多进程”的运行模型，而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">gRPC</span></code><span leaf="">的同步阻塞模式显然不适合这种设计。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，在开发跨服业务时，我们采用了纯粹的消息传递方式。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种方式虽然简单，但也有明显的缺点：A进程向B进程发送消息后，还需要专门为B返回的响应编写一个单独的处理函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种上下文的割裂会让代码变得不直观，特别是在需要两次甚至三次</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Call</span></code><span leaf="">时，问题更加突出。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">为了解决这个问题，我再次借鉴了之前</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">的设计思路，构建了一个适用于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Go</span></code><span leaf="">语言环境的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块。最终的接口设计大致如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="go"><code><span leaf=""><span class="code-snippet__plaintext">rpc.Call(req protobuf.Message, fn </span><span class="code-snippet__function"><span class="code-snippet__keyword">func</span></span><span class="code-snippet__function"><span class="code-snippet__params">(ack protobuf.Message)</span></span><span class="code-snippet__plaintext">)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块同样实现了超时逻辑：如果响应超过指定时间未返回，则会通过调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn(nil)</span></code><span leaf="">返回一个空值，以便调用方能够处理超时场景。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从表面上看，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">与我过去的实现没有太大差别。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，由于跨服通信与游戏服之间的链接机制是固定的（两个进程之间始终只有一条链接），我不得不解决一个问题：如何在同一条链接上区分请求包和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">实际上，即使链接机制允许修改，我也不太倾向于采用多链接方案。原因如前文所述，多链接容易导致消息顺序问题，特别是在对消息顺序有严格要求的场景下。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最初，我的想法是利用协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">来区分请求和响应包。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因为请求包和响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">一定是不同的，我只需要针对响应包的协议</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">ID</span></code><span leaf="">做标记（打桩），然后将这些消息流转到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块进行处理即可。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">大致实现方式如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang=""><code><span leaf=""><span class="code-snippet__plaintext">router.register(xxx_cmd_id, rpc.dispatch)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种设计，当链接上接收到</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">xxx_cmd_id</span></code><span leaf="">时，会自动调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">，从而识别对应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">并触发相应的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">fn</span></code><span leaf="">回调函数。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">事实上，这种方式让我用了相当长一段时间，它运行稳定，表现良好。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">然而，随着跨服业务的复杂度不断提高，打桩函数的维护成本也在逐渐增加。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每次新增或修改响应协议，都需要更新打桩逻辑，这让我不得不开始寻找新的请求与响应识别方案。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">最终，我发现协议数据中有一个未使用的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">位。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">于是，我决定将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">用于区分响应包和请求包：如果是响应包，就将这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">置为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">；当接收数据包时，先检查这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">bit</span></code><span leaf="">，如果为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">1</span></code><span leaf="">，则直接调用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">rpc.dispatch</span></code><span leaf="">处理响应，否则进入正常的消息处理流程。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这个简单的改动彻底终结了“打桩时代”。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">总的来看，这版</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">的设计除了保留回调机制外，几乎解决了我在以往经历中遇到的所有痛点。（是的，从我用</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Lua</span></code><span leaf="">开始，我就不喜欢回调式的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">了，因为回调会传染）。</span></p><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"/><section><span leaf=""><br/></span></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">由于这次的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是在跨服机制的上层构建的，因此它不再，也无法直接关注底层的链接状态。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">正因为如此，即便一个游戏服链接了几十个跨服进程，这个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块的实例依然只有一个。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">相比之前的设计，这次的思路完全不同。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在过去，我通常会为每个链接绑定一个独立的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">对象，而这次“思维定式”的打破让我对基于</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">session</span></code><span leaf="">机制的</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">有了更为全局的认识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我开始反思：</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">模块是否真的有必要关注链接？如果不再关心底层的链接状态，最终的设计会是什么样子？</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">我进行了几个月的探索与思考，最终找到了一种更抽象的设计思路。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">在一个分布式的游戏服务器系统中，进程之间的操作必然会被隔离开，不可能直接操作同一份玩家或全服数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这一特性为我们提供了一个关键的设计契机：为每个进程分配一个唯一的标识。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">假设这个标识称为</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">，我们可以基于此重新设计</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">RPC</span></code><span leaf="">接口，新的接口可能如下：</span></p><section class="code-snippet__fix code-snippet__js"><ul class="code-snippet__line-index code-snippet__js"><li></li></ul><pre class="code-snippet__js" data-lang="bash"><code><span leaf=""><span class="code-snippet__built_in">local</span><span class="code-snippet__plaintext"> ack = rpc.call(workerid, req)</span></span></code></pre></section><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">当我们选择忽略链接的存在后，分布式系统中的服务发现与连接建立也可以独立成为一个独立的模块。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">例如</span><span leaf="">我最近的实验项目</span><span leaf="">, 就使用了etcd来实现服务发现。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">这种设计思路受到了一些边车模式（</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">Sidecar Pattern</span></code><span leaf="">）的启发，通过抽象链接管理，将其从业务逻辑中剥离出来。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">从业务角度来看，我们无需过于关注链接的瞬时断开与重建，因为这些事件并不会对分布式系统的一致性产生任何实际帮助。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">而</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">与我们的业务密切相关，因为它决定了每个进程将处理分布式系统中的哪部分数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">每个</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">代表一个特定的进程，它负责处理特定范围内的任务或数据。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">因此，</span><code style='box-sizing: inherit;font: 15px Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;'><span leaf="">workerid</span></code><span leaf="">不仅是进程的标识符，更是数据路由与处理的关键。</span></p><p style='box-sizing: inherit;margin: 0px 0px 1.5em;padding: 0px;border: 0px;color: rgb(34, 34, 34);font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: start;text-indent: 0px;text-transform: none;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-decoration-thickness: initial;text-decoration-style: initial;text-decoration-color: initial;'><span leaf="">通过这种方式，我们能够将分布式系统的资源划分与调度与业务需求紧密结合，而链接则可以忽视。</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div> (base_parser.py:366)
2024-11-29 14:44:12 [INFO] 作者：重归混沌 (base_parser.py:367)
2024-11-29 14:44:12 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 14:44:12 [INFO] 标题：谈谈游戏服务器中RPC模块的设计 (base_parser.py:369)
2024-11-29 14:44:12 [INFO] 保存文件夹：temp\7863930288391787691\微信公众号-重归混沌 (base_parser.py:256)
2024-11-29 14:44:14 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 14:44:14 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:233)
2024-11-29 14:44:14 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:44:14 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:44:14 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:44:14 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:44:14 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:44:14 [INFO] 保存目录: temp\7863930288391787691\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:44:14 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:44:14 [INFO] HTML文件已保存: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (save_utils.py:91)
2024-11-29 14:44:14 [INFO] 添加文件到文件列表：temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (base_parser.py:65)
2024-11-29 14:44:14 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:233)
2024-11-29 14:44:14 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:44:14 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:44:14 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:44:14 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:44:14 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:44:14 [INFO] 保存目录: temp\7863930288391787691\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:44:14 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:44:15 [INFO] Markdown文件已保存: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (save_utils.py:127)
2024-11-29 14:44:15 [INFO] 添加文件到文件列表：temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (base_parser.py:65)
2024-11-29 14:44:15 [INFO] 保存文件名：谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (base_parser.py:233)
2024-11-29 14:44:15 [INFO] base_save_handle 处理图片https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:33)
2024-11-29 14:44:15 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 14:44:15 [INFO] base_save_handle 处理图片00https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:36)
2024-11-29 14:44:15 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 14:44:15 [INFO] 基础URL: https://mp.weixin.qq.com/s/sYKu6pRDnv4_Dzs8DyxTgw (save_utils.py:378)
2024-11-29 14:44:15 [INFO] 保存目录: temp\7863930288391787691\微信公众号-重归混沌 (save_utils.py:379)
2024-11-29 14:44:15 [INFO] === 图片处理完成: 共处理 0 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 14:44:15 [INFO] MHTML文件已保存: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (save_utils.py:265)
2024-11-29 14:44:15 [INFO] 添加文件到文件列表：temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (base_parser.py:65)
2024-11-29 14:44:15 [INFO] 原始文件列表: [{'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7863930288391787691\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'}, {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7863930288391787691\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'}, {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': 'temp\\7863930288391787691\\微信公众号-重归混沌\\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', 'size': 2354305, 'format': 'mhtml'}] (api.py:137)
2024-11-29 14:44:15 [INFO] 请求的格式: {'mhtml', 'md', 'html'} (api.py:148)
2024-11-29 14:44:15 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'size': 2229479, 'format': 'html'} (api.py:156)
2024-11-29 14:44:15 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'size': 10646, 'format': 'md'} (api.py:156)
2024-11-29 14:44:15 [INFO] 处理后的文件信息: {'title': '谈谈游戏服务器中RPC模块的设计', 'download_url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', 'size': 2354305, 'format': 'mhtml'} (api.py:156)
2024-11-29 14:44:15 [INFO] 最终返回的文件列表: [FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', size=2229479, format='html'), FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', size=10646, format='md'), FileInfo(title='谈谈游戏服务器中RPC模块的设计', download_url='/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', size=2354305, format='mhtml')] (api.py:160)
2024-11-29 14:44:18 [INFO] 批量下载请求参数: {'files': [{'url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'filename': '谈谈游戏服务器中RPC模块的设计.html'}, {'url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'filename': '谈谈游戏服务器中RPC模块的设计.md'}, {'url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml', 'filename': '谈谈游戏服务器中RPC模块的设计.mhtml'}]} (api.py:58)
2024-11-29 14:44:18 [INFO] 处理文件: URL=/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html, 路径=temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html, 文件名=谈谈游戏服务器中RPC模块的设计.html (api.py:71)
2024-11-29 14:44:18 [INFO] 完整路径: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:75)
2024-11-29 14:44:18 [INFO] 处理文件: temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:77)
2024-11-29 14:44:18 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计.html (api.py:88)
2024-11-29 14:44:18 [INFO] 处理文件: URL=/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md, 路径=temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md, 文件名=谈谈游戏服务器中RPC模块的设计.md (api.py:71)
2024-11-29 14:44:18 [INFO] 完整路径: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:75)
2024-11-29 14:44:18 [INFO] 处理文件: temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:77)
2024-11-29 14:44:18 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计.md (api.py:88)
2024-11-29 14:44:18 [INFO] 处理文件: URL=/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml, 路径=temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml, 文件名=谈谈游戏服务器中RPC模块的设计.mhtml (api.py:71)
2024-11-29 14:44:18 [INFO] 完整路径: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (api.py:75)
2024-11-29 14:44:18 [INFO] 处理文件: temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.mhtml (api.py:77)
2024-11-29 14:44:18 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计.mhtml (api.py:88)
2024-11-29 14:44:18 [INFO] 生成ZIP文件: blog_content_20241129_144418.zip (api.py:97)
2024-11-29 14:55:46 [INFO] 批量下载请求参数: {'files': [{'url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'filename': '谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html'}, {'url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'filename': '谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md'}, {'url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'filename': '谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md'}]} (api.py:58)
2024-11-29 14:55:46 [INFO] 处理文件: URL=/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html, 路径=temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html, 文件名=谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:68)
2024-11-29 14:55:46 [INFO] 完整路径: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:72)
2024-11-29 14:55:50 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:83)
2024-11-29 14:55:50 [INFO] 处理文件: URL=/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md, 路径=temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md, 文件名=谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:68)
2024-11-29 14:55:50 [INFO] 完整路径: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:72)
2024-11-29 14:55:50 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:83)
2024-11-29 14:55:50 [INFO] 处理文件: URL=/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html, 路径=temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html, 文件名=谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:68)
2024-11-29 14:55:50 [INFO] 完整路径: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:72)
2024-11-29 14:55:50 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:83)
2024-11-29 14:55:50 [INFO] 生成ZIP文件: blog_content.zip (api.py:90)
2024-11-29 14:57:59 [INFO] 原始请求体: b'{\n  "files": [\n    {\n      "url": "/download/7863930288391787691/\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7-\xe9\x87\x8d\xe5\xbd\x92\xe6\xb7\xb7\xe6\xb2\x8c/\xe8\xb0\x88\xe8\xb0\x88\xe6\xb8\xb8\xe6\x88\x8f\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe4\xb8\xadRPC\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe8\xae\xbe\xe8\xae\xa1-\xe9\x87\x8d\xe5\xbd\x92\xe6\xb7\xb7\xe6\xb2\x8c-\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7-2024-11-29.html",\n      "filename": "\xe8\xb0\x88\xe8\xb0\x88\xe6\xb8\xb8\xe6\x88\x8f\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe4\xb8\xadRPC\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe8\xae\xbe\xe8\xae\xa1-\xe9\x87\x8d\xe5\xbd\x92\xe6\xb7\xb7\xe6\xb2\x8c-\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7-2024-11-29.html"\n    },\n    {\n      "url": "/download/7863930288391787691/\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7-\xe9\x87\x8d\xe5\xbd\x92\xe6\xb7\xb7\xe6\xb2\x8c/\xe8\xb0\x88\xe8\xb0\x88\xe6\xb8\xb8\xe6\x88\x8f\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe4\xb8\xadRPC\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe8\xae\xbe\xe8\xae\xa1-\xe9\x87\x8d\xe5\xbd\x92\xe6\xb7\xb7\xe6\xb2\x8c-\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7-2024-11-29.md",\n      "filename": "\xe8\xb0\x88\xe8\xb0\x88\xe6\xb8\xb8\xe6\x88\x8f\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe4\xb8\xadRPC\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe8\xae\xbe\xe8\xae\xa1-\xe9\x87\x8d\xe5\xbd\x92\xe6\xb7\xb7\xe6\xb2\x8c-\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7-2024-11-29.md"\n    },\n    {\n      "url": "/download/7863930288391787691/\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7-\xe9\x87\x8d\xe5\xbd\x92\xe6\xb7\xb7\xe6\xb2\x8c/\xe8\xb0\x88\xe8\xb0\x88\xe6\xb8\xb8\xe6\x88\x8f\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe4\xb8\xadRPC\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe8\xae\xbe\xe8\xae\xa1-\xe9\x87\x8d\xe5\xbd\x92\xe6\xb7\xb7\xe6\xb2\x8c-\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7-2024-11-29.html",\n      "filename": "\xe8\xb0\x88\xe8\xb0\x88\xe6\xb8\xb8\xe6\x88\x8f\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe4\xb8\xadRPC\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe8\xae\xbe\xe8\xae\xa1-\xe9\x87\x8d\xe5\xbd\x92\xe6\xb7\xb7\xe6\xb2\x8c-\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7-2024-11-29.md"\n    }\n  ]\n}' (api.py:72)
2024-11-29 14:57:59 [INFO] 解析后的请求参数: {'files': [{'url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'filename': '谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html'}, {'url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md', 'filename': '谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md'}, {'url': '/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html', 'filename': '谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md'}]} (api.py:73)
2024-11-29 14:57:59 [INFO] 处理文件: URL=/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html, 路径=temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html, 文件名=谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:82)
2024-11-29 14:57:59 [INFO] 完整路径: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:86)
2024-11-29 14:57:59 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:97)
2024-11-29 14:57:59 [INFO] 处理文件: URL=/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md, 路径=temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md, 文件名=谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:82)
2024-11-29 14:57:59 [INFO] 完整路径: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:86)
2024-11-29 14:57:59 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:97)
2024-11-29 14:57:59 [INFO] 处理文件: URL=/download/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html, 路径=temp/7863930288391787691/微信公众号-重归混沌/谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html, 文件名=谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:82)
2024-11-29 14:57:59 [INFO] 完整路径: temp\7863930288391787691\微信公众号-重归混沌\谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.html (api.py:86)
2024-11-29 14:57:59 [INFO] 已添加到ZIP: 谈谈游戏服务器中RPC模块的设计-重归混沌-微信公众号-2024-11-29.md (api.py:97)
2024-11-29 14:57:59 [INFO] 生成ZIP文件: blog_content.zip (api.py:104)
2024-11-29 15:02:34 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:02:34 [INFO] 使用 掘金 解析器 (blog_parser.py:36)
2024-11-29 15:02:35 [DEBUG] 尝试选择器: tag=span, attrs={'class': 'name'} (base_parser.py:91)
2024-11-29 15:02:35 [DEBUG] 尝试选择器: tag=time, attrs={'class': 'time'} (base_parser.py:91)
2024-11-29 15:02:35 [INFO] 原始日期文本：2023-12-06 (base_parser.py:169)
2024-11-29 15:02:35 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'article-title'} (base_parser.py:91)
2024-11-29 15:02:35 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'article-viewer markdown-body cache result'} (base_parser.py:91)
2024-11-29 15:02:35 [DEBUG]  (base_parser.py:366)
2024-11-29 15:02:35 [INFO] 作者：韭菜尖 (base_parser.py:367)
2024-11-29 15:02:35 [INFO] 时间：2023-12-06 (base_parser.py:368)
2024-11-29 15:02:35 [INFO] 标题：23年底，两年前端菜狗被裁后的面试经历 (base_parser.py:369)
2024-11-29 15:02:35 [ERROR] 解析文章失败：标题或内容为空 (base_parser.py:373)
2024-11-29 15:03:16 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:03:16 [INFO] 使用 掘金 解析器 (blog_parser.py:36)
2024-11-29 15:03:17 [DEBUG] 尝试选择器: tag=span, attrs={'class': 'name'} (base_parser.py:91)
2024-11-29 15:03:17 [DEBUG] 尝试选择器: tag=time, attrs={'class': 'time'} (base_parser.py:91)
2024-11-29 15:03:17 [INFO] 原始日期文本：2024-11-03 (base_parser.py:169)
2024-11-29 15:03:17 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'article-title'} (base_parser.py:91)
2024-11-29 15:03:17 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'article-viewer markdown-body cache result'} (base_parser.py:91)
2024-11-29 15:03:17 [DEBUG]  (base_parser.py:366)
2024-11-29 15:03:17 [INFO] 作者：嘟嘟MD (base_parser.py:367)
2024-11-29 15:03:17 [INFO] 时间：2024-11-03 (base_parser.py:368)
2024-11-29 15:03:17 [INFO] 标题：程序员副业 | 2024年10月复盘 (base_parser.py:369)
2024-11-29 15:03:17 [ERROR] 解析文章失败：标题或内容为空 (base_parser.py:373)
2024-11-29 15:03:33 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:03:33 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 15:03:34 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 15:03:34 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 15:03:34 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 15:03:34 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 15:03:34 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 15:03:34 [INFO] 原始日期文本：2024-11-29 11:21 (base_parser.py:169)
2024-11-29 15:03:34 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 15:03:34 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 15:03:34 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<p>快乐的时光总是转瞬即逝，尤其是当我们面对bug时，不仅浪费了宝贵的时间，更让人感到沮丧。因为bug往往是非常奇怪、难以捉摸的，找来找去你始终无法确定问题所在，最终意识到这些bug并没有多大技术含量。尽管如此，它们却能占据你大量的精力和时间。</p>
<p>这样反复琢磨，往往并没有多大意义，甚至对于个人的技术成长帮助也微乎其微。与其如此，不如趁这个时间去翻阅文档、深入学习，这样或许能得到更有价值的提升。今天，我将结合一个旧项目的案例，介绍如何借助AI代码助手来快速定位和解决bug，帮助你更高效地提升工作效率，节省调试时间，避免掉入冗长的bug修复死循环中。</p>
<p>今天的主题主要会涉及一些关于SQL快速排错的技巧与方法。</p>
<h1 id="快速拍错">快速拍错</h1>
<h2 id="没有足够的值">没有足够的值</h2>
<p>当前市场上存在许多流行的代码生成插件，然而这些插件在生成代码的位置上通常是固定的，并且大多偏向于MySQL数据库。这种情况使得对于老旧项目的开发者来说，使用这些插件显得格外困难，只能采取逐步编写的方式进行调整与优化。</p>
<p>今天我遇到了一个与此相关的bug。在我的项目中，我使用了Oracle的merge语句来处理插入和更新操作，以应对数据缺失和数据存在两种情况。下面是大致的SQL语句示例：</p>
<pre><code class="language-sql">merge into table a
using () b
on (a.pk = b.pk)
when not matched then
 insert ( ) values()
when matched then
 update set a.value = b.value
</code></pre>
<p>看起来似乎没有太大的问题，按照既定的结构进行撰写就可以了。然而，考虑到表结构包含大约40到50个字段，这时你还能够逐个手动输入吗？显然，这样会耗费大量的时间和精力。因此，我决定直接将表结构提供给AI助手，让它帮我进行代码的自动生成，以便快速完成任务。</p>
<p>当然，我个人更倾向于使用补全功能，这样可以让我慢慢确保代码的准确性。例如，可以按照下面的方式进行操作：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png"/></p>
<p>紧接着，联调测试的时候，发现还是少了一个值，报错如下。此时，根据以往的经验，需要进一步进行人工排查和分析，基本会耗费5-10分支时间去排错。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png"/></p>
<p>我们可以直接利用AI助手，让它为我们高效地搜索和定位所需的信息。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png"/></p>
<p>刚才我们提出的问题表达得比较模糊，因此希望能够进一步明确一下具体缺失的是哪个字段。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png"/></p>
<p>非常顺利，最后成功运行了，如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png"/></p>
<h2 id="赋值问题">赋值问题</h2>
<p>尽管我在前端已经明确传递了某个字段的值，但为什么在实际操作中没有成功赋值？同时，我的SQL语句中也确实包含了该字段的插入操作。为了更好地解决这个问题，我会毫不犹豫地向AI助手寻求指导。如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png"/></p>
<p>发现是由于忘记编写getter方法导致的问题。老旧项目中没有使用Lombok，这是没办法的事情，我们必须手动实现这些方法。经过修复后，相关属性能够正常赋值。</p>
<h2 id="对比字段">对比字段</h2>
<p>目前，由于两个系统所直接使用的数据库存在不一致的问题，这将导致后续的维护工作变得异常困难。因此，根据业务需求，我们需要对数据进行补齐。然而，我发现至少缺少五个数据项，并且这些数据的顺序也已经被打乱。自行进行排查无疑会浪费大量时间。</p>
<p>在这种情况下，使用AI代码助手将是一个极为有效的解决方案，如下图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png"/></p>
<p>很快就能得出结果，直接将SQL生成完成，后续只需将SQL上线即可，无需再做额外调整。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png"/></p>
<p>最后，在不断地向AI代码助手请教的过程中，我终于成功完成了CRUD这项基本任务。这样一来，我再也不需要浪费时间和精力去处理那些琐碎而无意义的错误了。</p>
<h1 id="总结">总结</h1>
<p>在软件开发的过程中，我们常常会遇到各种棘手的bug，它们可能看似无害，但却能消耗大量时间和精力。虽然解决这些问题本身可能并没有太大技术挑战，但长时间的调试和排查无疑会使人感到沮丧。然而，借助现代技术工具，尤其是AI代码助手，我们能够大大提高效率，避免陷入无休止的错误修复死循环。</p>
<p>通过今天的分享，我们看到如何利用AI助手快速定位并解决SQL排错问题，节省调试时间，同时提升工作效率。与其在错误中反复徘徊，不如学会借助工具，让自己能够更加专注于技术的深度探索与创新。</p>
<hr/>
<p>我是努力的小雨，一名 Java 服务端码农，潜心研究着 AI 技术的奥秘。我热爱技术交流与分享，对开源社区充满热情。同时也是一位腾讯云创作之星、阿里云专家博主、华为云云享专家、掘金优秀作者。</p>
<p>💡 我将不吝分享我在技术道路上的个人探索与经验，希望能为你的学习与成长带来一些启发与帮助。</p>
<p>🌟 欢迎关注努力的小雨！🌟</p>
</div> (base_parser.py:366)
2024-11-29 15:03:34 [INFO] 作者：努力的小雨 (base_parser.py:367)
2024-11-29 15:03:34 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 15:03:34 [INFO] 标题：借助AI助手如何高效排查SQL问题 (base_parser.py:369)
2024-11-29 15:03:34 [INFO] 保存文件夹：temp\-4615425025696490932\博客园-努力的小雨 (base_parser.py:256)
2024-11-29 15:03:37 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 15:03:37 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:233)
2024-11-29 15:03:37 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:03:37 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:03:37 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:03:37 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:03:37 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:03:37 [INFO] 保存目录: temp\-4615425025696490932\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:03:37 [INFO] HTML文件已保存: temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (save_utils.py:91)
2024-11-29 15:03:37 [INFO] 添加文件到文件列表：temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:65)
2024-11-29 15:03:37 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:233)
2024-11-29 15:03:37 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:03:37 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:03:37 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:03:37 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:03:37 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:03:37 [INFO] 保存目录: temp\-4615425025696490932\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:03:37 [INFO] Markdown文件已保存: temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (save_utils.py:127)
2024-11-29 15:03:37 [INFO] 添加文件到文件列表：temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:65)
2024-11-29 15:03:37 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:233)
2024-11-29 15:03:37 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:03:37 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:03:37 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:03:37 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:03:37 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:03:37 [INFO] 保存目录: temp\-4615425025696490932\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:03:37 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:03:37 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:03:37 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:300)
2024-11-29 15:03:37 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:300)
2024-11-29 15:03:38 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:300)
2024-11-29 15:03:38 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:300)
2024-11-29 15:03:39 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:300)
2024-11-29 15:03:39 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:300)
2024-11-29 15:03:40 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:300)
2024-11-29 15:03:40 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:300)
2024-11-29 15:03:40 [INFO] MHTML文件已保存: temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (save_utils.py:265)
2024-11-29 15:03:40 [INFO] 添加文件到文件列表：temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:65)
2024-11-29 15:03:40 [INFO] 原始文件列表: [{'title': '借助AI助手如何高效排查SQL问题', 'download_url': 'temp\\-4615425025696490932\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'}, {'title': '借助AI助手如何高效排查SQL问题', 'download_url': 'temp\\-4615425025696490932\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'size': 5989, 'format': 'md'}, {'title': '借助AI助手如何高效排查SQL问题', 'download_url': 'temp\\-4615425025696490932\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'size': 398643, 'format': 'mhtml'}] (api.py:147)
2024-11-29 15:03:40 [INFO] 请求的格式: {'mhtml', 'html', 'md'} (api.py:158)
2024-11-29 15:03:40 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题', 'download_url': '/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'} (api.py:166)
2024-11-29 15:03:40 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题', 'download_url': '/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'size': 5989, 'format': 'md'} (api.py:166)
2024-11-29 15:03:40 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题', 'download_url': '/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'size': 398643, 'format': 'mhtml'} (api.py:166)
2024-11-29 15:03:40 [INFO] 最终返回的文件列表: [FileInfo(title='借助AI助手如何高效排查SQL问题', download_url='/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', size=110822, format='html'), FileInfo(title='借助AI助手如何高效排查SQL问题', download_url='/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', size=5989, format='md'), FileInfo(title='借助AI助手如何高效排查SQL问题', download_url='/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', size=398643, format='mhtml')] (api.py:170)
2024-11-29 15:03:42 [INFO] 原始请求体: b'{"files":[{"url":"/download/-4615425025696490932/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98.html"},{"url":"/download/-4615425025696490932/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.md","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98.md"},{"url":"/download/-4615425025696490932/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.mhtml","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98.mhtml"}]}' (api.py:72)
2024-11-29 15:03:42 [INFO] 解析后的请求参数: {'files': [{'url': '/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'filename': '借助AI助手如何高效排查SQL问题.html'}, {'url': '/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'filename': '借助AI助手如何高效排查SQL问题.md'}, {'url': '/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'filename': '借助AI助手如何高效排查SQL问题.mhtml'}]} (api.py:73)
2024-11-29 15:03:42 [INFO] 处理文件: URL=/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 路径=temp/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 文件名=借助AI助手如何高效排查SQL问题.html (api.py:82)
2024-11-29 15:03:42 [INFO] 完整路径: temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:86)
2024-11-29 15:03:42 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题.html (api.py:97)
2024-11-29 15:03:42 [INFO] 处理文件: URL=/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md, 路径=temp/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md, 文件名=借助AI助手如何高效排查SQL问题.md (api.py:82)
2024-11-29 15:03:42 [INFO] 完整路径: temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:86)
2024-11-29 15:03:42 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题.md (api.py:97)
2024-11-29 15:03:42 [INFO] 处理文件: URL=/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml, 路径=temp/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml, 文件名=借助AI助手如何高效排查SQL问题.mhtml (api.py:82)
2024-11-29 15:03:42 [INFO] 完整路径: temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:86)
2024-11-29 15:03:42 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题.mhtml (api.py:97)
2024-11-29 15:03:42 [INFO] 生成ZIP文件: blog_content.zip (api.py:104)
2024-11-29 15:07:01 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:07:01 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 15:07:01 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 15:07:01 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:91)
2024-11-29 15:07:01 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:91)
2024-11-29 15:07:01 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:91)
2024-11-29 15:07:01 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:91)
2024-11-29 15:07:01 [INFO] 原始日期文本：2024-11-29 11:21 (base_parser.py:169)
2024-11-29 15:07:01 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:91)
2024-11-29 15:07:01 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:91)
2024-11-29 15:07:01 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<p>快乐的时光总是转瞬即逝，尤其是当我们面对bug时，不仅浪费了宝贵的时间，更让人感到沮丧。因为bug往往是非常奇怪、难以捉摸的，找来找去你始终无法确定问题所在，最终意识到这些bug并没有多大技术含量。尽管如此，它们却能占据你大量的精力和时间。</p>
<p>这样反复琢磨，往往并没有多大意义，甚至对于个人的技术成长帮助也微乎其微。与其如此，不如趁这个时间去翻阅文档、深入学习，这样或许能得到更有价值的提升。今天，我将结合一个旧项目的案例，介绍如何借助AI代码助手来快速定位和解决bug，帮助你更高效地提升工作效率，节省调试时间，避免掉入冗长的bug修复死循环中。</p>
<p>今天的主题主要会涉及一些关于SQL快速排错的技巧与方法。</p>
<h1 id="快速拍错">快速拍错</h1>
<h2 id="没有足够的值">没有足够的值</h2>
<p>当前市场上存在许多流行的代码生成插件，然而这些插件在生成代码的位置上通常是固定的，并且大多偏向于MySQL数据库。这种情况使得对于老旧项目的开发者来说，使用这些插件显得格外困难，只能采取逐步编写的方式进行调整与优化。</p>
<p>今天我遇到了一个与此相关的bug。在我的项目中，我使用了Oracle的merge语句来处理插入和更新操作，以应对数据缺失和数据存在两种情况。下面是大致的SQL语句示例：</p>
<pre><code class="language-sql">merge into table a
using () b
on (a.pk = b.pk)
when not matched then
 insert ( ) values()
when matched then
 update set a.value = b.value
</code></pre>
<p>看起来似乎没有太大的问题，按照既定的结构进行撰写就可以了。然而，考虑到表结构包含大约40到50个字段，这时你还能够逐个手动输入吗？显然，这样会耗费大量的时间和精力。因此，我决定直接将表结构提供给AI助手，让它帮我进行代码的自动生成，以便快速完成任务。</p>
<p>当然，我个人更倾向于使用补全功能，这样可以让我慢慢确保代码的准确性。例如，可以按照下面的方式进行操作：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png"/></p>
<p>紧接着，联调测试的时候，发现还是少了一个值，报错如下。此时，根据以往的经验，需要进一步进行人工排查和分析，基本会耗费5-10分支时间去排错。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png"/></p>
<p>我们可以直接利用AI助手，让它为我们高效地搜索和定位所需的信息。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png"/></p>
<p>刚才我们提出的问题表达得比较模糊，因此希望能够进一步明确一下具体缺失的是哪个字段。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png"/></p>
<p>非常顺利，最后成功运行了，如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png"/></p>
<h2 id="赋值问题">赋值问题</h2>
<p>尽管我在前端已经明确传递了某个字段的值，但为什么在实际操作中没有成功赋值？同时，我的SQL语句中也确实包含了该字段的插入操作。为了更好地解决这个问题，我会毫不犹豫地向AI助手寻求指导。如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png"/></p>
<p>发现是由于忘记编写getter方法导致的问题。老旧项目中没有使用Lombok，这是没办法的事情，我们必须手动实现这些方法。经过修复后，相关属性能够正常赋值。</p>
<h2 id="对比字段">对比字段</h2>
<p>目前，由于两个系统所直接使用的数据库存在不一致的问题，这将导致后续的维护工作变得异常困难。因此，根据业务需求，我们需要对数据进行补齐。然而，我发现至少缺少五个数据项，并且这些数据的顺序也已经被打乱。自行进行排查无疑会浪费大量时间。</p>
<p>在这种情况下，使用AI代码助手将是一个极为有效的解决方案，如下图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png"/></p>
<p>很快就能得出结果，直接将SQL生成完成，后续只需将SQL上线即可，无需再做额外调整。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png"/></p>
<p>最后，在不断地向AI代码助手请教的过程中，我终于成功完成了CRUD这项基本任务。这样一来，我再也不需要浪费时间和精力去处理那些琐碎而无意义的错误了。</p>
<h1 id="总结">总结</h1>
<p>在软件开发的过程中，我们常常会遇到各种棘手的bug，它们可能看似无害，但却能消耗大量时间和精力。虽然解决这些问题本身可能并没有太大技术挑战，但长时间的调试和排查无疑会使人感到沮丧。然而，借助现代技术工具，尤其是AI代码助手，我们能够大大提高效率，避免陷入无休止的错误修复死循环。</p>
<p>通过今天的分享，我们看到如何利用AI助手快速定位并解决SQL排错问题，节省调试时间，同时提升工作效率。与其在错误中反复徘徊，不如学会借助工具，让自己能够更加专注于技术的深度探索与创新。</p>
<hr/>
<p>我是努力的小雨，一名 Java 服务端码农，潜心研究着 AI 技术的奥秘。我热爱技术交流与分享，对开源社区充满热情。同时也是一位腾讯云创作之星、阿里云专家博主、华为云云享专家、掘金优秀作者。</p>
<p>💡 我将不吝分享我在技术道路上的个人探索与经验，希望能为你的学习与成长带来一些启发与帮助。</p>
<p>🌟 欢迎关注努力的小雨！🌟</p>
</div> (base_parser.py:366)
2024-11-29 15:07:01 [INFO] 作者：努力的小雨 (base_parser.py:367)
2024-11-29 15:07:01 [INFO] 时间：2024-11-29 (base_parser.py:368)
2024-11-29 15:07:01 [INFO] 标题：借助AI助手如何高效排查SQL问题 (base_parser.py:369)
2024-11-29 15:07:01 [INFO] 保存文件夹：temp\-4615425025696490932\博客园-努力的小雨 (base_parser.py:256)
2024-11-29 15:07:04 [INFO] 开始保存文章 (base_parser.py:408)
2024-11-29 15:07:04 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:233)
2024-11-29 15:07:04 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:07:04 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:07:04 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:07:04 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:07:04 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:07:04 [INFO] 保存目录: temp\-4615425025696490932\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:07:04 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:07:04 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:07:04 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:07:04 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:07:04 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:07:04 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:07:04 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:07:04 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:07:04 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:07:04 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:07:04 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:07:04 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:07:04 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:07:04 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:07:04 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:07:04 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:07:04 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:07:04 [INFO] HTML文件已保存: temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (save_utils.py:91)
2024-11-29 15:07:04 [INFO] 添加文件到文件列表：temp\-4615425025696490932\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:65)
2024-11-29 15:07:04 [INFO] 原始文件列表: [{'title': '借助AI助手如何高效排查SQL问题', 'download_url': 'temp\\-4615425025696490932\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'}] (api.py:147)
2024-11-29 15:07:04 [INFO] 请求的格式: {'html'} (api.py:158)
2024-11-29 15:07:04 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题', 'download_url': '/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'} (api.py:166)
2024-11-29 15:07:04 [INFO] 最终返回的文件列表: [FileInfo(title='借助AI助手如何高效排查SQL问题', download_url='/download/-4615425025696490932/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', size=110822, format='html')] (api.py:170)
2024-11-29 15:19:31 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:19:31 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 15:19:32 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:95)
2024-11-29 15:19:32 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:95)
2024-11-29 15:19:32 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:95)
2024-11-29 15:19:32 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:95)
2024-11-29 15:19:32 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:95)
2024-11-29 15:19:32 [INFO] 原始日期文本：2024-11-29 11:21 (base_parser.py:173)
2024-11-29 15:19:32 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:95)
2024-11-29 15:19:32 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:95)
2024-11-29 15:19:32 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<p>快乐的时光总是转瞬即逝，尤其是当我们面对bug时，不仅浪费了宝贵的时间，更让人感到沮丧。因为bug往往是非常奇怪、难以捉摸的，找来找去你始终无法确定问题所在，最终意识到这些bug并没有多大技术含量。尽管如此，它们却能占据你大量的精力和时间。</p>
<p>这样反复琢磨，往往并没有多大意义，甚至对于个人的技术成长帮助也微乎其微。与其如此，不如趁这个时间去翻阅文档、深入学习，这样或许能得到更有价值的提升。今天，我将结合一个旧项目的案例，介绍如何借助AI代码助手来快速定位和解决bug，帮助你更高效地提升工作效率，节省调试时间，避免掉入冗长的bug修复死循环中。</p>
<p>今天的主题主要会涉及一些关于SQL快速排错的技巧与方法。</p>
<h1 id="快速拍错">快速拍错</h1>
<h2 id="没有足够的值">没有足够的值</h2>
<p>当前市场上存在许多流行的代码生成插件，然而这些插件在生成代码的位置上通常是固定的，并且大多偏向于MySQL数据库。这种情况使得对于老旧项目的开发者来说，使用这些插件显得格外困难，只能采取逐步编写的方式进行调整与优化。</p>
<p>今天我遇到了一个与此相关的bug。在我的项目中，我使用了Oracle的merge语句来处理插入和更新操作，以应对数据缺失和数据存在两种情况。下面是大致的SQL语句示例：</p>
<pre><code class="language-sql">merge into table a
using () b
on (a.pk = b.pk)
when not matched then
 insert ( ) values()
when matched then
 update set a.value = b.value
</code></pre>
<p>看起来似乎没有太大的问题，按照既定的结构进行撰写就可以了。然而，考虑到表结构包含大约40到50个字段，这时你还能够逐个手动输入吗？显然，这样会耗费大量的时间和精力。因此，我决定直接将表结构提供给AI助手，让它帮我进行代码的自动生成，以便快速完成任务。</p>
<p>当然，我个人更倾向于使用补全功能，这样可以让我慢慢确保代码的准确性。例如，可以按照下面的方式进行操作：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png"/></p>
<p>紧接着，联调测试的时候，发现还是少了一个值，报错如下。此时，根据以往的经验，需要进一步进行人工排查和分析，基本会耗费5-10分支时间去排错。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png"/></p>
<p>我们可以直接利用AI助手，让它为我们高效地搜索和定位所需的信息。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png"/></p>
<p>刚才我们提出的问题表达得比较模糊，因此希望能够进一步明确一下具体缺失的是哪个字段。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png"/></p>
<p>非常顺利，最后成功运行了，如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png"/></p>
<h2 id="赋值问题">赋值问题</h2>
<p>尽管我在前端已经明确传递了某个字段的值，但为什么在实际操作中没有成功赋值？同时，我的SQL语句中也确实包含了该字段的插入操作。为了更好地解决这个问题，我会毫不犹豫地向AI助手寻求指导。如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png"/></p>
<p>发现是由于忘记编写getter方法导致的问题。老旧项目中没有使用Lombok，这是没办法的事情，我们必须手动实现这些方法。经过修复后，相关属性能够正常赋值。</p>
<h2 id="对比字段">对比字段</h2>
<p>目前，由于两个系统所直接使用的数据库存在不一致的问题，这将导致后续的维护工作变得异常困难。因此，根据业务需求，我们需要对数据进行补齐。然而，我发现至少缺少五个数据项，并且这些数据的顺序也已经被打乱。自行进行排查无疑会浪费大量时间。</p>
<p>在这种情况下，使用AI代码助手将是一个极为有效的解决方案，如下图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png"/></p>
<p>很快就能得出结果，直接将SQL生成完成，后续只需将SQL上线即可，无需再做额外调整。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png"/></p>
<p>最后，在不断地向AI代码助手请教的过程中，我终于成功完成了CRUD这项基本任务。这样一来，我再也不需要浪费时间和精力去处理那些琐碎而无意义的错误了。</p>
<h1 id="总结">总结</h1>
<p>在软件开发的过程中，我们常常会遇到各种棘手的bug，它们可能看似无害，但却能消耗大量时间和精力。虽然解决这些问题本身可能并没有太大技术挑战，但长时间的调试和排查无疑会使人感到沮丧。然而，借助现代技术工具，尤其是AI代码助手，我们能够大大提高效率，避免陷入无休止的错误修复死循环。</p>
<p>通过今天的分享，我们看到如何利用AI助手快速定位并解决SQL排错问题，节省调试时间，同时提升工作效率。与其在错误中反复徘徊，不如学会借助工具，让自己能够更加专注于技术的深度探索与创新。</p>
<hr/>
<p>我是努力的小雨，一名 Java 服务端码农，潜心研究着 AI 技术的奥秘。我热爱技术交流与分享，对开源社区充满热情。同时也是一位腾讯云创作之星、阿里云专家博主、华为云云享专家、掘金优秀作者。</p>
<p>💡 我将不吝分享我在技术道路上的个人探索与经验，希望能为你的学习与成长带来一些启发与帮助。</p>
<p>🌟 欢迎关注努力的小雨！🌟</p>
</div> (base_parser.py:370)
2024-11-29 15:19:32 [INFO] 作者：努力的小雨 (base_parser.py:371)
2024-11-29 15:19:32 [INFO] 时间：2024-11-29 (base_parser.py:372)
2024-11-29 15:19:32 [INFO] 标题：借助AI助手如何高效排查SQL问题 (base_parser.py:373)
2024-11-29 15:19:32 [INFO] 保存文件夹：temp\-7868016454145285495\博客园-努力的小雨 (base_parser.py:260)
2024-11-29 15:19:34 [INFO] 开始保存文章 (base_parser.py:412)
2024-11-29 15:19:34 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:237)
2024-11-29 15:19:34 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:19:34 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:19:34 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:19:34 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:19:34 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:19:34 [INFO] 保存目录: temp\-7868016454145285495\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:19:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:19:34 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:19:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:19:34 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:19:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:19:34 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:19:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:19:34 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:19:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:19:34 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:19:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:19:34 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:19:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:19:34 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:19:34 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:19:34 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:19:34 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:19:34 [INFO] HTML文件已保存: temp\-7868016454145285495\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (save_utils.py:91)
2024-11-29 15:19:34 [INFO] 添加文件到文件列表：temp\-7868016454145285495\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:66)
2024-11-29 15:19:34 [INFO] 原始文件列表: [{'title': '借助AI助手如何高效排查SQL问题', 'download_url': 'temp\\-7868016454145285495\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'}] (api.py:147)
2024-11-29 15:19:34 [INFO] 请求的格式: {'html'} (api.py:158)
2024-11-29 15:19:34 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题', 'download_url': '/download/-7868016454145285495/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'} (api.py:166)
2024-11-29 15:19:34 [INFO] 最终返回的文件列表: [FileInfo(title='借助AI助手如何高效排查SQL问题', download_url='/download/-7868016454145285495/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', size=110822, format='html')] (api.py:170)
2024-11-29 15:21:24 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:21:24 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 15:21:25 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:21:25 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:21:25 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:97)
2024-11-29 15:21:25 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:97)
2024-11-29 15:21:25 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:97)
2024-11-29 15:21:25 [INFO] 原始日期文本：2024-11-29 11:21 (base_parser.py:175)
2024-11-29 15:21:25 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:97)
2024-11-29 15:21:25 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:97)
2024-11-29 15:21:25 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<p>快乐的时光总是转瞬即逝，尤其是当我们面对bug时，不仅浪费了宝贵的时间，更让人感到沮丧。因为bug往往是非常奇怪、难以捉摸的，找来找去你始终无法确定问题所在，最终意识到这些bug并没有多大技术含量。尽管如此，它们却能占据你大量的精力和时间。</p>
<p>这样反复琢磨，往往并没有多大意义，甚至对于个人的技术成长帮助也微乎其微。与其如此，不如趁这个时间去翻阅文档、深入学习，这样或许能得到更有价值的提升。今天，我将结合一个旧项目的案例，介绍如何借助AI代码助手来快速定位和解决bug，帮助你更高效地提升工作效率，节省调试时间，避免掉入冗长的bug修复死循环中。</p>
<p>今天的主题主要会涉及一些关于SQL快速排错的技巧与方法。</p>
<h1 id="快速拍错">快速拍错</h1>
<h2 id="没有足够的值">没有足够的值</h2>
<p>当前市场上存在许多流行的代码生成插件，然而这些插件在生成代码的位置上通常是固定的，并且大多偏向于MySQL数据库。这种情况使得对于老旧项目的开发者来说，使用这些插件显得格外困难，只能采取逐步编写的方式进行调整与优化。</p>
<p>今天我遇到了一个与此相关的bug。在我的项目中，我使用了Oracle的merge语句来处理插入和更新操作，以应对数据缺失和数据存在两种情况。下面是大致的SQL语句示例：</p>
<pre><code class="language-sql">merge into table a
using () b
on (a.pk = b.pk)
when not matched then
 insert ( ) values()
when matched then
 update set a.value = b.value
</code></pre>
<p>看起来似乎没有太大的问题，按照既定的结构进行撰写就可以了。然而，考虑到表结构包含大约40到50个字段，这时你还能够逐个手动输入吗？显然，这样会耗费大量的时间和精力。因此，我决定直接将表结构提供给AI助手，让它帮我进行代码的自动生成，以便快速完成任务。</p>
<p>当然，我个人更倾向于使用补全功能，这样可以让我慢慢确保代码的准确性。例如，可以按照下面的方式进行操作：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png"/></p>
<p>紧接着，联调测试的时候，发现还是少了一个值，报错如下。此时，根据以往的经验，需要进一步进行人工排查和分析，基本会耗费5-10分支时间去排错。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png"/></p>
<p>我们可以直接利用AI助手，让它为我们高效地搜索和定位所需的信息。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png"/></p>
<p>刚才我们提出的问题表达得比较模糊，因此希望能够进一步明确一下具体缺失的是哪个字段。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png"/></p>
<p>非常顺利，最后成功运行了，如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png"/></p>
<h2 id="赋值问题">赋值问题</h2>
<p>尽管我在前端已经明确传递了某个字段的值，但为什么在实际操作中没有成功赋值？同时，我的SQL语句中也确实包含了该字段的插入操作。为了更好地解决这个问题，我会毫不犹豫地向AI助手寻求指导。如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png"/></p>
<p>发现是由于忘记编写getter方法导致的问题。老旧项目中没有使用Lombok，这是没办法的事情，我们必须手动实现这些方法。经过修复后，相关属性能够正常赋值。</p>
<h2 id="对比字段">对比字段</h2>
<p>目前，由于两个系统所直接使用的数据库存在不一致的问题，这将导致后续的维护工作变得异常困难。因此，根据业务需求，我们需要对数据进行补齐。然而，我发现至少缺少五个数据项，并且这些数据的顺序也已经被打乱。自行进行排查无疑会浪费大量时间。</p>
<p>在这种情况下，使用AI代码助手将是一个极为有效的解决方案，如下图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png"/></p>
<p>很快就能得出结果，直接将SQL生成完成，后续只需将SQL上线即可，无需再做额外调整。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png"/></p>
<p>最后，在不断地向AI代码助手请教的过程中，我终于成功完成了CRUD这项基本任务。这样一来，我再也不需要浪费时间和精力去处理那些琐碎而无意义的错误了。</p>
<h1 id="总结">总结</h1>
<p>在软件开发的过程中，我们常常会遇到各种棘手的bug，它们可能看似无害，但却能消耗大量时间和精力。虽然解决这些问题本身可能并没有太大技术挑战，但长时间的调试和排查无疑会使人感到沮丧。然而，借助现代技术工具，尤其是AI代码助手，我们能够大大提高效率，避免陷入无休止的错误修复死循环。</p>
<p>通过今天的分享，我们看到如何利用AI助手快速定位并解决SQL排错问题，节省调试时间，同时提升工作效率。与其在错误中反复徘徊，不如学会借助工具，让自己能够更加专注于技术的深度探索与创新。</p>
<hr/>
<p>我是努力的小雨，一名 Java 服务端码农，潜心研究着 AI 技术的奥秘。我热爱技术交流与分享，对开源社区充满热情。同时也是一位腾讯云创作之星、阿里云专家博主、华为云云享专家、掘金优秀作者。</p>
<p>💡 我将不吝分享我在技术道路上的个人探索与经验，希望能为你的学习与成长带来一些启发与帮助。</p>
<p>🌟 欢迎关注努力的小雨！🌟</p>
</div> (base_parser.py:372)
2024-11-29 15:21:25 [INFO] 作者：努力的小雨 (base_parser.py:373)
2024-11-29 15:21:25 [INFO] 时间：2024-11-29 (base_parser.py:374)
2024-11-29 15:21:25 [INFO] 标题：借助AI助手如何高效排查SQL问题 (base_parser.py:375)
2024-11-29 15:21:25 [INFO] 保存文件夹：temp\4121341457370015985\博客园-努力的小雨 (base_parser.py:262)
2024-11-29 15:21:27 [INFO] 开始保存文章 (base_parser.py:414)
2024-11-29 15:21:27 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:239)
2024-11-29 15:21:27 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:21:27 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:21:27 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:21:27 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:21:27 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:21:27 [INFO] 保存目录: temp\4121341457370015985\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:21:27 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:21:27 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:21:27 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:21:27 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:21:27 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:21:27 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:21:27 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:21:27 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:21:27 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:21:27 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:21:27 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:21:27 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:21:27 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:21:27 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:21:27 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:21:27 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:21:27 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:21:27 [INFO] HTML文件已保存: temp\4121341457370015985\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (save_utils.py:91)
2024-11-29 15:21:27 [INFO] 添加文件到文件列表：temp\4121341457370015985\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:66)
2024-11-29 15:21:27 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:71)
2024-11-29 15:21:27 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题 (base_parser.py:73)
2024-11-29 15:21:27 [INFO] 原始文件列表: [{'title': '借助AI助手如何高效排查SQL问题', 'download_url': 'temp\\4121341457370015985\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'}] (api.py:147)
2024-11-29 15:21:27 [INFO] 请求的格式: {'html'} (api.py:158)
2024-11-29 15:21:27 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题', 'download_url': '/download/4121341457370015985/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'} (api.py:166)
2024-11-29 15:21:27 [INFO] 最终返回的文件列表: [FileInfo(title='借助AI助手如何高效排查SQL问题', download_url='/download/4121341457370015985/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', size=110822, format='html')] (api.py:170)
2024-11-29 15:22:54 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:22:54 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 15:22:55 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:22:55 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:22:55 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:97)
2024-11-29 15:22:55 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:97)
2024-11-29 15:22:55 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:97)
2024-11-29 15:22:55 [INFO] 原始日期文本：2024-11-29 11:21 (base_parser.py:175)
2024-11-29 15:22:55 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:97)
2024-11-29 15:22:55 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:97)
2024-11-29 15:22:55 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<p>快乐的时光总是转瞬即逝，尤其是当我们面对bug时，不仅浪费了宝贵的时间，更让人感到沮丧。因为bug往往是非常奇怪、难以捉摸的，找来找去你始终无法确定问题所在，最终意识到这些bug并没有多大技术含量。尽管如此，它们却能占据你大量的精力和时间。</p>
<p>这样反复琢磨，往往并没有多大意义，甚至对于个人的技术成长帮助也微乎其微。与其如此，不如趁这个时间去翻阅文档、深入学习，这样或许能得到更有价值的提升。今天，我将结合一个旧项目的案例，介绍如何借助AI代码助手来快速定位和解决bug，帮助你更高效地提升工作效率，节省调试时间，避免掉入冗长的bug修复死循环中。</p>
<p>今天的主题主要会涉及一些关于SQL快速排错的技巧与方法。</p>
<h1 id="快速拍错">快速拍错</h1>
<h2 id="没有足够的值">没有足够的值</h2>
<p>当前市场上存在许多流行的代码生成插件，然而这些插件在生成代码的位置上通常是固定的，并且大多偏向于MySQL数据库。这种情况使得对于老旧项目的开发者来说，使用这些插件显得格外困难，只能采取逐步编写的方式进行调整与优化。</p>
<p>今天我遇到了一个与此相关的bug。在我的项目中，我使用了Oracle的merge语句来处理插入和更新操作，以应对数据缺失和数据存在两种情况。下面是大致的SQL语句示例：</p>
<pre><code class="language-sql">merge into table a
using () b
on (a.pk = b.pk)
when not matched then
 insert ( ) values()
when matched then
 update set a.value = b.value
</code></pre>
<p>看起来似乎没有太大的问题，按照既定的结构进行撰写就可以了。然而，考虑到表结构包含大约40到50个字段，这时你还能够逐个手动输入吗？显然，这样会耗费大量的时间和精力。因此，我决定直接将表结构提供给AI助手，让它帮我进行代码的自动生成，以便快速完成任务。</p>
<p>当然，我个人更倾向于使用补全功能，这样可以让我慢慢确保代码的准确性。例如，可以按照下面的方式进行操作：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png"/></p>
<p>紧接着，联调测试的时候，发现还是少了一个值，报错如下。此时，根据以往的经验，需要进一步进行人工排查和分析，基本会耗费5-10分支时间去排错。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png"/></p>
<p>我们可以直接利用AI助手，让它为我们高效地搜索和定位所需的信息。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png"/></p>
<p>刚才我们提出的问题表达得比较模糊，因此希望能够进一步明确一下具体缺失的是哪个字段。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png"/></p>
<p>非常顺利，最后成功运行了，如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png"/></p>
<h2 id="赋值问题">赋值问题</h2>
<p>尽管我在前端已经明确传递了某个字段的值，但为什么在实际操作中没有成功赋值？同时，我的SQL语句中也确实包含了该字段的插入操作。为了更好地解决这个问题，我会毫不犹豫地向AI助手寻求指导。如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png"/></p>
<p>发现是由于忘记编写getter方法导致的问题。老旧项目中没有使用Lombok，这是没办法的事情，我们必须手动实现这些方法。经过修复后，相关属性能够正常赋值。</p>
<h2 id="对比字段">对比字段</h2>
<p>目前，由于两个系统所直接使用的数据库存在不一致的问题，这将导致后续的维护工作变得异常困难。因此，根据业务需求，我们需要对数据进行补齐。然而，我发现至少缺少五个数据项，并且这些数据的顺序也已经被打乱。自行进行排查无疑会浪费大量时间。</p>
<p>在这种情况下，使用AI代码助手将是一个极为有效的解决方案，如下图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png"/></p>
<p>很快就能得出结果，直接将SQL生成完成，后续只需将SQL上线即可，无需再做额外调整。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png"/></p>
<p>最后，在不断地向AI代码助手请教的过程中，我终于成功完成了CRUD这项基本任务。这样一来，我再也不需要浪费时间和精力去处理那些琐碎而无意义的错误了。</p>
<h1 id="总结">总结</h1>
<p>在软件开发的过程中，我们常常会遇到各种棘手的bug，它们可能看似无害，但却能消耗大量时间和精力。虽然解决这些问题本身可能并没有太大技术挑战，但长时间的调试和排查无疑会使人感到沮丧。然而，借助现代技术工具，尤其是AI代码助手，我们能够大大提高效率，避免陷入无休止的错误修复死循环。</p>
<p>通过今天的分享，我们看到如何利用AI助手快速定位并解决SQL排错问题，节省调试时间，同时提升工作效率。与其在错误中反复徘徊，不如学会借助工具，让自己能够更加专注于技术的深度探索与创新。</p>
<hr/>
<p>我是努力的小雨，一名 Java 服务端码农，潜心研究着 AI 技术的奥秘。我热爱技术交流与分享，对开源社区充满热情。同时也是一位腾讯云创作之星、阿里云专家博主、华为云云享专家、掘金优秀作者。</p>
<p>💡 我将不吝分享我在技术道路上的个人探索与经验，希望能为你的学习与成长带来一些启发与帮助。</p>
<p>🌟 欢迎关注努力的小雨！🌟</p>
</div> (base_parser.py:372)
2024-11-29 15:22:55 [INFO] 作者：努力的小雨 (base_parser.py:373)
2024-11-29 15:22:55 [INFO] 时间：2024-11-29 (base_parser.py:374)
2024-11-29 15:22:55 [INFO] 标题：借助AI助手如何高效排查SQL问题 (base_parser.py:375)
2024-11-29 15:22:55 [INFO] 保存文件夹：temp\-2649886461551646682\博客园-努力的小雨 (base_parser.py:262)
2024-11-29 15:22:57 [INFO] 开始保存文章 (base_parser.py:414)
2024-11-29 15:22:57 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:239)
2024-11-29 15:22:57 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:22:57 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:22:57 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:22:57 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:22:57 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:22:57 [INFO] 保存目录: temp\-2649886461551646682\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:22:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:22:57 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:22:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:22:57 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:22:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:22:57 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:22:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:22:57 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:22:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:22:57 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:22:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:22:57 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:22:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:22:57 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:22:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:22:57 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:22:57 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:22:57 [INFO] HTML文件已保存: temp\-2649886461551646682\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (save_utils.py:91)
2024-11-29 15:22:57 [INFO] 添加文件到文件列表：temp\-2649886461551646682\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:66)
2024-11-29 15:22:57 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:71)
2024-11-29 15:22:57 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:22:57 [INFO] 原始文件列表: [{'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-2649886461551646682\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'}] (api.py:147)
2024-11-29 15:22:57 [INFO] 请求的格式: {'html'} (api.py:158)
2024-11-29 15:22:57 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-2649886461551646682/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'} (api.py:166)
2024-11-29 15:22:57 [INFO] 最终返回的文件列表: [FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-2649886461551646682/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', size=110822, format='html')] (api.py:170)
2024-11-29 15:26:41 [INFO] 原始请求体: b'{\n  "files": [\n    {\n      "url": "/download/-2649886461551646682/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html",\n      "filename": "\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29"\n    }\n  ]\n}' (api.py:72)
2024-11-29 15:26:41 [INFO] 解析后的请求参数: {'files': [{'url': '/download/-2649886461551646682/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29'}]} (api.py:73)
2024-11-29 15:26:41 [INFO] 处理文件: URL=/download/-2649886461551646682/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 路径=temp/-2649886461551646682/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (api.py:83)
2024-11-29 15:26:41 [INFO] 完整路径: temp\-2649886461551646682\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:87)
2024-11-29 15:26:41 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (api.py:98)
2024-11-29 15:26:41 [INFO] 生成ZIP文件: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (api.py:105)
2024-11-29 15:26:41 [ERROR] 请求参数验证失败: 'latin-1' codec can't encode characters in position 22-23: ordinal not in range(256) (api.py:117)
2024-11-29 15:27:02 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:27:02 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 15:27:03 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:27:03 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:27:03 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:97)
2024-11-29 15:27:03 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:97)
2024-11-29 15:27:03 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:97)
2024-11-29 15:27:03 [INFO] 原始日期文本：2024-11-29 11:21 (base_parser.py:175)
2024-11-29 15:27:03 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:97)
2024-11-29 15:27:03 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:97)
2024-11-29 15:27:03 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<p>快乐的时光总是转瞬即逝，尤其是当我们面对bug时，不仅浪费了宝贵的时间，更让人感到沮丧。因为bug往往是非常奇怪、难以捉摸的，找来找去你始终无法确定问题所在，最终意识到这些bug并没有多大技术含量。尽管如此，它们却能占据你大量的精力和时间。</p>
<p>这样反复琢磨，往往并没有多大意义，甚至对于个人的技术成长帮助也微乎其微。与其如此，不如趁这个时间去翻阅文档、深入学习，这样或许能得到更有价值的提升。今天，我将结合一个旧项目的案例，介绍如何借助AI代码助手来快速定位和解决bug，帮助你更高效地提升工作效率，节省调试时间，避免掉入冗长的bug修复死循环中。</p>
<p>今天的主题主要会涉及一些关于SQL快速排错的技巧与方法。</p>
<h1 id="快速拍错">快速拍错</h1>
<h2 id="没有足够的值">没有足够的值</h2>
<p>当前市场上存在许多流行的代码生成插件，然而这些插件在生成代码的位置上通常是固定的，并且大多偏向于MySQL数据库。这种情况使得对于老旧项目的开发者来说，使用这些插件显得格外困难，只能采取逐步编写的方式进行调整与优化。</p>
<p>今天我遇到了一个与此相关的bug。在我的项目中，我使用了Oracle的merge语句来处理插入和更新操作，以应对数据缺失和数据存在两种情况。下面是大致的SQL语句示例：</p>
<pre><code class="language-sql">merge into table a
using () b
on (a.pk = b.pk)
when not matched then
 insert ( ) values()
when matched then
 update set a.value = b.value
</code></pre>
<p>看起来似乎没有太大的问题，按照既定的结构进行撰写就可以了。然而，考虑到表结构包含大约40到50个字段，这时你还能够逐个手动输入吗？显然，这样会耗费大量的时间和精力。因此，我决定直接将表结构提供给AI助手，让它帮我进行代码的自动生成，以便快速完成任务。</p>
<p>当然，我个人更倾向于使用补全功能，这样可以让我慢慢确保代码的准确性。例如，可以按照下面的方式进行操作：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png"/></p>
<p>紧接着，联调测试的时候，发现还是少了一个值，报错如下。此时，根据以往的经验，需要进一步进行人工排查和分析，基本会耗费5-10分支时间去排错。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png"/></p>
<p>我们可以直接利用AI助手，让它为我们高效地搜索和定位所需的信息。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png"/></p>
<p>刚才我们提出的问题表达得比较模糊，因此希望能够进一步明确一下具体缺失的是哪个字段。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png"/></p>
<p>非常顺利，最后成功运行了，如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png"/></p>
<h2 id="赋值问题">赋值问题</h2>
<p>尽管我在前端已经明确传递了某个字段的值，但为什么在实际操作中没有成功赋值？同时，我的SQL语句中也确实包含了该字段的插入操作。为了更好地解决这个问题，我会毫不犹豫地向AI助手寻求指导。如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png"/></p>
<p>发现是由于忘记编写getter方法导致的问题。老旧项目中没有使用Lombok，这是没办法的事情，我们必须手动实现这些方法。经过修复后，相关属性能够正常赋值。</p>
<h2 id="对比字段">对比字段</h2>
<p>目前，由于两个系统所直接使用的数据库存在不一致的问题，这将导致后续的维护工作变得异常困难。因此，根据业务需求，我们需要对数据进行补齐。然而，我发现至少缺少五个数据项，并且这些数据的顺序也已经被打乱。自行进行排查无疑会浪费大量时间。</p>
<p>在这种情况下，使用AI代码助手将是一个极为有效的解决方案，如下图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png"/></p>
<p>很快就能得出结果，直接将SQL生成完成，后续只需将SQL上线即可，无需再做额外调整。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png"/></p>
<p>最后，在不断地向AI代码助手请教的过程中，我终于成功完成了CRUD这项基本任务。这样一来，我再也不需要浪费时间和精力去处理那些琐碎而无意义的错误了。</p>
<h1 id="总结">总结</h1>
<p>在软件开发的过程中，我们常常会遇到各种棘手的bug，它们可能看似无害，但却能消耗大量时间和精力。虽然解决这些问题本身可能并没有太大技术挑战，但长时间的调试和排查无疑会使人感到沮丧。然而，借助现代技术工具，尤其是AI代码助手，我们能够大大提高效率，避免陷入无休止的错误修复死循环。</p>
<p>通过今天的分享，我们看到如何利用AI助手快速定位并解决SQL排错问题，节省调试时间，同时提升工作效率。与其在错误中反复徘徊，不如学会借助工具，让自己能够更加专注于技术的深度探索与创新。</p>
<hr/>
<p>我是努力的小雨，一名 Java 服务端码农，潜心研究着 AI 技术的奥秘。我热爱技术交流与分享，对开源社区充满热情。同时也是一位腾讯云创作之星、阿里云专家博主、华为云云享专家、掘金优秀作者。</p>
<p>💡 我将不吝分享我在技术道路上的个人探索与经验，希望能为你的学习与成长带来一些启发与帮助。</p>
<p>🌟 欢迎关注努力的小雨！🌟</p>
</div> (base_parser.py:372)
2024-11-29 15:27:03 [INFO] 作者：努力的小雨 (base_parser.py:373)
2024-11-29 15:27:03 [INFO] 时间：2024-11-29 (base_parser.py:374)
2024-11-29 15:27:03 [INFO] 标题：借助AI助手如何高效排查SQL问题 (base_parser.py:375)
2024-11-29 15:27:03 [INFO] 保存文件夹：temp\-8632999224797644276\博客园-努力的小雨 (base_parser.py:262)
2024-11-29 15:27:06 [INFO] 开始保存文章 (base_parser.py:414)
2024-11-29 15:27:06 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:239)
2024-11-29 15:27:06 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:27:06 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:27:06 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:27:06 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:27:06 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:27:06 [INFO] 保存目录: temp\-8632999224797644276\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:27:06 [INFO] HTML文件已保存: temp\-8632999224797644276\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (save_utils.py:91)
2024-11-29 15:27:06 [INFO] 添加文件到文件列表：temp\-8632999224797644276\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:66)
2024-11-29 15:27:06 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:71)
2024-11-29 15:27:06 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:27:06 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:239)
2024-11-29 15:27:06 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:27:06 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:27:06 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:27:06 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:27:06 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:27:06 [INFO] 保存目录: temp\-8632999224797644276\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:27:06 [INFO] Markdown文件已保存: temp\-8632999224797644276\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (save_utils.py:127)
2024-11-29 15:27:06 [INFO] 添加文件到文件列表：temp\-8632999224797644276\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:66)
2024-11-29 15:27:06 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:71)
2024-11-29 15:27:06 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:27:06 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:239)
2024-11-29 15:27:06 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:27:06 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:27:06 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:27:06 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:27:06 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:27:06 [INFO] 保存目录: temp\-8632999224797644276\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:27:06 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:27:06 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:27:07 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:300)
2024-11-29 15:27:07 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:300)
2024-11-29 15:27:08 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:300)
2024-11-29 15:27:09 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:300)
2024-11-29 15:27:09 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:300)
2024-11-29 15:27:10 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:300)
2024-11-29 15:27:11 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:300)
2024-11-29 15:27:11 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:300)
2024-11-29 15:27:11 [INFO] MHTML文件已保存: temp\-8632999224797644276\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (save_utils.py:265)
2024-11-29 15:27:11 [INFO] 添加文件到文件列表：temp\-8632999224797644276\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:66)
2024-11-29 15:27:11 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:71)
2024-11-29 15:27:11 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:27:11 [INFO] 原始文件列表: [{'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-8632999224797644276\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'}, {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-8632999224797644276\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'size': 5989, 'format': 'md'}, {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-8632999224797644276\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'size': 398643, 'format': 'mhtml'}] (api.py:148)
2024-11-29 15:27:11 [INFO] 请求的格式: {'md', 'mhtml', 'html'} (api.py:159)
2024-11-29 15:27:11 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'} (api.py:167)
2024-11-29 15:27:11 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'size': 5989, 'format': 'md'} (api.py:167)
2024-11-29 15:27:11 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'size': 398643, 'format': 'mhtml'} (api.py:167)
2024-11-29 15:27:11 [INFO] 最终返回的文件列表: [FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', size=110822, format='html'), FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', size=5989, format='md'), FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', size=398643, format='mhtml')] (api.py:171)
2024-11-29 15:27:15 [INFO] 原始请求体: b'{"files":[{"url":"/download/-8632999224797644276/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html"},{"url":"/download/-8632999224797644276/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.md","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.md"},{"url":"/download/-8632999224797644276/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.mhtml","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.mhtml"}]}' (api.py:72)
2024-11-29 15:27:15 [INFO] 解析后的请求参数: {'files': [{'url': '/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html'}, {'url': '/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md'}, {'url': '/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml'}]} (api.py:73)
2024-11-29 15:27:15 [INFO] 处理文件: URL=/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 路径=temp/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:83)
2024-11-29 15:27:15 [INFO] 完整路径: temp\-8632999224797644276\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:87)
2024-11-29 15:27:15 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:98)
2024-11-29 15:27:15 [INFO] 处理文件: URL=/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md, 路径=temp/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:83)
2024-11-29 15:27:15 [INFO] 完整路径: temp\-8632999224797644276\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:87)
2024-11-29 15:27:15 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:98)
2024-11-29 15:27:15 [INFO] 处理文件: URL=/download/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml, 路径=temp/-8632999224797644276/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:83)
2024-11-29 15:27:15 [INFO] 完整路径: temp\-8632999224797644276\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:87)
2024-11-29 15:27:15 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:98)
2024-11-29 15:27:15 [INFO] 生成ZIP文件: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:105)
2024-11-29 15:27:15 [ERROR] 请求参数验证失败: 'latin-1' codec can't encode characters in position 22-23: ordinal not in range(256) (api.py:117)
2024-11-29 15:29:32 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:29:32 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 15:29:33 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:29:33 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:29:33 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:97)
2024-11-29 15:29:33 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:97)
2024-11-29 15:29:33 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:97)
2024-11-29 15:29:33 [INFO] 原始日期文本：2024-11-29 11:21 (base_parser.py:175)
2024-11-29 15:29:33 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:97)
2024-11-29 15:29:33 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:97)
2024-11-29 15:29:33 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<p>快乐的时光总是转瞬即逝，尤其是当我们面对bug时，不仅浪费了宝贵的时间，更让人感到沮丧。因为bug往往是非常奇怪、难以捉摸的，找来找去你始终无法确定问题所在，最终意识到这些bug并没有多大技术含量。尽管如此，它们却能占据你大量的精力和时间。</p>
<p>这样反复琢磨，往往并没有多大意义，甚至对于个人的技术成长帮助也微乎其微。与其如此，不如趁这个时间去翻阅文档、深入学习，这样或许能得到更有价值的提升。今天，我将结合一个旧项目的案例，介绍如何借助AI代码助手来快速定位和解决bug，帮助你更高效地提升工作效率，节省调试时间，避免掉入冗长的bug修复死循环中。</p>
<p>今天的主题主要会涉及一些关于SQL快速排错的技巧与方法。</p>
<h1 id="快速拍错">快速拍错</h1>
<h2 id="没有足够的值">没有足够的值</h2>
<p>当前市场上存在许多流行的代码生成插件，然而这些插件在生成代码的位置上通常是固定的，并且大多偏向于MySQL数据库。这种情况使得对于老旧项目的开发者来说，使用这些插件显得格外困难，只能采取逐步编写的方式进行调整与优化。</p>
<p>今天我遇到了一个与此相关的bug。在我的项目中，我使用了Oracle的merge语句来处理插入和更新操作，以应对数据缺失和数据存在两种情况。下面是大致的SQL语句示例：</p>
<pre><code class="language-sql">merge into table a
using () b
on (a.pk = b.pk)
when not matched then
 insert ( ) values()
when matched then
 update set a.value = b.value
</code></pre>
<p>看起来似乎没有太大的问题，按照既定的结构进行撰写就可以了。然而，考虑到表结构包含大约40到50个字段，这时你还能够逐个手动输入吗？显然，这样会耗费大量的时间和精力。因此，我决定直接将表结构提供给AI助手，让它帮我进行代码的自动生成，以便快速完成任务。</p>
<p>当然，我个人更倾向于使用补全功能，这样可以让我慢慢确保代码的准确性。例如，可以按照下面的方式进行操作：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png"/></p>
<p>紧接着，联调测试的时候，发现还是少了一个值，报错如下。此时，根据以往的经验，需要进一步进行人工排查和分析，基本会耗费5-10分支时间去排错。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png"/></p>
<p>我们可以直接利用AI助手，让它为我们高效地搜索和定位所需的信息。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png"/></p>
<p>刚才我们提出的问题表达得比较模糊，因此希望能够进一步明确一下具体缺失的是哪个字段。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png"/></p>
<p>非常顺利，最后成功运行了，如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png"/></p>
<h2 id="赋值问题">赋值问题</h2>
<p>尽管我在前端已经明确传递了某个字段的值，但为什么在实际操作中没有成功赋值？同时，我的SQL语句中也确实包含了该字段的插入操作。为了更好地解决这个问题，我会毫不犹豫地向AI助手寻求指导。如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png"/></p>
<p>发现是由于忘记编写getter方法导致的问题。老旧项目中没有使用Lombok，这是没办法的事情，我们必须手动实现这些方法。经过修复后，相关属性能够正常赋值。</p>
<h2 id="对比字段">对比字段</h2>
<p>目前，由于两个系统所直接使用的数据库存在不一致的问题，这将导致后续的维护工作变得异常困难。因此，根据业务需求，我们需要对数据进行补齐。然而，我发现至少缺少五个数据项，并且这些数据的顺序也已经被打乱。自行进行排查无疑会浪费大量时间。</p>
<p>在这种情况下，使用AI代码助手将是一个极为有效的解决方案，如下图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png"/></p>
<p>很快就能得出结果，直接将SQL生成完成，后续只需将SQL上线即可，无需再做额外调整。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png"/></p>
<p>最后，在不断地向AI代码助手请教的过程中，我终于成功完成了CRUD这项基本任务。这样一来，我再也不需要浪费时间和精力去处理那些琐碎而无意义的错误了。</p>
<h1 id="总结">总结</h1>
<p>在软件开发的过程中，我们常常会遇到各种棘手的bug，它们可能看似无害，但却能消耗大量时间和精力。虽然解决这些问题本身可能并没有太大技术挑战，但长时间的调试和排查无疑会使人感到沮丧。然而，借助现代技术工具，尤其是AI代码助手，我们能够大大提高效率，避免陷入无休止的错误修复死循环。</p>
<p>通过今天的分享，我们看到如何利用AI助手快速定位并解决SQL排错问题，节省调试时间，同时提升工作效率。与其在错误中反复徘徊，不如学会借助工具，让自己能够更加专注于技术的深度探索与创新。</p>
<hr/>
<p>我是努力的小雨，一名 Java 服务端码农，潜心研究着 AI 技术的奥秘。我热爱技术交流与分享，对开源社区充满热情。同时也是一位腾讯云创作之星、阿里云专家博主、华为云云享专家、掘金优秀作者。</p>
<p>💡 我将不吝分享我在技术道路上的个人探索与经验，希望能为你的学习与成长带来一些启发与帮助。</p>
<p>🌟 欢迎关注努力的小雨！🌟</p>
</div> (base_parser.py:372)
2024-11-29 15:29:33 [INFO] 作者：努力的小雨 (base_parser.py:373)
2024-11-29 15:29:33 [INFO] 时间：2024-11-29 (base_parser.py:374)
2024-11-29 15:29:33 [INFO] 标题：借助AI助手如何高效排查SQL问题 (base_parser.py:375)
2024-11-29 15:29:33 [INFO] 保存文件夹：temp\-3552210400235744823\博客园-努力的小雨 (base_parser.py:262)
2024-11-29 15:29:36 [INFO] 开始保存文章 (base_parser.py:414)
2024-11-29 15:29:36 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:239)
2024-11-29 15:29:36 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:29:36 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:29:36 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:29:36 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:29:36 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:29:36 [INFO] 保存目录: temp\-3552210400235744823\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:29:36 [INFO] HTML文件已保存: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (save_utils.py:91)
2024-11-29 15:29:36 [INFO] 添加文件到文件列表：temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:66)
2024-11-29 15:29:36 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:71)
2024-11-29 15:29:36 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:29:36 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:239)
2024-11-29 15:29:36 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:29:36 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:29:36 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:29:36 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:29:36 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:29:36 [INFO] 保存目录: temp\-3552210400235744823\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:29:36 [INFO] Markdown文件已保存: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (save_utils.py:127)
2024-11-29 15:29:36 [INFO] 添加文件到文件列表：temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:66)
2024-11-29 15:29:36 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:71)
2024-11-29 15:29:36 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:29:36 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:239)
2024-11-29 15:29:36 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:29:36 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:29:36 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:29:36 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:29:36 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:29:36 [INFO] 保存目录: temp\-3552210400235744823\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:29:36 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:29:36 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:29:37 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:300)
2024-11-29 15:29:37 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:300)
2024-11-29 15:29:38 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:300)
2024-11-29 15:29:38 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:300)
2024-11-29 15:29:39 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:300)
2024-11-29 15:29:39 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:300)
2024-11-29 15:29:40 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:300)
2024-11-29 15:29:41 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:300)
2024-11-29 15:29:41 [INFO] MHTML文件已保存: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (save_utils.py:265)
2024-11-29 15:29:41 [INFO] 添加文件到文件列表：temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:66)
2024-11-29 15:29:41 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:71)
2024-11-29 15:29:41 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:29:41 [INFO] 原始文件列表: [{'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-3552210400235744823\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'}, {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-3552210400235744823\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'size': 5989, 'format': 'md'}, {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-3552210400235744823\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'size': 398643, 'format': 'mhtml'}] (api.py:152)
2024-11-29 15:29:41 [INFO] 请求的格式: {'html', 'mhtml', 'md'} (api.py:163)
2024-11-29 15:29:41 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'} (api.py:171)
2024-11-29 15:29:41 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'size': 5989, 'format': 'md'} (api.py:171)
2024-11-29 15:29:41 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'size': 398643, 'format': 'mhtml'} (api.py:171)
2024-11-29 15:29:41 [INFO] 最终返回的文件列表: [FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', size=110822, format='html'), FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', size=5989, format='md'), FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', size=398643, format='mhtml')] (api.py:175)
2024-11-29 15:29:42 [INFO] 原始请求体: b'{"files":[{"url":"/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html"},{"url":"/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.md","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.md"},{"url":"/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.mhtml","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.mhtml"}]}' (api.py:73)
2024-11-29 15:29:42 [INFO] 解析后的请求参数: {'files': [{'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html'}, {'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md'}, {'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml'}]} (api.py:74)
2024-11-29 15:29:42 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:89)
2024-11-29 15:29:42 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:93)
2024-11-29 15:29:42 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:104)
2024-11-29 15:29:42 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:89)
2024-11-29 15:29:42 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:93)
2024-11-29 15:29:42 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:104)
2024-11-29 15:29:42 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:89)
2024-11-29 15:29:42 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:93)
2024-11-29 15:29:42 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:104)
2024-11-29 15:29:42 [INFO] 生成ZIP文件: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html.zip (api.py:109)
2024-11-29 15:31:03 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:31:03 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 15:31:07 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:31:07 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:31:07 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:97)
2024-11-29 15:31:07 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:97)
2024-11-29 15:31:07 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:97)
2024-11-29 15:31:07 [INFO] 原始日期文本：2024-11-29 11:21 (base_parser.py:175)
2024-11-29 15:31:07 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:97)
2024-11-29 15:31:07 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:97)
2024-11-29 15:31:07 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<p>快乐的时光总是转瞬即逝，尤其是当我们面对bug时，不仅浪费了宝贵的时间，更让人感到沮丧。因为bug往往是非常奇怪、难以捉摸的，找来找去你始终无法确定问题所在，最终意识到这些bug并没有多大技术含量。尽管如此，它们却能占据你大量的精力和时间。</p>
<p>这样反复琢磨，往往并没有多大意义，甚至对于个人的技术成长帮助也微乎其微。与其如此，不如趁这个时间去翻阅文档、深入学习，这样或许能得到更有价值的提升。今天，我将结合一个旧项目的案例，介绍如何借助AI代码助手来快速定位和解决bug，帮助你更高效地提升工作效率，节省调试时间，避免掉入冗长的bug修复死循环中。</p>
<p>今天的主题主要会涉及一些关于SQL快速排错的技巧与方法。</p>
<h1 id="快速拍错">快速拍错</h1>
<h2 id="没有足够的值">没有足够的值</h2>
<p>当前市场上存在许多流行的代码生成插件，然而这些插件在生成代码的位置上通常是固定的，并且大多偏向于MySQL数据库。这种情况使得对于老旧项目的开发者来说，使用这些插件显得格外困难，只能采取逐步编写的方式进行调整与优化。</p>
<p>今天我遇到了一个与此相关的bug。在我的项目中，我使用了Oracle的merge语句来处理插入和更新操作，以应对数据缺失和数据存在两种情况。下面是大致的SQL语句示例：</p>
<pre><code class="language-sql">merge into table a
using () b
on (a.pk = b.pk)
when not matched then
 insert ( ) values()
when matched then
 update set a.value = b.value
</code></pre>
<p>看起来似乎没有太大的问题，按照既定的结构进行撰写就可以了。然而，考虑到表结构包含大约40到50个字段，这时你还能够逐个手动输入吗？显然，这样会耗费大量的时间和精力。因此，我决定直接将表结构提供给AI助手，让它帮我进行代码的自动生成，以便快速完成任务。</p>
<p>当然，我个人更倾向于使用补全功能，这样可以让我慢慢确保代码的准确性。例如，可以按照下面的方式进行操作：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png"/></p>
<p>紧接着，联调测试的时候，发现还是少了一个值，报错如下。此时，根据以往的经验，需要进一步进行人工排查和分析，基本会耗费5-10分支时间去排错。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png"/></p>
<p>我们可以直接利用AI助手，让它为我们高效地搜索和定位所需的信息。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png"/></p>
<p>刚才我们提出的问题表达得比较模糊，因此希望能够进一步明确一下具体缺失的是哪个字段。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png"/></p>
<p>非常顺利，最后成功运行了，如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png"/></p>
<h2 id="赋值问题">赋值问题</h2>
<p>尽管我在前端已经明确传递了某个字段的值，但为什么在实际操作中没有成功赋值？同时，我的SQL语句中也确实包含了该字段的插入操作。为了更好地解决这个问题，我会毫不犹豫地向AI助手寻求指导。如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png"/></p>
<p>发现是由于忘记编写getter方法导致的问题。老旧项目中没有使用Lombok，这是没办法的事情，我们必须手动实现这些方法。经过修复后，相关属性能够正常赋值。</p>
<h2 id="对比字段">对比字段</h2>
<p>目前，由于两个系统所直接使用的数据库存在不一致的问题，这将导致后续的维护工作变得异常困难。因此，根据业务需求，我们需要对数据进行补齐。然而，我发现至少缺少五个数据项，并且这些数据的顺序也已经被打乱。自行进行排查无疑会浪费大量时间。</p>
<p>在这种情况下，使用AI代码助手将是一个极为有效的解决方案，如下图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png"/></p>
<p>很快就能得出结果，直接将SQL生成完成，后续只需将SQL上线即可，无需再做额外调整。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png"/></p>
<p>最后，在不断地向AI代码助手请教的过程中，我终于成功完成了CRUD这项基本任务。这样一来，我再也不需要浪费时间和精力去处理那些琐碎而无意义的错误了。</p>
<h1 id="总结">总结</h1>
<p>在软件开发的过程中，我们常常会遇到各种棘手的bug，它们可能看似无害，但却能消耗大量时间和精力。虽然解决这些问题本身可能并没有太大技术挑战，但长时间的调试和排查无疑会使人感到沮丧。然而，借助现代技术工具，尤其是AI代码助手，我们能够大大提高效率，避免陷入无休止的错误修复死循环。</p>
<p>通过今天的分享，我们看到如何利用AI助手快速定位并解决SQL排错问题，节省调试时间，同时提升工作效率。与其在错误中反复徘徊，不如学会借助工具，让自己能够更加专注于技术的深度探索与创新。</p>
<hr/>
<p>我是努力的小雨，一名 Java 服务端码农，潜心研究着 AI 技术的奥秘。我热爱技术交流与分享，对开源社区充满热情。同时也是一位腾讯云创作之星、阿里云专家博主、华为云云享专家、掘金优秀作者。</p>
<p>💡 我将不吝分享我在技术道路上的个人探索与经验，希望能为你的学习与成长带来一些启发与帮助。</p>
<p>🌟 欢迎关注努力的小雨！🌟</p>
</div> (base_parser.py:372)
2024-11-29 15:31:07 [INFO] 作者：努力的小雨 (base_parser.py:373)
2024-11-29 15:31:07 [INFO] 时间：2024-11-29 (base_parser.py:374)
2024-11-29 15:31:07 [INFO] 标题：借助AI助手如何高效排查SQL问题 (base_parser.py:375)
2024-11-29 15:31:07 [INFO] 保存文件夹：temp\-3552210400235744823\博客园-努力的小雨 (base_parser.py:262)
2024-11-29 15:31:15 [INFO] 开始保存文章 (base_parser.py:414)
2024-11-29 15:31:15 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:239)
2024-11-29 15:31:15 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:31:15 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:31:15 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:31:15 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:31:15 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:31:15 [INFO] 保存目录: temp\-3552210400235744823\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:31:15 [INFO] HTML文件已保存: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (save_utils.py:91)
2024-11-29 15:31:15 [INFO] 添加文件到文件列表：temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:66)
2024-11-29 15:31:15 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:71)
2024-11-29 15:31:15 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:31:15 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:239)
2024-11-29 15:31:15 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:31:15 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:31:15 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:31:15 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:31:15 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:31:15 [INFO] 保存目录: temp\-3552210400235744823\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:31:15 [INFO] Markdown文件已保存: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (save_utils.py:127)
2024-11-29 15:31:15 [INFO] 添加文件到文件列表：temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:66)
2024-11-29 15:31:15 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:71)
2024-11-29 15:31:15 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:31:15 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:239)
2024-11-29 15:31:15 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:31:15 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:31:15 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:31:15 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:31:15 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:31:15 [INFO] 保存目录: temp\-3552210400235744823\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:31:15 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:31:15 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:31:16 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:300)
2024-11-29 15:31:17 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:300)
2024-11-29 15:31:18 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:300)
2024-11-29 15:31:20 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:300)
2024-11-29 15:31:21 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:300)
2024-11-29 15:31:22 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:300)
2024-11-29 15:31:24 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:300)
2024-11-29 15:31:25 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:300)
2024-11-29 15:31:25 [INFO] MHTML文件已保存: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (save_utils.py:265)
2024-11-29 15:31:25 [INFO] 添加文件到文件列表：temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:66)
2024-11-29 15:31:25 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:71)
2024-11-29 15:31:25 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:31:25 [INFO] 原始文件列表: [{'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-3552210400235744823\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'}, {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-3552210400235744823\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'size': 5989, 'format': 'md'}, {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-3552210400235744823\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'size': 398643, 'format': 'mhtml'}] (api.py:152)
2024-11-29 15:31:25 [INFO] 请求的格式: {'html', 'mhtml', 'md'} (api.py:163)
2024-11-29 15:31:25 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'} (api.py:171)
2024-11-29 15:31:25 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'size': 5989, 'format': 'md'} (api.py:171)
2024-11-29 15:31:25 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'size': 398643, 'format': 'mhtml'} (api.py:171)
2024-11-29 15:31:25 [INFO] 最终返回的文件列表: [FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', size=110822, format='html'), FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', size=5989, format='md'), FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', size=398643, format='mhtml')] (api.py:175)
2024-11-29 15:31:29 [INFO] 原始请求体: b'{"files":[{"url":"/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html"},{"url":"/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.md","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.md"},{"url":"/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.mhtml","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.mhtml"}]}' (api.py:73)
2024-11-29 15:31:29 [INFO] 解析后的请求参数: {'files': [{'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html'}, {'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md'}, {'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml'}]} (api.py:74)
2024-11-29 15:31:29 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:89)
2024-11-29 15:31:29 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:93)
2024-11-29 15:31:29 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:104)
2024-11-29 15:31:29 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:89)
2024-11-29 15:31:29 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:93)
2024-11-29 15:31:29 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:104)
2024-11-29 15:31:29 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:89)
2024-11-29 15:31:29 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:93)
2024-11-29 15:31:29 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:104)
2024-11-29 15:31:29 [INFO] 生成ZIP文件: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html.zip (api.py:109)
2024-11-29 15:34:38 [INFO] 原始请求体: b'{\n  "files": [\n    {\n      "url": "/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html",\n      "filename": "\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29"\n    }\n  ]\n}' (api.py:73)
2024-11-29 15:34:38 [INFO] 解析后的请求参数: {'files': [{'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29'}]} (api.py:74)
2024-11-29 15:34:38 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (api.py:89)
2024-11-29 15:34:38 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:93)
2024-11-29 15:34:38 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (api.py:104)
2024-11-29 15:34:38 [INFO] 生成ZIP文件: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.zip (api.py:109)
2024-11-29 15:37:52 [INFO] 已加载知乎 cookies (zhihu.py:26)
2024-11-29 15:37:52 [INFO] 使用 博客园 解析器 (blog_parser.py:36)
2024-11-29 15:37:53 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:37:53 [DEBUG] 尝试选择器: tag=div, attrs={'class': 'author_name'} (base_parser.py:97)
2024-11-29 15:37:53 [DEBUG] 尝试选择器: tag=a, attrs={'id': 'author_profile_detail_blog'} (base_parser.py:97)
2024-11-29 15:37:53 [DEBUG] 尝试选择器: tag=a, attrs={'class': 'headermaintitle'} (base_parser.py:97)
2024-11-29 15:37:53 [DEBUG] 尝试选择器: tag=span, attrs={'id': 'post-date'} (base_parser.py:97)
2024-11-29 15:37:53 [INFO] 原始日期文本：2024-11-29 11:21 (base_parser.py:175)
2024-11-29 15:37:53 [DEBUG] 尝试选择器: tag=h1, attrs={'class': 'postTitle'} (base_parser.py:97)
2024-11-29 15:37:53 [DEBUG] 尝试选择器: tag=div, attrs={'id': 'cnblogs_post_body'} (base_parser.py:97)
2024-11-29 15:37:53 [DEBUG] 内容：<div class="blogpost-body cnblogs-markdown" id="cnblogs_post_body">
<p>快乐的时光总是转瞬即逝，尤其是当我们面对bug时，不仅浪费了宝贵的时间，更让人感到沮丧。因为bug往往是非常奇怪、难以捉摸的，找来找去你始终无法确定问题所在，最终意识到这些bug并没有多大技术含量。尽管如此，它们却能占据你大量的精力和时间。</p>
<p>这样反复琢磨，往往并没有多大意义，甚至对于个人的技术成长帮助也微乎其微。与其如此，不如趁这个时间去翻阅文档、深入学习，这样或许能得到更有价值的提升。今天，我将结合一个旧项目的案例，介绍如何借助AI代码助手来快速定位和解决bug，帮助你更高效地提升工作效率，节省调试时间，避免掉入冗长的bug修复死循环中。</p>
<p>今天的主题主要会涉及一些关于SQL快速排错的技巧与方法。</p>
<h1 id="快速拍错">快速拍错</h1>
<h2 id="没有足够的值">没有足够的值</h2>
<p>当前市场上存在许多流行的代码生成插件，然而这些插件在生成代码的位置上通常是固定的，并且大多偏向于MySQL数据库。这种情况使得对于老旧项目的开发者来说，使用这些插件显得格外困难，只能采取逐步编写的方式进行调整与优化。</p>
<p>今天我遇到了一个与此相关的bug。在我的项目中，我使用了Oracle的merge语句来处理插入和更新操作，以应对数据缺失和数据存在两种情况。下面是大致的SQL语句示例：</p>
<pre><code class="language-sql">merge into table a
using () b
on (a.pk = b.pk)
when not matched then
 insert ( ) values()
when matched then
 update set a.value = b.value
</code></pre>
<p>看起来似乎没有太大的问题，按照既定的结构进行撰写就可以了。然而，考虑到表结构包含大约40到50个字段，这时你还能够逐个手动输入吗？显然，这样会耗费大量的时间和精力。因此，我决定直接将表结构提供给AI助手，让它帮我进行代码的自动生成，以便快速完成任务。</p>
<p>当然，我个人更倾向于使用补全功能，这样可以让我慢慢确保代码的准确性。例如，可以按照下面的方式进行操作：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png"/></p>
<p>紧接着，联调测试的时候，发现还是少了一个值，报错如下。此时，根据以往的经验，需要进一步进行人工排查和分析，基本会耗费5-10分支时间去排错。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png"/></p>
<p>我们可以直接利用AI助手，让它为我们高效地搜索和定位所需的信息。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png"/></p>
<p>刚才我们提出的问题表达得比较模糊，因此希望能够进一步明确一下具体缺失的是哪个字段。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png"/></p>
<p>非常顺利，最后成功运行了，如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png"/></p>
<h2 id="赋值问题">赋值问题</h2>
<p>尽管我在前端已经明确传递了某个字段的值，但为什么在实际操作中没有成功赋值？同时，我的SQL语句中也确实包含了该字段的插入操作。为了更好地解决这个问题，我会毫不犹豫地向AI助手寻求指导。如图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png"/></p>
<p>发现是由于忘记编写getter方法导致的问题。老旧项目中没有使用Lombok，这是没办法的事情，我们必须手动实现这些方法。经过修复后，相关属性能够正常赋值。</p>
<h2 id="对比字段">对比字段</h2>
<p>目前，由于两个系统所直接使用的数据库存在不一致的问题，这将导致后续的维护工作变得异常困难。因此，根据业务需求，我们需要对数据进行补齐。然而，我发现至少缺少五个数据项，并且这些数据的顺序也已经被打乱。自行进行排查无疑会浪费大量时间。</p>
<p>在这种情况下，使用AI代码助手将是一个极为有效的解决方案，如下图所示：</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png"/></p>
<p>很快就能得出结果，直接将SQL生成完成，后续只需将SQL上线即可，无需再做额外调整。</p>
<p><img alt="image" loading="lazy" src="https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png"/></p>
<p>最后，在不断地向AI代码助手请教的过程中，我终于成功完成了CRUD这项基本任务。这样一来，我再也不需要浪费时间和精力去处理那些琐碎而无意义的错误了。</p>
<h1 id="总结">总结</h1>
<p>在软件开发的过程中，我们常常会遇到各种棘手的bug，它们可能看似无害，但却能消耗大量时间和精力。虽然解决这些问题本身可能并没有太大技术挑战，但长时间的调试和排查无疑会使人感到沮丧。然而，借助现代技术工具，尤其是AI代码助手，我们能够大大提高效率，避免陷入无休止的错误修复死循环。</p>
<p>通过今天的分享，我们看到如何利用AI助手快速定位并解决SQL排错问题，节省调试时间，同时提升工作效率。与其在错误中反复徘徊，不如学会借助工具，让自己能够更加专注于技术的深度探索与创新。</p>
<hr/>
<p>我是努力的小雨，一名 Java 服务端码农，潜心研究着 AI 技术的奥秘。我热爱技术交流与分享，对开源社区充满热情。同时也是一位腾讯云创作之星、阿里云专家博主、华为云云享专家、掘金优秀作者。</p>
<p>💡 我将不吝分享我在技术道路上的个人探索与经验，希望能为你的学习与成长带来一些启发与帮助。</p>
<p>🌟 欢迎关注努力的小雨！🌟</p>
</div> (base_parser.py:372)
2024-11-29 15:37:53 [INFO] 作者：努力的小雨 (base_parser.py:373)
2024-11-29 15:37:53 [INFO] 时间：2024-11-29 (base_parser.py:374)
2024-11-29 15:37:53 [INFO] 标题：借助AI助手如何高效排查SQL问题 (base_parser.py:375)
2024-11-29 15:37:53 [INFO] 保存文件夹：temp\-3552210400235744823\博客园-努力的小雨 (base_parser.py:262)
2024-11-29 15:37:57 [INFO] 开始保存文章 (base_parser.py:414)
2024-11-29 15:37:57 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:239)
2024-11-29 15:37:57 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:37:57 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:37:57 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:37:57 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:37:57 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:37:57 [INFO] 保存目录: temp\-3552210400235744823\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:37:57 [INFO] HTML文件已保存: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (save_utils.py:91)
2024-11-29 15:37:57 [INFO] 添加文件到文件列表：temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:66)
2024-11-29 15:37:57 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (base_parser.py:71)
2024-11-29 15:37:57 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:37:57 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:239)
2024-11-29 15:37:57 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:37:57 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:37:57 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:37:57 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:37:57 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:37:57 [INFO] 保存目录: temp\-3552210400235744823\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:37:57 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:37:57 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:37:57 [INFO] Markdown文件已保存: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (save_utils.py:127)
2024-11-29 15:37:57 [INFO] 添加文件到文件列表：temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:66)
2024-11-29 15:37:57 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (base_parser.py:71)
2024-11-29 15:37:57 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:37:57 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf (base_parser.py:239)
2024-11-29 15:37:57 [INFO] 找到wkhtmltopdf: D:\code\Python\BlogKeeper\tools\wkhtmltopdf\bin\wkhtmltopdf.exe (save_utils.py:153)
2024-11-29 15:37:59 [INFO] 添加文件到文件列表：temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf (base_parser.py:66)
2024-11-29 15:37:59 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf (base_parser.py:71)
2024-11-29 15:37:59 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:37:59 [INFO] 保存文件名：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:239)
2024-11-29 15:37:59 [INFO] base_save_handle 处理图片https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:33)
2024-11-29 15:37:59 [INFO] content类型: <class 'bs4.element.Tag'> (save_utils.py:34)
2024-11-29 15:37:59 [INFO] base_save_handle 处理图片00https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:36)
2024-11-29 15:37:59 [INFO] === 开始处理文章中的图片 === (save_utils.py:377)
2024-11-29 15:37:59 [INFO] 基础URL: https://www.cnblogs.com/guoxiaoyu/p/18570707 (save_utils.py:378)
2024-11-29 15:37:59 [INFO] 保存目录: temp\-3552210400235744823\博客园-努力的小雨 (save_utils.py:379)
2024-11-29 15:37:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:404)
2024-11-29 15:37:59 [INFO] 处理第 1 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:417)
2024-11-29 15:37:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:404)
2024-11-29 15:37:59 [INFO] 处理第 2 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:417)
2024-11-29 15:37:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:404)
2024-11-29 15:37:59 [INFO] 处理第 3 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:417)
2024-11-29 15:37:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:404)
2024-11-29 15:37:59 [INFO] 处理第 4 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:417)
2024-11-29 15:37:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:404)
2024-11-29 15:37:59 [INFO] 处理第 5 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:417)
2024-11-29 15:37:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:404)
2024-11-29 15:37:59 [INFO] 处理第 6 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:417)
2024-11-29 15:37:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:404)
2024-11-29 15:37:59 [INFO] 处理第 7 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:417)
2024-11-29 15:37:59 [INFO] 使用图片属性 src: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:404)
2024-11-29 15:37:59 [INFO] 处理第 8 个图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:417)
2024-11-29 15:37:59 [INFO] === 图片处理完成: 共处理 8 个图片，其中 0 个webp格式 === (save_utils.py:448)
2024-11-29 15:38:00 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175207042-436532843.png (save_utils.py:300)
2024-11-29 15:38:01 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175212994-1417959224.png (save_utils.py:300)
2024-11-29 15:38:01 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175221554-103543895.png (save_utils.py:300)
2024-11-29 15:38:03 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175226394-1994894556.png (save_utils.py:300)
2024-11-29 15:38:04 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175232260-128938558.png (save_utils.py:300)
2024-11-29 15:38:05 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175238564-1522532767.png (save_utils.py:300)
2024-11-29 15:38:05 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175350757-2131927189.png (save_utils.py:300)
2024-11-29 15:38:06 [INFO] 成功下载图片: https://img2024.cnblogs.com/blog/1423484/202411/1423484-20241126175355527-283886001.png (save_utils.py:300)
2024-11-29 15:38:06 [INFO] MHTML文件已保存: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (save_utils.py:265)
2024-11-29 15:38:06 [INFO] 添加文件到文件列表：temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:66)
2024-11-29 15:38:06 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (base_parser.py:71)
2024-11-29 15:38:06 [INFO] 添加文件到文件列表：借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29 (base_parser.py:73)
2024-11-29 15:38:06 [INFO] 原始文件列表: [{'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-3552210400235744823\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'}, {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-3552210400235744823\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'size': 5989, 'format': 'md'}, {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-3552210400235744823\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf', 'size': 312373, 'format': 'pdf'}, {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': 'temp\\-3552210400235744823\\博客园-努力的小雨\\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'size': 398643, 'format': 'mhtml'}] (api.py:152)
2024-11-29 15:38:06 [INFO] 请求的格式: {'html', 'mhtml', 'md', 'pdf'} (api.py:163)
2024-11-29 15:38:06 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'size': 110822, 'format': 'html'} (api.py:171)
2024-11-29 15:38:06 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'size': 5989, 'format': 'md'} (api.py:171)
2024-11-29 15:38:06 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf', 'size': 312373, 'format': 'pdf'} (api.py:171)
2024-11-29 15:38:06 [INFO] 处理后的文件信息: {'title': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', 'download_url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'size': 398643, 'format': 'mhtml'} (api.py:171)
2024-11-29 15:38:06 [INFO] 最终返回的文件列表: [FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', size=110822, format='html'), FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', size=5989, format='md'), FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf', size=312373, format='pdf'), FileInfo(title='借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29', download_url='/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', size=398643, format='mhtml')] (api.py:175)
2024-11-29 15:38:12 [INFO] 原始请求体: b'{"files":[{"url":"/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.html"},{"url":"/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.md","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.md"},{"url":"/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.pdf","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.pdf"},{"url":"/download/-3552210400235744823/\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8/\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.mhtml","filename":"\xe5\x80\x9f\xe5\x8a\xa9AI\xe5\x8a\xa9\xe6\x89\x8b\xe5\xa6\x82\xe4\xbd\x95\xe9\xab\x98\xe6\x95\x88\xe6\x8e\x92\xe6\x9f\xa5SQL\xe9\x97\xae\xe9\xa2\x98-\xe5\x8a\xaa\xe5\x8a\x9b\xe7\x9a\x84\xe5\xb0\x8f\xe9\x9b\xa8-\xe5\x8d\x9a\xe5\xae\xa2\xe5\x9b\xad-2024-11-29.mhtml"}]}' (api.py:73)
2024-11-29 15:38:12 [INFO] 解析后的请求参数: {'files': [{'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html'}, {'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md'}, {'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf'}, {'url': '/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml', 'filename': '借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml'}]} (api.py:74)
2024-11-29 15:38:12 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:89)
2024-11-29 15:38:12 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:93)
2024-11-29 15:38:12 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html (api.py:104)
2024-11-29 15:38:12 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:89)
2024-11-29 15:38:12 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:93)
2024-11-29 15:38:12 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.md (api.py:104)
2024-11-29 15:38:12 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf (api.py:89)
2024-11-29 15:38:12 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf (api.py:93)
2024-11-29 15:38:12 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.pdf (api.py:104)
2024-11-29 15:38:12 [INFO] 处理文件: URL=/download/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml, 路径=temp/-3552210400235744823/博客园-努力的小雨/借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml, 文件名=借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:89)
2024-11-29 15:38:12 [INFO] 完整路径: temp\-3552210400235744823\博客园-努力的小雨\借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:93)
2024-11-29 15:38:12 [INFO] 已添加到ZIP: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.mhtml (api.py:104)
2024-11-29 15:38:12 [INFO] 生成ZIP文件: 借助AI助手如何高效排查SQL问题-努力的小雨-博客园-2024-11-29.html.zip (api.py:109)
